# # A 3-Dimensional Surface Mixing Example
#
# Here we simulate phytoplankton cells as Lagrangian particles in a 3D flow field generated by 
# [Oceananigans.jl](https://github.com/climate-machine/Oceananigans.jl).
# The domain is periodic in both directions horizontally and bounded in vertical direction.

#nb # %% {"slideshow": {"slide_type": "slide"}, "cell_type": "markdown"}
# ## 1. Import packages
#
using PlanktonIndividuals, Plots, JLD2

#nb # %% {"slideshow": {"slide_type": "slide"}, "cell_type": "markdown"}
# ## 2. Generate Flow Fields
#
# First we'll generate grid information
grid = RegularRectilinearGrid(size=(32, 32, 32), spacing=(4, 4, 4))

# We use [Oceananigans.jl](https://github.com/climate-machine/Oceananigans.jl) to generate flow fields.
# Script used [here](https://github.com/JuliaOcean/PlanktonIndividuals.jl/blob/master/examples/generate_flow_fields.jl).
#
# Then we read in the velocity fields
#
vels_file = jldopen(PlanktonIndividuals.surface_mixing_vels,"r")
iterations = parse.(Int, keys(vels_file["timeseries/t"]))
times = [vels_file["timeseries/t/$iter"] for iter in iterations]
u = zeros(32,32,32,length(iterations))
v = zeros(32,32,32,length(iterations))
w = zeros(32,32,33,length(iterations))
for (i, iter) in enumerate(iterations)
    u[:,:,:,i] .= reverse(vels_file["timeseries/u/$iter"], dims=3)
    v[:,:,:,i] .= reverse(vels_file["timeseries/v/$iter"], dims=3)
    w[:,:,:,i] .= reverse(vels_file["timeseries/w/$iter"], dims=3)
end

#nb # %% {"slideshow": {"slide_type": "slide"}, "cell_type": "markdown"}
# ## 3. Model Setup
#
# Next we setup the individual-based model by specifying the architecture, grid,
# number of individuals, parameters, and nutrient initial conditions.

model = PI_Model(CPU(), grid; individual_size = (Nsp = 1, N = 2^8, cap = 8))

# We also need to setup a runtime simulation to run the model.
# The simulation includes time step, number of time steps, flow fields that
# will be used etc.

sim = PI_simulation(model, ΔT = 60, nΔT = 1, diag_freq = 3600, 
                    vels=(u=u, v=v, w=w))

#nb # %% {"slideshow": {"slide_type": "slide"}, "cell_type": "markdown"}
# ## 4. Run the Model
#
# Finaly, we run the model and plot the distribution of individuals as well as nutrient fields
# We use Plots.jl to plot individuals and a slice of nutrient fields.
#
function plot(model::PI_Model)
    ## Coordinate arrays for plotting
    xC, zC = collect(model.grid.xC)[3:34], collect(model.grid.zC)[3:34]

    ## a scatter plot embeded in the flow fields
    px = Array(model.individuals.phytos.sp1.data.x)
    py = Array(model.individuals.phytos.sp1.data.y)
    pz = Array(model.individuals.phytos.sp1.data.z)
    p_plot = Plots.scatter(px, py, pz, xlims=(0,128), ylims=(0,128), zlims=(-128,1), ms=5, color = :red, legend=:none, fmt=:png)

    ## the middle slice of DOC field
    trac1 = Plots.heatmap(xC, reverse(zC), rotl90(Array(model.nutrients.DOC.data)[3:34,18,3:34]), xlabel="x (m)", ylabel="z (m)", clims=(0.5, 1.1), fmt=:png)

    ## Arrange the plots side-by-side.
    plt = Plots.plot(p_plot, trac1, size=(800, 400),
        title=[lpad(model.t÷86400,2,"0")*"day "*lpad(model.t÷3600-24*(model.t÷86400),2,"0")*"hour" "DOC (mmolC/L)"])

    return plt
end
#
# We run the model for 60 time steps (1 hour) and plot the individuals and DOC field.
for i in 1:60
    update!(sim)
end

plot(model)

#nb # %% {"slideshow": {"slide_type": "slide"}, "cell_type": "markdown"}
# Or you can use the following code to generate an animation like below
#
# ```
# anim = @animate for i in 1:60
#    update!(sim)
#    plot(model)
# end
# gif(anim, "anim_fps15.gif", fps = 15)
# ```
# ![animation](https://github.com/JuliaOcean/PlanktonIndividuals.jl/raw/master/examples/figures/anim_surface_mixing_3D.gif)