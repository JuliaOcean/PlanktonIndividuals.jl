mutable struct PlanktonModel
    arch::Architecture          # architecture on which models will run
    t::Int64                    # time in second
    iteration::Int64            # model interation
    individuals::individuals    # initial individuals generated by `setup_agents`
    nutrients::NamedTuple       # initial nutrient fields
    grid::AbstractGrid          # grid information
    bgc_params::Dict            # biogeochemical parameter set
    timestepper::timestepper    # operating Tuples and arrays for timestep
end

"""
    PlanktonModel(arch::Architecture, grid::RegularRectilinearGrid;
                  individual_size = (Nsp = 1, N = 1024, cap = 8),
                  bgc_params = bgc_params_default(), 
                  phyt_params = phyt_params_default(),
                  nut_source = default_nut_init(),
                  t = 0.0,
                  mask = nothing,
                  )

Generate a `PlanktonModel` data structure. 

Keyword Arguments (Required)
============================
- `arch` : `CPU()` or `GPU()`. Computer architecture being used to run the model.
- `grid` : a `AbstractGrid` structure. Discrete grid for the model (resolution and geometry).

Keyword Arguments (Optional)
============================
- `individual_size` : `NamedTuple` used to set number of species `Nsp`, number of individuals `N`,
                                and max individual capacity `cap`.
- `bgc_params` : Parameter set for biogeochemical processes modeled in the model.
- `phyt_params` : Parameter set for physiological processes of individuals modeled in the model.
- `nut_source` : The source of initial conditions of nutrient fields, should be either a `NamedTuple` 
                           or a `Dict` containing the file paths pointing to the files of nutrient initial conditions.
- `t` : Model time, start from 0 by default, in second.
- `mask` : Mask out the individuals and tracers generated out of the domain, a 3D array with size `(Nx, Ny, Nz)`.
"""
function PlanktonModel(arch::Architecture, grid::RegularRectilinearGrid;
                       individual_size = (Nsp = 1, N = 1024, cap = 8),
                       bgc_params = bgc_params_default(), 
                       phyt_params = phyt_params_default(),
                       nut_source = default_nut_init(),
                       t = 0.0,
                       mask = nothing,
                       )

    if arch == GPU() && !has_cuda()
        throw(ArgumentError("Cannot create a GPU model. No CUDA-enabled GPU was detected!"))
    end

    inds = individuals(phyt_params, arch, individual_size.Nsp, individual_size.N, individual_size.cap)

    for plank in inds.phytos
        gen_individuals!(plank, individual_size.N, grid, arch; mask = mask)
    end

    nutrients = generate_nutrients(arch, grid, nut_source; mask = mask)

    ts = timestepper(arch, grid, individual_size.N, individual_size.cap)

    iteration  = 0

    model = PlanktonModel(arch, t, iteration, inds, nutrients, grid, bgc_params, ts)

    return model
end

import Base: show

function show(io::IO, model::PlanktonModel)
    Nsp = length(model.individuals.phytos)
    N = Int(dot(model.individuals.phytos.sp1.data.ac,model.individuals.phytos.sp1.data.ac))
    cap = length(model.individuals.phytos.sp1.data.ac)
    print(io, "grid: Nx = $(model.grid.Nx), Ny = $(model.grid.Ny), Nz = $(model.grid.Nz)\n",
              "individuals: $(Nsp) phytoplankton species each with $(N) individuals\n",
              "capacity of individuals: $(cap) per species\n")
end