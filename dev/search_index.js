var documenterSearchIndex = {"docs":
[{"location":"function_index/#Function-Index","page":"Function index","title":"Function Index","text":"","category":"section"},{"location":"function_index/","page":"Function index","title":"Function index","text":"","category":"page"},{"location":"benchmarks/#benchmarks","page":"Benchmarks","title":"Benchmarks","text":"","category":"section"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"Here we benchmark the model performance in two Architectures. The number of individuals used in the benchmark are (2^10, 2^12, 2^14, 2^15). And we also use different grid resolutions in 2-Dimensional and 3-Dimensional model setup.","category":"page"},{"location":"benchmarks/#0-Dimensional-model","page":"Benchmarks","title":"0-Dimensional model","text":"","category":"section"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"This is a benchmark of a simple 0-Dimensional model setup without advection of Eulerian tracers. However, the advection of individuals still take the same amount of time whether the velocity field is provided or not.","category":"page"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"PlanktonIndividuals v0.7.5\nJulia Version 1.11.7\nCommit f2b3dbda30a (2025-09-08 12:10 UTC)\nPlatform Info:\n  OS: Linux (x86_64-linux-gnu)\n  CPU: 56 × Intel(R) Xeon(R) Gold 6132 CPU @ 2.60GHz\n  WORD_SIZE: 64\n  LLVM: libLLVM-16.0.6 (ORCJIT, skylake-avx512)\n  GPU: Quadro GV100 (sm_70, 32.000 GiB available)\n  CUDA runtime 12.9, artifact installation\n  CUDA driver 565.57.1 for 12.7","category":"page"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"Arch N min median mean max memory allocs samples\nCPU 1024 2.536 ms 2.629 ms 2.696 ms 3.204 ms 463.71 KiB 3673 10\nCPU 4096 8.091 ms 8.201 ms 8.252 ms 8.829 ms 632.18 KiB 3673 10\nCPU 16384 30.433 ms 30.558 ms 30.745 ms 31.809 ms 1.28 MiB 3595 10\nCPU 32768 59.959 ms 60.364 ms 60.354 ms 60.980 ms 2.15 MiB 3595 10\nGPU 1024 13.006 ms 13.194 ms 13.322 ms 14.415 ms 2.68 MiB 77257 10\nGPU 4096 13.152 ms 13.334 ms 13.386 ms 13.991 ms 2.68 MiB 77257 10\nGPU 16384 13.562 ms 13.755 ms 13.800 ms 14.595 ms 2.68 MiB 77260 10\nGPU 32768 14.646 ms 14.879 ms 14.948 ms 15.450 ms 2.68 MiB 77263 10","category":"page"},{"location":"benchmarks/#2-Dimensional-model","page":"Benchmarks","title":"2-Dimensional model","text":"","category":"section"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"This is the benchmark of a 2-Dimensional model setup with (Ns, 1, Ns) grid cells. Here Ns = [32, 64, 128].","category":"page"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"PlanktonIndividuals v0.7.5\nJulia Version 1.11.7\nCommit f2b3dbda30a (2025-09-08 12:10 UTC)\nPlatform Info:\n  OS: Linux (x86_64-linux-gnu)\n  CPU: 56 × Intel(R) Xeon(R) Gold 6132 CPU @ 2.60GHz\n  WORD_SIZE: 64\n  LLVM: libLLVM-16.0.6 (ORCJIT, skylake-avx512)\n  GPU: Quadro GV100 (sm_70, 32.000 GiB available)\n  CUDA runtime 12.9, artifact installation\n  CUDA driver 565.57.1 for 12.7","category":"page"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"Arch N Ns min median mean max memory allocs samples\nCPU 1024 32 5.659 ms 5.788 ms 5.874 ms 6.463 ms 1.92 MiB 4317 10\nCPU 1024 64 13.497 ms 13.608 ms 13.770 ms 15.069 ms 5.80 MiB 4878 10\nCPU 1024 128 45.442 ms 54.734 ms 53.155 ms 61.680 ms 20.65 MiB 6158 10\nCPU 4096 32 11.307 ms 11.427 ms 11.519 ms 12.184 ms 2.08 MiB 4238 10\nCPU 4096 64 19.120 ms 19.479 ms 19.667 ms 20.766 ms 5.96 MiB 4878 10\nCPU 4096 128 51.716 ms 56.439 ms 57.364 ms 65.370 ms 20.82 MiB 6158 10\nCPU 16384 32 33.569 ms 33.907 ms 34.243 ms 35.965 ms 2.74 MiB 4239 10\nCPU 16384 64 41.597 ms 42.110 ms 42.844 ms 45.371 ms 6.62 MiB 4879 10\nCPU 16384 128 75.032 ms 87.652 ms 83.260 ms 89.017 ms 21.47 MiB 6159 10\nCPU 32768 32 63.176 ms 63.657 ms 63.717 ms 64.465 ms 3.62 MiB 4239 10\nCPU 32768 64 71.786 ms 72.317 ms 73.374 ms 76.535 ms 7.50 MiB 4879 10\nCPU 32768 128 106.093 ms 116.530 ms 113.994 ms 120.500 ms 22.35 MiB 6159 10\nGPU 1024 32 12.915 ms 13.093 ms 13.219 ms 13.851 ms 2.87 MiB 83564 10\nGPU 1024 64 13.688 ms 14.272 ms 14.355 ms 15.455 ms 3.15 MiB 93423 10\nGPU 1024 128 15.540 ms 16.113 ms 16.036 ms 16.361 ms 3.92 MiB 117894 10\nGPU 4096 32 12.888 ms 13.249 ms 13.541 ms 15.147 ms 2.87 MiB 83564 10\nGPU 4096 64 13.768 ms 13.912 ms 14.277 ms 15.145 ms 3.15 MiB 93423 10\nGPU 4096 128 15.740 ms 16.697 ms 16.592 ms 17.422 ms 3.92 MiB 117894 10\nGPU 16384 32 13.514 ms 13.832 ms 14.139 ms 16.544 ms 2.87 MiB 83565 10\nGPU 16384 64 13.956 ms 14.564 ms 14.831 ms 17.842 ms 3.15 MiB 93425 10\nGPU 16384 128 15.721 ms 15.844 ms 15.941 ms 16.880 ms 3.92 MiB 117896 10\nGPU 32768 32 13.689 ms 13.823 ms 13.926 ms 15.010 ms 2.87 MiB 83568 10\nGPU 32768 64 14.460 ms 15.067 ms 15.092 ms 15.700 ms 3.15 MiB 93428 10\nGPU 32768 128 16.284 ms 17.469 ms 17.356 ms 18.070 ms 3.92 MiB 117899 10","category":"page"},{"location":"benchmarks/#3-Dimensional-model","page":"Benchmarks","title":"3-Dimensional model","text":"","category":"section"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"This is the benchmark of a 3-Dimensional model setup with (Ns, Ns, Ns) grid cells. Here Ns = [32, 64, 128].","category":"page"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"PlanktonIndividuals v0.7.5\nJulia Version 1.11.7\nCommit f2b3dbda30a (2025-09-08 12:10 UTC)\nPlatform Info:\n  OS: Linux (x86_64-linux-gnu)\n  CPU: 56 × Intel(R) Xeon(R) Gold 6132 CPU @ 2.60GHz\n  WORD_SIZE: 64\n  LLVM: libLLVM-16.0.6 (ORCJIT, skylake-avx512)\n  GPU: Quadro GV100 (sm_70, 32 GiB available)\n  CUDA runtime 12.9, artifact installation\n  CUDA driver 565.57.1 for 12.7","category":"page"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"Arch N Ns min median mean max memory allocs samples\nCPU 1024 32 51.587 ms 52.013 ms 52.390 ms 54.706 ms 1.06 MiB 4305 10\nCPU 1024 64 407.569 ms 414.229 ms 413.787 ms 419.221 ms 5.55 MiB 8017 10\nCPU 1024 128 3.293 s 3.301 s 3.301 s 3.310 s 40.95 MiB 21585 2\nCPU 4096 32 56.841 ms 58.601 ms 58.606 ms 60.820 ms 1.22 MiB 4305 10\nCPU 4096 64 422.655 ms 425.630 ms 425.657 ms 428.760 ms 5.72 MiB 8017 10\nCPU 4096 128 3.318 s 3.337 s 3.337 s 3.357 s 41.11 MiB 21585 2\nCPU 16384 32 81.034 ms 82.007 ms 82.366 ms 84.177 ms 1.88 MiB 4306 10\nCPU 16384 64 454.705 ms 457.783 ms 457.526 ms 459.801 ms 6.37 MiB 8018 10\nCPU 16384 128 3.336 s 3.374 s 3.374 s 3.413 s 41.77 MiB 21586 2\nCPU 32768 32 112.225 ms 113.137 ms 113.290 ms 114.879 ms 2.76 MiB 4306 10\nCPU 32768 64 495.213 ms 497.812 ms 498.189 ms 501.221 ms 7.25 MiB 8018 10\nCPU 32768 128 3.472 s 3.482 s 3.482 s 3.493 s 42.65 MiB 21586 2\nGPU 1024 32 12.288 ms 12.387 ms 12.577 ms 13.428 ms 4.08 MiB 115165 10\nGPU 1024 64 20.906 ms 21.227 ms 21.697 ms 24.127 ms 13.06 MiB 353213 10\nGPU 1024 128 90.657 ms 110.816 ms 113.920 ms 168.241 ms 83.72 MiB 2211802 10\nGPU 4096 32 12.225 ms 12.322 ms 12.434 ms 13.159 ms 4.08 MiB 115165 10\nGPU 4096 64 20.767 ms 21.059 ms 21.390 ms 24.283 ms 13.06 MiB 353213 10\nGPU 4096 128 90.616 ms 110.673 ms 114.507 ms 170.346 ms 83.72 MiB 2211802 10\nGPU 16384 32 12.400 ms 12.531 ms 12.670 ms 13.325 ms 4.08 MiB 115167 10\nGPU 16384 64 21.132 ms 21.983 ms 22.558 ms 25.184 ms 13.06 MiB 353215 10\nGPU 16384 128 90.849 ms 110.157 ms 114.308 ms 169.462 ms 83.72 MiB 2211804 10\nGPU 32768 32 13.077 ms 14.088 ms 13.939 ms 14.860 ms 4.08 MiB 115170 10\nGPU 32768 64 21.697 ms 22.645 ms 22.986 ms 25.235 ms 13.06 MiB 353217 10\nGPU 32768 128 92.342 ms 110.662 ms 112.529 ms 169.928 ms 83.72 MiB 2211807 10","category":"page"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"PlanktonIndividuals.jl now can also run on Apple M-series GPU. Below is a similar benchmark on Apple CPU and GPU.","category":"page"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"PlanktonIndividuals v0.7.5\nJulia Version 1.11.7\n\nmacOS 26.0.0, Darwin 25.0.0\n\nToolchain:\n- Julia: 1.11.7\n- LLVM: 16.0.6\n\nJulia packages: \n- Metal.jl: 1.8.0\n- GPUArrays: 11.2.3\n- GPUCompiler: 1.6.1\n- KernelAbstractions: 0.9.38\n- ObjectiveC: 3.4.2\n- LLVM: 9.4.2\n- LLVMDowngrader_jll: 0.6.0+1\n\n1 device:\n- Apple M4 Pro 20 GPU cores (64 GiB Unified Memory)","category":"page"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"Arch N min median mean max memory allocs samples\nCPU 1024 718.333 μs 771.458 μs 798.633 μs 1.006 ms 467.94 KiB 3679 10\nCPU 4096 2.447 ms 2.518 ms 2.565 ms 2.944 ms 636.72 KiB 3679 10\nCPU 16384 9.089 ms 9.216 ms 9.226 ms 9.497 ms 1.28 MiB 3680 10\nCPU 65536 37.136 ms 37.409 ms 37.412 ms 37.770 ms 3.92 MiB 3601 10\nGPU 1024 70.685 ms 72.641 ms 73.513 ms 79.681 ms 3.47 MiB 115344 10\nGPU 4096 77.897 ms 81.464 ms 81.831 ms 89.131 ms 3.48 MiB 115532 10\nGPU 16384 80.004 ms 81.610 ms 81.961 ms 88.787 ms 3.47 MiB 115508 10\nGPU 65536 81.589 ms 81.993 ms 82.922 ms 91.138 ms 3.48 MiB 115611 10","category":"page"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"Arch N Ns min median mean max memory allocs samples\nCPU 1024 32 1.650 ms 1.727 ms 1.746 ms 2.009 ms 2.20 MiB 4323 10\nCPU 1024 64 4.302 ms 4.335 ms 4.428 ms 4.902 ms 7.53 MiB 4963 10\nCPU 1024 128 14.636 ms 14.975 ms 15.051 ms 15.846 ms 21.81 MiB 6164 10\nCPU 1024 256 58.705 ms 59.051 ms 59.212 ms 61.558 ms 81.09 MiB 8725 10\nCPU 4096 32 3.334 ms 3.425 ms 3.462 ms 3.846 ms 2.36 MiB 4323 10\nCPU 4096 64 6.199 ms 6.277 ms 6.349 ms 6.809 ms 7.70 MiB 4963 10\nCPU 4096 128 16.575 ms 16.851 ms 16.908 ms 17.764 ms 21.98 MiB 6164 10\nCPU 4096 256 60.498 ms 61.014 ms 61.461 ms 65.441 ms 81.26 MiB 8725 10\nCPU 16384 32 9.935 ms 10.054 ms 10.088 ms 10.442 ms 3.02 MiB 4245 10\nCPU 16384 64 15.174 ms 15.359 ms 15.371 ms 15.721 ms 8.36 MiB 4885 10\nCPU 16384 128 26.593 ms 26.860 ms 26.911 ms 27.408 ms 22.64 MiB 6165 10\nCPU 16384 256 71.047 ms 71.621 ms 71.659 ms 72.294 ms 81.92 MiB 8726 10\nCPU 65536 32 38.325 ms 38.712 ms 38.760 ms 39.282 ms 5.66 MiB 4245 10\nCPU 65536 64 49.727 ms 50.438 ms 50.447 ms 50.888 ms 10.99 MiB 4885 10\nCPU 65536 128 64.143 ms 64.990 ms 64.915 ms 65.964 ms 25.28 MiB 6165 10\nCPU 65536 256 112.613 ms 113.154 ms 113.323 ms 114.930 ms 84.55 MiB 8726 10\nGPU 1024 32 52.458 ms 53.845 ms 54.525 ms 61.694 ms 3.58 MiB 118477 10\nGPU 1024 64 54.444 ms 55.915 ms 57.301 ms 72.506 ms 3.93 MiB 130398 10\nGPU 1024 128 58.973 ms 60.532 ms 62.796 ms 86.138 ms 4.85 MiB 159336 10\nGPU 1024 256 75.546 ms 78.564 ms 83.052 ms 111.422 ms 7.59 MiB 241115 10\nGPU 4096 32 51.781 ms 53.934 ms 55.887 ms 76.180 ms 3.58 MiB 118592 10\nGPU 4096 64 55.067 ms 56.103 ms 56.670 ms 63.328 ms 3.93 MiB 130565 10\nGPU 4096 128 54.806 ms 60.063 ms 60.309 ms 72.531 ms 4.85 MiB 159534 10\nGPU 4096 256 78.388 ms 79.156 ms 82.094 ms 101.848 ms 7.59 MiB 241281 10\nGPU 16384 32 50.982 ms 53.887 ms 54.549 ms 61.776 ms 3.58 MiB 118608 10\nGPU 16384 64 55.210 ms 56.055 ms 58.040 ms 77.365 ms 3.93 MiB 130575 10\nGPU 16384 128 59.182 ms 60.448 ms 62.112 ms 78.982 ms 4.85 MiB 159542 10\nGPU 16384 256 76.740 ms 78.906 ms 81.357 ms 105.150 ms 7.59 MiB 241292 10\nGPU 65536 32 52.495 ms 53.323 ms 54.469 ms 63.653 ms 3.58 MiB 118715 10\nGPU 65536 64 54.705 ms 56.284 ms 57.580 ms 70.857 ms 3.93 MiB 130660 10\nGPU 65536 128 54.231 ms 56.561 ms 57.933 ms 70.151 ms 4.85 MiB 159663 10\nGPU 65536 256 76.922 ms 79.406 ms 82.436 ms 110.916 ms 7.60 MiB 241376 10","category":"page"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"Arch N Ns min median mean max memory allocs samples\nCPU 1024 32 13.701 ms 14.026 ms 14.027 ms 14.352 ms 1.07 MiB 4311 10\nCPU 1024 64 104.133 ms 104.601 ms 104.670 ms 105.534 ms 5.55 MiB 8023 10\nCPU 1024 128 828.092 ms 829.160 ms 828.977 ms 829.878 ms 43.23 MiB 21591 7\nCPU 1024 256 6.707 s 6.707 s 6.707 s 6.707 s 322.40 MiB 73303 1\nCPU 4096 32 15.903 ms 16.124 ms 16.141 ms 16.600 ms 1.24 MiB 4311 10\nCPU 4096 64 106.679 ms 107.173 ms 107.316 ms 108.028 ms 5.72 MiB 8023 10\nCPU 4096 128 820.950 ms 821.295 ms 821.341 ms 821.975 ms 41.12 MiB 21591 7\nCPU 4096 256 6.801 s 6.801 s 6.801 s 6.801 s 322.56 MiB 73303 1\nCPU 16384 32 25.392 ms 25.647 ms 25.625 ms 25.994 ms 1.90 MiB 4312 10\nCPU 16384 64 117.064 ms 117.777 ms 117.660 ms 118.296 ms 6.38 MiB 8024 10\nCPU 16384 128 833.843 ms 835.038 ms 834.786 ms 835.743 ms 41.77 MiB 21592 6\nCPU 16384 256 6.712 s 6.712 s 6.712 s 6.712 s 323.22 MiB 73304 1\nCPU 65536 32 65.352 ms 66.282 ms 66.218 ms 66.924 ms 4.54 MiB 4312 10\nCPU 65536 64 165.360 ms 166.149 ms 166.157 ms 167.143 ms 9.02 MiB 8024 10\nCPU 65536 128 888.348 ms 889.139 ms 889.124 ms 890.255 ms 44.41 MiB 21592 6\nCPU 65536 256 6.776 s 6.776 s 6.776 s 6.776 s 325.86 MiB 73304 1\nGPU 1024 32 21.830 ms 22.871 ms 23.228 ms 28.077 ms 4.56 MiB 140410 10\nGPU 1024 64 29.849 ms 30.973 ms 32.603 ms 48.207 ms 13.65 MiB 383611 10\nGPU 1024 128 119.130 ms 124.133 ms 126.141 ms 150.394 ms 87.53 MiB 2247365 10\nGPU 1024 256 932.425 ms 962.754 ms 966.198 ms 1.023 s 658.84 MiB 17009358 6\nGPU 4096 32 21.630 ms 22.592 ms 22.975 ms 26.425 ms 4.57 MiB 140587 10\nGPU 4096 64 29.367 ms 29.591 ms 32.406 ms 54.415 ms 13.66 MiB 383807 10\nGPU 4096 128 118.579 ms 125.494 ms 127.510 ms 154.465 ms 86.75 MiB 2247534 10\nGPU 4096 256 915.231 ms 950.850 ms 949.480 ms 969.102 ms 658.84 MiB 17009532 6\nGPU 16384 32 21.454 ms 22.460 ms 22.777 ms 26.804 ms 4.57 MiB 140601 10\nGPU 16384 64 27.957 ms 29.587 ms 31.845 ms 53.485 ms 13.65 MiB 383729 10\nGPU 16384 128 119.955 ms 124.230 ms 127.157 ms 160.412 ms 85.97 MiB 2247538 10\nGPU 16384 256 904.653 ms 963.670 ms 948.708 ms 966.893 ms 658.84 MiB 17009526 6\nGPU 65536 32 20.600 ms 23.022 ms 23.021 ms 26.879 ms 4.57 MiB 140708 10\nGPU 65536 64 26.643 ms 29.079 ms 30.251 ms 44.419 ms 13.66 MiB 383811 10\nGPU 65536 128 120.069 ms 121.475 ms 126.132 ms 163.317 ms 87.53 MiB 2247622 10\nGPU 65536 256 894.671 ms 943.257 ms 938.207 ms 962.530 ms 658.84 MiB 17009612 6","category":"page"},{"location":"library/#Library","page":"Library","title":"Library","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"The public user interface.","category":"page"},{"location":"library/#Architectures","page":"Library","title":"Architectures","text":"","category":"section"},{"location":"library/#PlanktonIndividuals.Architectures.Architecture","page":"Library","title":"PlanktonIndividuals.Architectures.Architecture","text":"Architecture\n\nAbstract type for architectures supported by PlanktonIndividuals.\n\n\n\n\n\n","category":"type"},{"location":"library/#PlanktonIndividuals.Architectures.CPU","page":"Library","title":"PlanktonIndividuals.Architectures.CPU","text":"CPU <: Architecture\n\nRun PlanktonIndividuals on one CPU node.\n\n\n\n\n\n","category":"type"},{"location":"library/#PlanktonIndividuals.Architectures.GPU","page":"Library","title":"PlanktonIndividuals.Architectures.GPU","text":"GPU <: Architecture\n\nRun PlanktonIndividuals on one CUDA GPU node.\n\n\n\n\n\n","category":"type"},{"location":"library/#Grids","page":"Library","title":"Grids","text":"","category":"section"},{"location":"library/#PlanktonIndividuals.Grids.AbstractGrid","page":"Library","title":"PlanktonIndividuals.Grids.AbstractGrid","text":"AbstractGrid{FT, TX, TY, TZ}\n\nAbstract type for grids with elements of type FT and topology {TX, TY, TZ}.\n\n\n\n\n\n","category":"type"},{"location":"library/#PlanktonIndividuals.Grids.Bounded","page":"Library","title":"PlanktonIndividuals.Grids.Bounded","text":"Bounded\n\nGrid topology for bounded dimensions.\n\n\n\n\n\n","category":"type"},{"location":"library/#PlanktonIndividuals.Grids.Periodic","page":"Library","title":"PlanktonIndividuals.Grids.Periodic","text":"Periodic\n\nGrid topology for periodic dimensions.\n\n\n\n\n\n","category":"type"},{"location":"library/#PlanktonIndividuals.Grids.RectilinearGrid-Tuple{}","page":"Library","title":"PlanktonIndividuals.Grids.RectilinearGrid","text":"RectilinearGrid(;size, x, y, z,\n                 FT = Float32,\n                 topology = (Periodic, Periodic, Bounded),\n                 landmask = nothing,\n                 halo = (2, 2, 2))\n\nCreats a RectilinearGrid struct with size = (Nx, Ny, Nz) grid points.     x and y directions must be regular spaced,     z direction can be vertically stretched or regular spaced.\n\nKeyword Arguments (Required)\n\nsize : A tuple prescribing the number of grid points.                size is a 3-tuple no matter for 3D, 2D, or 1D model.\nx and y : A 2-tuple that specify the start and end points of the domain.\nz : is either a (1) 1D array that specifies the locations of cell faces in z direction,               or (2) 2-tuples that specify the start and end points of the domain.               Vertical indexing starts from surface and use negative numbers for depth.\n\nKeyword Arguments (Optional)\n\nFT: Floating point data type. Default: Float32.\ntopology : A 3-tuple specifying the topology of the domain.               The topology can be either Periodic or Bounded in each direction.\nlandmask : a 3-dimentional array to indicate where the land is.\nhalo : A tuple of integers that specifies the size of the halo region of cells               surrounding the physical interior for each direction.               halo is a 3-tuple no matter for 3D, 2D, or 1D model.               At least 2 halo points are needed for DST3FL advection scheme.\n\n\n\n\n\n","category":"method"},{"location":"library/#PlanktonIndividuals.Grids.LatLonGrid-Tuple{}","page":"Library","title":"PlanktonIndividuals.Grids.LatLonGrid","text":"LatLonGrid(;size, lat, lon, z,\n            FT = Float32,\n            radius = 6370.0e3,\n            landmask = nothing,\n            halo = (2, 2, 2))\n\nCreats a LatLonGrid struct with size = (Nx, Ny, Nz) grid points.\n\nKeyword Arguments (Required)\n\nsize : A tuple prescribing the number of grid points.                size is a 3-tuple no matter for 3D, 2D, or 1D model.\nlat : A 2-tuple specifying the startind and ending points in latitudinal direction.               Possible values are from -80 (80S) to 80 (80N).\nlon : A 2-tuple specifying the startind and ending points in longitudinal direction.               Possible values are from -180 (180W) to 180 (180E).\nz : is either a (1) 1D array that specifies the locations of cell faces in z direction,               or (2) 2-tuples that specify the start and end points of the domain.               Vertical indexing starts from surface and use negative numbers for depth.\n\nKeyword Arguments (Optional)\n\nFT: Floating point data type. Default: Float32.\nradius : Specify the radius of the Earth used in the model, 6370.0e3 meters by default.\nlandmask : a 3-dimentional array to indicate where the land is.\nhalo : A tuple of integers that specifies the size of the halo region of cells               surrounding the physical interior for each direction.               halo is a 3-tuple no matter for 3D, 2D, or 1D model.               At least 2 halo points are needed for DST3FL advection scheme.\n\n\n\n\n\n","category":"method"},{"location":"library/#PlanktonIndividuals.Grids.LoadLatLonGrid-Tuple{}","page":"Library","title":"PlanktonIndividuals.Grids.LoadLatLonGrid","text":"LoadLatLonGrid(;grid_info, size, lat, lon,\n                FT = Float32,\n                landmask = nothing,\n                halo=(2,2,2))\n\nCreats a LatLonGrid struct with size = (Nx, Ny, Nz) grid points.\n\nKeyword Arguments (Required)\n\ngrid_info : A NamedTuple contains external grid information (e.g. from MITgcm), please                   refer to documentation for the required format.\nsize : A tuple prescribing the number of grid points.                size is a 3-tuple no matter for 3D, 2D, or 1D model.\nlat : A 2-tuple specifying the startind and ending points in latitudinal direction.               Possible values are from -80 (80S) to 80 (80N).\nlon : A 2-tuple specifying the startind and ending points in longitudinal direction.               Possible values are from -180 (180W) to 180 (180E).\n\nKeyword Arguments (Optional)\n\nFT: Floating point data type. Default: Float32.\nlandmask : a 3-dimentional array to indicate where the land is.\nhalo : A tuple of integers that specifies the size of the halo region of cells               surrounding the physical interior for each direction.               halo is a 3-tuple no matter for 3D, 2D, or 1D model.               At least 2 halo points are needed for DST3FL advection scheme.\n\n\n\n\n\n","category":"method"},{"location":"library/#Biogeochemistry","page":"Library","title":"Biogeochemistry","text":"","category":"section"},{"location":"library/#PlanktonIndividuals.Biogeochemistry.Field-Tuple{Architecture, PlanktonIndividuals.Grids.AbstractGrid, DataType}","page":"Library","title":"PlanktonIndividuals.Biogeochemistry.Field","text":"Field(arch::Architecture, grid::AbstractGrid, FT::DataType; bcs = default_bcs())\n\nConstruct a Field on grid with data and boundary conditions on architecture arch with DataType FT.\n\n\n\n\n\n","category":"method"},{"location":"library/#PlanktonIndividuals.Biogeochemistry.default_tracer_init-Tuple{}","page":"Library","title":"PlanktonIndividuals.Biogeochemistry.default_tracer_init","text":"default_tracer_init()\n\nGenerate defalut bgc tracer initial conditions.\n\n\n\n\n\n","category":"method"},{"location":"library/#PlanktonIndividuals.Biogeochemistry.generate_tracers-Tuple{Architecture, PlanktonIndividuals.Grids.AbstractGrid, Union{Dict, NamedTuple}, DataType}","page":"Library","title":"PlanktonIndividuals.Biogeochemistry.generate_tracers","text":"generate_tracers(arch, grid, source, FT)\n\nSet up initial bgc tracer fields according to grid.\n\nArguments\n\narch: CPU() or GPU(). The computer architecture used to time-step model.\ngrid: The resolution and discrete geometry on which nutrient fields are solved.\nsource: A NamedTuple containing 10 numbers each of which is the uniform initial            condition of one tracer, or a Dict containing the file paths pointing to           the files of nutrient initial conditions.\nFT: Floating point data type. Default: Float32.\n\n\n\n\n\n","category":"method"},{"location":"library/#Parameters","page":"Library","title":"Parameters","text":"","category":"section"},{"location":"library/#PlanktonIndividuals.Parameters.abiotic_params_default-Tuple{Int64}","page":"Library","title":"PlanktonIndividuals.Parameters.abiotic_params_default","text":"abiotic_params_default(N::Int64)\n\nGenerate default abiotic particle parameter values based on species number N.\n\n\n\n\n\n","category":"method"},{"location":"library/#PlanktonIndividuals.Parameters.bgc_params_default-Tuple{Any}","page":"Library","title":"PlanktonIndividuals.Parameters.bgc_params_default","text":"bgc_params_default(FT::DataType)\n\nGenerate default biogeochemical parameter values \n\n\n\n\n\n","category":"method"},{"location":"library/#PlanktonIndividuals.Parameters.default_PARF-Tuple{Any, Any, Any}","page":"Library","title":"PlanktonIndividuals.Parameters.default_PARF","text":"default_PARF(grid, ΔT, iterations)\n\nGenerate default hourly surface PAR.\n\n\n\n\n\n","category":"method"},{"location":"library/#PlanktonIndividuals.Parameters.default_temperature-Tuple{Any, Any, Any}","page":"Library","title":"PlanktonIndividuals.Parameters.default_temperature","text":"default_temperature(grid, ΔT, iterations)\n\nGenerate default hourly temperature.\n\n\n\n\n\n","category":"method"},{"location":"library/#PlanktonIndividuals.Parameters.phyt_params_default-Tuple{Int64, CarbonMode}","page":"Library","title":"PlanktonIndividuals.Parameters.phyt_params_default","text":"phyt_params_default(N::Int64, mode::AbstractMode)\n\nGenerate default phytoplankton parameter values based on AbstractMode and species number N.\n\n\n\n\n\n","category":"method"},{"location":"library/#PlanktonIndividuals.Parameters.phyt_params_default-Tuple{Int64, IronEnergyMode}","page":"Library","title":"PlanktonIndividuals.Parameters.phyt_params_default","text":"phyt_params_default(N::Int64, mode::AbstractMode)\n\nGenerate default phytoplankton parameter values based on AbstractMode and species number N.\n\n\n\n\n\n","category":"method"},{"location":"library/#PlanktonIndividuals.Parameters.phyt_params_default-Tuple{Int64, QuotaMode}","page":"Library","title":"PlanktonIndividuals.Parameters.phyt_params_default","text":"phyt_params_default(N::Int64, mode::AbstractMode)\n\nGenerate default phytoplankton parameter values based on AbstractMode and species number N.\n\n\n\n\n\n","category":"method"},{"location":"library/#PlanktonIndividuals.Parameters.update_abiotic_params-Tuple{Dict, DataType}","page":"Library","title":"PlanktonIndividuals.Parameters.update_abiotic_params","text":"update_abiotic_params(tmp::Dict, FT::DataType; N::Int64)\n\nUpdate parameter values based on a Dict provided by user Keyword Arguments =================\n\ntmp is a Dict containing the parameters needed to be upadated\nFT: Floating point data type. Default: Float32.\nN is a Int64 indicating the number of species\n\n\n\n\n\n","category":"method"},{"location":"library/#PlanktonIndividuals.Parameters.update_bgc_params-Tuple{Dict, DataType}","page":"Library","title":"PlanktonIndividuals.Parameters.update_bgc_params","text":"update_bgc_params(tmp::Ditc, FT::DataType)\n\nUpdate parameter values based on a Dict provided by user\n\nKeyword Arguments\n\ntmp: a Dict containing the parameters needed to be upadated\nFT: Floating point data type. Default: Float32.\n\n\n\n\n\n","category":"method"},{"location":"library/#PlanktonIndividuals.Parameters.update_phyt_params-Tuple{Dict, DataType}","page":"Library","title":"PlanktonIndividuals.Parameters.update_phyt_params","text":"update_phyt_params(tmp::Dict, FT::DataType; N::Int64, mode::AbstractMode)\n\nUpdate parameter values based on a Dict provided by user Keyword Arguments =================\n\ntmp is a Dict containing the parameters needed to be upadated\nFT: Floating point data type. Default: Float32.\nN is a Int64 indicating the number of species\nmode is the mode of phytoplankton physiology resolved in the model\n\n\n\n\n\n","category":"method"},{"location":"library/#Diagnostics","page":"Library","title":"Diagnostics","text":"","category":"section"},{"location":"library/#PlanktonIndividuals.Diagnostics.PlanktonDiagnostics-Tuple{Any}","page":"Library","title":"PlanktonIndividuals.Diagnostics.PlanktonDiagnostics","text":"PlanktonDiagnostics(model; tracer=(:PAR, :NH4, :NO3, :DOC),\n                           phytoplankton = (:num, :graz, :mort, :dvid, :ptc),\n                           abiotic_particle = (:num),\n                           time_interval = 1)\n\nGenerate a PlanktonDiagnostics structure.\n\nKeyword Arguments (Optional)\n\ntracer : a Tuple containing the names of nutrient fields to be diagnosed.\nphytoplankton : a Tuple containing the names of physiological processes of phytoplankton individuals to be diagnosed.\nabiotic_particle : a Tuple containing the names of state variables of abiotic particles to be diagnosed.\niteration_interval : The number of timesteps that diagnostics is averaged, 1 iteration by default.\n\n\n\n\n\n","category":"method"},{"location":"library/#Model","page":"Library","title":"Model","text":"","category":"section"},{"location":"library/#PlanktonIndividuals.CarbonMode","page":"Library","title":"PlanktonIndividuals.CarbonMode","text":"CarbonMode <: AbstractMode\n\nType for the phytoplankton physiology mode which only resolves carbon quota.\n\n\n\n\n\n","category":"type"},{"location":"library/#PlanktonIndividuals.IronEnergyMode","page":"Library","title":"PlanktonIndividuals.IronEnergyMode","text":"IronEnergyMode <: AbstractMode\n\nType for the phytoplankton physiology mode which resolves carbon, nitrogen, phosphorus, and iron quotas. This mode also resolves energy.\n\n\n\n\n\n","category":"type"},{"location":"library/#PlanktonIndividuals.MacroMolecularMode","page":"Library","title":"PlanktonIndividuals.MacroMolecularMode","text":"MacroMolecularMode <: AbstractMode\n\nType for the phytoplankton physiology mode which resolves marco-molecules.\n\n\n\n\n\n","category":"type"},{"location":"library/#PlanktonIndividuals.QuotaMode","page":"Library","title":"PlanktonIndividuals.QuotaMode","text":"QuotaMode <: AbstractMode\n\nType for the phytoplankton physiology mode which resolves carbon, nitrogen, and phosphorus quotas.\n\n\n\n\n\n","category":"type"},{"location":"library/#PlanktonIndividuals.Model.PlanktonModel-Tuple{Architecture, PlanktonIndividuals.Grids.AbstractGrid}","page":"Library","title":"PlanktonIndividuals.Model.PlanktonModel","text":"PlanktonModel(arch::Architecture, grid::AbstractGrid;\n              FT = Float32,\n              mode = QuotaMode(),\n              max_individuals::Int = 8*1024,\n              bgc_params = nothing, \n              tracer_initial = default_tracer_init(),\n              phyto = nothing,\n              abiotic = nothing,\n              t::AbstractFloat = 0.0f0,\n              )\n\nGenerate a PlanktonModel data structure. \n\nKeyword Arguments (Required)\n\narch : CPU() or GPU(). Computer architecture being used to run the model.\ngrid : a AbstractGrid structure. Discrete grid for the model (resolution and geometry).\n\nKeyword Arguments (Optional)\n\nFT: Floating point data type. Default: Float32.\nmode : Phytoplankton physiology mode, choose among CarbonMode(), QuotaMode(), or MacroMolecularMode().\nmax_individuals : Maximum number of individuals for each species the model can hold,                   usually take the maximum of all the species and apply a factor to account for the growth                   of individuals during one simulation.\nbgc_params : Parameter set for biogeochemical processes modeled in the model, use default if nothing,                    use Dict to update parameters, the format and names of parameters can be found by running bgc_params_default().\ntracer_initial : The source of initial conditions of tracer fields, should be either a NamedTuple                    or a Dict containing the file paths pointing to the files of nutrient initial conditions.\nphyto : nothing or a phyto_setup. Whether to use default setup of phytoplankton in the model. If yes,                   it should be a NamedTuple like this phyto = phyto_setup(params = nothing, N = [2^10, 2^10], Nsp = 2).\nabiotic : nothing or a abiotic_setup. Whether to include abiotic particles in the model. If yes,                   it should be a NamedTuple like this abiotic = abiotic_setup(params = nothing, N = [2^10, 2^10], Nsa = 2, palat = [(:sp1, :sa1)]).\nt : Model time, start from 0 by default, in second.\n\n\n\n\n\n","category":"method"},{"location":"library/#Simulation","page":"Library","title":"Simulation","text":"","category":"section"},{"location":"library/#PlanktonIndividuals.Simulation.PlanktonSimulation-Tuple{PlanktonModel}","page":"Library","title":"PlanktonIndividuals.Simulation.PlanktonSimulation","text":"PlanktonSimulation(model; ΔT, iterations,\n                   PARF = default_PARF(model.grid),\n                   temp = default_temperature(model.grid),\n                   diags = nothing,\n                   vels = (;),\n                   ΔT_vel = ΔT,\n                   ΔT_PAR::AbstractFloat = 3600.0f0,\n                   ΔT_temp::AbstractFloat = 3600.0f0,\n                   output_writer = nothing,\n                   )\n\nGenerate a PlanktonSimulation data structure.\n\nKeyword Arguments (Required)\n\nΔT : time step in second.\niterations : run the simulation for this number of iterations.\n\nKeyword Arguments (Optional)\n\nPARF : External forcings of surface PAR. Hourly PAR of a single day is provided by default.\ntemp : External forcings of temperature. Hourly data of a single day is provided by default.\ndiags : Diagnostics of the simulation generated by PlanktonDiagnostics.\nvels : The velocity fields for tracer fields and individuals. nothing means no velocities                    will be applied in the simulation. Otherwise, vels mush be a NamedTuple containing                    all u, v, and w. Each of u, v, and w must be an 4D-Array of                     (Nx, Ny, Nz, nΔT) elements, excluding halo points. N+1 is required for bounded direction.\nΔT_vel : time step of velocities provided externally (in seconds).\nΔT_PAR : time step of surface PAR provided externally (in seconds).\nΔT_temp : time step of temperature provided externally (in seconds).\noutput_writer : Output writer of the simulation generated by PlanktonOutputWriter.\n\n\n\n\n\n","category":"method"},{"location":"library/#PlanktonIndividuals.Simulation.update!-Tuple{PlanktonSimulation}","page":"Library","title":"PlanktonIndividuals.Simulation.update!","text":"update!(sim::PlanktonSimulation; time_offset = (vels = true, PAFR = true, temp = true))\n\nUpdate the PlanktonSimulation for sim.iterations time steps. time_offset is used when velocities (or PARF or temperature) starts from timestep 1, but model.t is not. It is usually used when velocity fields are too large and need to be broken down into several parts. Only one part of the whole velocity fields can be constructed into a PlanktonSimulation, so in this PlanktonSimulation model.iteration might no be 1, but the velocity fields need to start from 1 (same for PARF or temperature fields).\n\n\n\n\n\n","category":"method"},{"location":"library/#PlanktonIndividuals.Simulation.vel_copy!-Union{Tuple{TZ}, Tuple{TY}, Tuple{TX}, Tuple{FT}, Tuple{NamedTuple, Any, Any, Any, PlanktonIndividuals.Grids.AbstractGrid{FT, TX, TY, TZ}}} where {FT, TX, TY, TZ}","page":"Library","title":"PlanktonIndividuals.Simulation.vel_copy!","text":"vel_copy!(vel::NamedTuple, u, v, w, g::AbstractGrid{FT, TX, TY, TZ}) where {FT, TX, TY, TZ}\n\nCopy external velocities into PlanktonModel\n\n\n\n\n\n","category":"method"},{"location":"library/#Output","page":"Library","title":"Output","text":"","category":"section"},{"location":"library/#PlanktonIndividuals.Output.PlanktonOutputWriter-Tuple{}","page":"Library","title":"PlanktonIndividuals.Output.PlanktonOutputWriter","text":"PlanktonOutputWriter(;dir = \"./results\",\n                           diags_prefix = \"diags\",\n                           phytoplankton_prefix = \"phytoplankton\",\n                           abiotic_particle_prefix = \"abiotic_particle\",\n                           write_log = false,\n                           save_diags = false,\n                           save_phytoplankton = false,\n                           save_abiotic_particle = false,\n                           phytoplankton_include = (:x, :y, :z),\n                           abiotic_particle_include = (:x, :y, :z),\n                           phytoplankton_iteration_interval = 1,\n                           abiotic_particle_iteration_interval = 1,\n                           max_filesize = Inf,\n                           )\n\nGenerate a PlanktonOutputWriter structure which includes settings for model outputs\n\nKeyword Arguments (Optional)\n\ndir: The directory to store model outputs, \"./results\" by default\ndiags_prefix: Descriptive filename prefixed to diagnostic output files.\nphytoplankton_prefix: Descriptive filename prefixed to phytoplankton output files.\nwrite_log: write model logs which contain global averages of simulated phytoplankton, default: false.\nsave_diags: write diagnostics to disk, default: false.\nsave_phytoplankton: write phytoplankton to disk, default: false.\nphytoplankton_include: list of phytoplankton properties to save, default: (:x, :y, :z, :Sz).\nphytoplankton_iteration_interval: The time interval that phytoplankton are saved, 1 timestep by default.\nsave_abiotic_particle: write abiotic_particle to disk, default: false.\nabiotic_particle_include: list of abiotic_particle properties to save, default: (:x, :y, :z, :Sz).\nabiotic_particle_iteration_interval: The time interval that abiotic_particle are saved, 1 timestep by default.\nmax_filesize: The writer will stop writing to the output file once the file size exceeds max_filesize,                   and write to a new one with a consistent naming scheme ending in part1, part2, etc.                   default: Inf.\n\n\n\n\n\n","category":"method"},{"location":"model_run/#Model-Simulation","page":"Model Simulation","title":"Model Simulation","text":"","category":"section"},{"location":"model_run/","page":"Model Simulation","title":"Model Simulation","text":"A PlanktonSimulation includes a PlanktonModel and its time step ΔT and number of time steps nΔT. It will time step the PlanktonModel by calling update!.","category":"page"},{"location":"model_run/#PlanktonIndividuals.Simulation.PlanktonSimulation","page":"Model Simulation","title":"PlanktonIndividuals.Simulation.PlanktonSimulation","text":"PlanktonSimulation(model; ΔT, iterations,\n                   PARF = default_PARF(model.grid),\n                   temp = default_temperature(model.grid),\n                   diags = nothing,\n                   vels = (;),\n                   ΔT_vel = ΔT,\n                   ΔT_PAR::AbstractFloat = 3600.0f0,\n                   ΔT_temp::AbstractFloat = 3600.0f0,\n                   output_writer = nothing,\n                   )\n\nGenerate a PlanktonSimulation data structure.\n\nKeyword Arguments (Required)\n\nΔT : time step in second.\niterations : run the simulation for this number of iterations.\n\nKeyword Arguments (Optional)\n\nPARF : External forcings of surface PAR. Hourly PAR of a single day is provided by default.\ntemp : External forcings of temperature. Hourly data of a single day is provided by default.\ndiags : Diagnostics of the simulation generated by PlanktonDiagnostics.\nvels : The velocity fields for tracer fields and individuals. nothing means no velocities                    will be applied in the simulation. Otherwise, vels mush be a NamedTuple containing                    all u, v, and w. Each of u, v, and w must be an 4D-Array of                     (Nx, Ny, Nz, nΔT) elements, excluding halo points. N+1 is required for bounded direction.\nΔT_vel : time step of velocities provided externally (in seconds).\nΔT_PAR : time step of surface PAR provided externally (in seconds).\nΔT_temp : time step of temperature provided externally (in seconds).\noutput_writer : Output writer of the simulation generated by PlanktonOutputWriter.\n\n\n\n\n\n","category":"type"},{"location":"model_run/#Model-Diagnostics","page":"Model Simulation","title":"Model Diagnostics","text":"","category":"section"},{"location":"model_run/#PlanktonIndividuals.Diagnostics.PlanktonDiagnostics","page":"Model Simulation","title":"PlanktonIndividuals.Diagnostics.PlanktonDiagnostics","text":"PlanktonDiagnostics(model; tracer=(:PAR, :NH4, :NO3, :DOC),\n                           phytoplankton = (:num, :graz, :mort, :dvid, :ptc),\n                           abiotic_particle = (:num),\n                           time_interval = 1)\n\nGenerate a PlanktonDiagnostics structure.\n\nKeyword Arguments (Optional)\n\ntracer : a Tuple containing the names of nutrient fields to be diagnosed.\nphytoplankton : a Tuple containing the names of physiological processes of phytoplankton individuals to be diagnosed.\nabiotic_particle : a Tuple containing the names of state variables of abiotic particles to be diagnosed.\niteration_interval : The number of timesteps that diagnostics is averaged, 1 iteration by default.\n\n\n\n\n\n","category":"type"},{"location":"model_run/","page":"Model Simulation","title":"Model Simulation","text":"Model diagnostics are specified by tracer (for tracers) and plankton (for individuals). Diagnostics for individuals are aggregated into gridded fields.","category":"page"},{"location":"model_run/","page":"Model Simulation","title":"Model Simulation","text":"A full list of available diagnostics is provided below:","category":"page"},{"location":"model_run/","page":"Model Simulation","title":"Model Simulation","text":"tracer = (:PAR, # photosynthetically active radiation\n          :DIC, # dissolved inorganic carbon\n          :NH4, # ammonia\n          :NO3, # nitrate\n          :PO4, # phosphate\n          :DOC, # dissolved organic carbon\n          :DON, # dissolved organic nitrogen\n          :DOP, # dissolved organic phosphorus\n          :POC, # particulate organic carbon\n          :PON, # particulate organic nitrogen\n          :POP  # particulate organic phosphorus\n         )\n\nplankton = (:num,  # number of individuals\n            :graz, # number of grazed individuals\n            :mort, # number of died individuals\n            :dvid, # number of divided individuals\n            :PS,   # photosynthesis rate\n            :BS,   # biosynthesis rate\n            :VDOC, # DOC uptake rate\n            :VHN4, # NH4 uptake rate\n            :VNO3, # NO3 uptake rate\n            :VPO4, # PO4 uptake rate\n            :resp, # respiration rate\n            :exu,  # exudation rate\n            :Bm,   # functional biomass\n            :Cq,   # Carbon pool\n            :Nq,   # Nitrogen pool\n            :Pq,   # Phosphorus pool\n            :Chl   # Chla\n           )","category":"page"},{"location":"model_run/#Output-Writer","page":"Model Simulation","title":"Output Writer","text":"","category":"section"},{"location":"model_run/#PlanktonIndividuals.Output.PlanktonOutputWriter","page":"Model Simulation","title":"PlanktonIndividuals.Output.PlanktonOutputWriter","text":"PlanktonOutputWriter(;dir = \"./results\",\n                           diags_prefix = \"diags\",\n                           phytoplankton_prefix = \"phytoplankton\",\n                           abiotic_particle_prefix = \"abiotic_particle\",\n                           write_log = false,\n                           save_diags = false,\n                           save_phytoplankton = false,\n                           save_abiotic_particle = false,\n                           phytoplankton_include = (:x, :y, :z),\n                           abiotic_particle_include = (:x, :y, :z),\n                           phytoplankton_iteration_interval = 1,\n                           abiotic_particle_iteration_interval = 1,\n                           max_filesize = Inf,\n                           )\n\nGenerate a PlanktonOutputWriter structure which includes settings for model outputs\n\nKeyword Arguments (Optional)\n\ndir: The directory to store model outputs, \"./results\" by default\ndiags_prefix: Descriptive filename prefixed to diagnostic output files.\nphytoplankton_prefix: Descriptive filename prefixed to phytoplankton output files.\nwrite_log: write model logs which contain global averages of simulated phytoplankton, default: false.\nsave_diags: write diagnostics to disk, default: false.\nsave_phytoplankton: write phytoplankton to disk, default: false.\nphytoplankton_include: list of phytoplankton properties to save, default: (:x, :y, :z, :Sz).\nphytoplankton_iteration_interval: The time interval that phytoplankton are saved, 1 timestep by default.\nsave_abiotic_particle: write abiotic_particle to disk, default: false.\nabiotic_particle_include: list of abiotic_particle properties to save, default: (:x, :y, :z, :Sz).\nabiotic_particle_iteration_interval: The time interval that abiotic_particle are saved, 1 timestep by default.\nmax_filesize: The writer will stop writing to the output file once the file size exceeds max_filesize,                   and write to a new one with a consistent naming scheme ending in part1, part2, etc.                   default: Inf.\n\n\n\n\n\n","category":"type"},{"location":"model_run/","page":"Model Simulation","title":"Model Simulation","text":"The model currently has two types of outputs which are both saved in JLD2 files.","category":"page"},{"location":"model_run/","page":"Model Simulation","title":"Model Simulation","text":"First, the state of all individuals at each time step of a PlanktonSimulation gets saved in a file named plankton_prefix*\".jld2\", default: plankton.jld2.","category":"page"},{"location":"model_run/","page":"Model Simulation","title":"Model Simulation","text":"Second, for diagnostics, individuals at each time step will be aggregated into tracer fields. The keyword argument time_interval in PlanktonDiagnostics specifies the time window that the diagnostics are averaged. Only diagnostics specified by tracer and plankton in PlanktonDiagnostics will be saved. All the diagnostics of a PlanktonSimulation will be saved in a file named diags_prefix*\".jld2\", default: diags.jld2.","category":"page"},{"location":"gpu_support/#GPU-Support","page":"GPU Support","title":"GPU Support","text":"","category":"section"},{"location":"gpu_support/","page":"GPU Support","title":"GPU Support","text":"PlanktonIndividuals.jl has support from CUDA.jl and KernelAbstractions.jl to be able to run on graphical processing unit (GPU) for higher performance. Depending on the combination of CPU and GPU you have, a speedup of 35x is possible. Please see Benchmarks for more details.","category":"page"},{"location":"gpu_support/#How-to-use-a-GPU","page":"GPU Support","title":"How to use a GPU","text":"","category":"section"},{"location":"gpu_support/","page":"GPU Support","title":"GPU Support","text":"To use a GPU to run PlanktonIndividuals.jl is easy. Users do not need to rewrite the setup or simulation script to change the architecture to run on. See Architecture for detailed instructions on setting up a model on GPU.","category":"page"},{"location":"gpu_support/","page":"GPU Support","title":"GPU Support","text":"tip: Running on GPUs\nIf you are having issues with running PlanktonIndividuals on a GPU, please open an issue","category":"page"},{"location":"gpu_support/#When-to-use-a-GPU","page":"GPU Support","title":"When to use a GPU","text":"","category":"section"},{"location":"gpu_support/","page":"GPU Support","title":"GPU Support","text":"GPU is very useful when running large simulations (either large domain or huge number of individuals, or both). If you simulate over 10,000 individuals, you will probably benefit form GPU. Please note, GPU is usually memory-limited, that is to say, you will probably fill up the memory on GPU long before the model slows down.","category":"page"},{"location":"gpu_support/","page":"GPU Support","title":"GPU Support","text":"Individuals take up a large amount of GPU memory due to complicated physiological processes and diagnostics. Typically, one should not try more than 50,000 individuals for a 12GB GPU.","category":"page"},{"location":"gpu_support/#GPU-resources","page":"GPU Support","title":"GPU resources","text":"","category":"section"},{"location":"gpu_support/","page":"GPU Support","title":"GPU Support","text":"There are a few resources you can try to acquire a GPU from.","category":"page"},{"location":"gpu_support/","page":"GPU Support","title":"GPU Support","text":"Google Colab provides GPUs but you need to install Julia manually. Please see this post on the Julia Discourse for detailed instructions.\nCode Ocean also has GPU support. You can use \"Ubuntu Linux with GPU support (18.04.3)\" but you still have to install Julia manually.","category":"page"},{"location":"phyto_equations/#Phytoplankton-Physiology","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"","category":"section"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"The various resources and processes are summarized in the schematic below, and further detail is provided in the following sub-sections.","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"(Image: skematic)","category":"page"},{"location":"phyto_equations/#State-Variables","page":"Phytoplankton Physiology","title":"State Variables","text":"","category":"section"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"Each phytoplankton individual is characterized using eight state variables (see table below).","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"Symbol Unit Description\nBm mmolCcell functional biomass pool in C\nCq mmolCcell C reserve\nNq mmolNcell N reserve\nPq mmolPcell P reserve\nchl mgChlcell Chla pool\nSz unitless relative cell size\ngen unitless generation\nage hour age of the individual","category":"page"},{"location":"phyto_equations/#Photosynthesis","page":"Phytoplankton Physiology","title":"Photosynthesis","text":"","category":"section"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"The parameterization for photosynthesis is formulated as","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"PS=PC cdot Bm","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"PC=PC_maxcdot (1-e^frac-alphaPhi cdot Icdot ChlPC_maxcdot Bm)","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"PC_max= PCmax cdot Sz^PC_b","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"where PS is cell-specific light limited photosynthesis rate (mmolCcell^-1s^-1). PC is carbon-specific light limited photosynthesis rate (mmolC(mmolC)^-1s^-1). PC_max is light-saturated photosynthesis rate (mmolC(mmolC)^-1s^-1) and is scaled by a power-law relationship of cell size (Sz), I is the flux of photosynthetically active radiation (PAR, mu molphotonsm^-2s^-1).","category":"page"},{"location":"phyto_equations/#Nutrient-Uptake","page":"Phytoplankton Physiology","title":"Nutrient Uptake","text":"","category":"section"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"Nutrient uptake rates (VNH4, VNO3, and VPO4) are cell-specific (mmolNcell^-1s^-1 or mmolPcell^-1s^-1) and include intracellular nutrient limitation (Droop limitation):","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"beginalign\nVNH4 = VNH4_cellcdot regQ_NcdotfracNH4NH4+K_NH4^sat nonumber \nVNO3 = VNO3_cellcdot regQ_NcdotfracNO3NO3+K_NO3^sat nonumber \nVPO4 = VPO4_cellcdot regQ_PcdotfracPO4PO4+K_PO4^sat nonumber\nendalign","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"beginalign\nregQ_N = biggfracNqmax-Q_NNqmax - Nqminbigg_0^1 nonumber \nregQ_P = biggfracPqmax-Q_PPqmax - Pqminbigg_0^1 nonumber\nendalign","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"beginalign\nQ_N = (Nq + Bm cdot R_NC)  (Cq + Bm) nonumber \nQ_P = (Pq + Bm cdot R_PC)  (Cq + Bm) nonumber\nendalign","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"beginalign\nVNH4_cell = VNH4max cdot Sz^VN_b cdot Bm nonumber \nVNO3_cell = VNO3max cdot Sz^VN_b cdot Bm nonumber \nVPO4_cell = VPO4max cdot Sz^VP_b cdot Bm nonumber\nendalign","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"where VNH4max, VNO3max, and VPO4max are constant parameters (see Parameters) while VNH4_cell, VNO3_cell, and VPO4_cell are cell-specific maximum uptake rates (mmolNcell^-1s^-1 or mmolPcell^-1s^-1) depending on cell size, Sz.","category":"page"},{"location":"phyto_equations/#Reserve-Update","page":"Phytoplankton Physiology","title":"Reserve Update","text":"","category":"section"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"The model first updates C, N, and P reserves based on photosynthesis rate (PS) and nutrient uptake rates (VNH4, VNO3, and VPO4) as formulated above. The result is then used to calculate the biosynthesis and excretion rates.","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"beginalign\nCq = Cq+PS cdot Delta T nonumber \nNq = Nq+(VNO3+VNH4) cdot Delta T nonumber \nPq = Pq+VPO4 cdot Delta T nonumber\nendalign","category":"page"},{"location":"phyto_equations/#Biosynthesis-And-Excretion-Rates","page":"Phytoplankton Physiology","title":"Biosynthesis And Excretion Rates","text":"","category":"section"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"Potential biosynthesis rates are calculated based on C, N, P quotas as","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"beginalign\nBS_C = Cq cdot k_mtb nonumber \nBS_N = NqR_NC cdot k_mtb nonumber \nBS_P = PqR_PC cdot k_mtb nonumber\nendalign","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"k_mtb= kmtb_max cdot Sz^kmtb_b","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"The minimum of these rates gives the actual biosynthesis rate, BS (mmolCcell^-1s^-1), and the difference between carbon-based biosynthesis rate and BS gives the excretion rate, ExuC (mmolCcell^-1s^-1).","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"BS = min(BS_C BS_N BS_P)","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"ExuC = BS_C - BS","category":"page"},{"location":"phyto_equations/#Chlorophyll-Synthesis","page":"Phytoplankton Physiology","title":"Chlorophyll Synthesis","text":"","category":"section"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"S_chl = rho_chl * BS * R_NC","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"beginequation\nrho_chl =\n    begincases\n        chlN * fracPC*Bmalpha I cdot chl  quad alpha I  0\n        0  quad else\n    endcases nonumber\nendequation","category":"page"},{"location":"phyto_equations/#Respiration","page":"Phytoplankton Physiology","title":"Respiration","text":"","category":"section"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"Respir = respir_a cdot Sz^respir_b cdot Bm","category":"page"},{"location":"phyto_equations/#Biomass-Update","page":"Phytoplankton Physiology","title":"Biomass Update","text":"","category":"section"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"Biosynthesis yields a biomass increase, a commensurate reduction in nutrient reserves, and an increase in chlorophyll. The carbon reserve is further modified by respiration.","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"beginalign\nBm  = Bm + BS cdot Delta T nonumber \nCq  = Cq - (BS - Respir) cdot Delta T nonumber \nNq  = Nq - BS*R_NC cdot Delta T nonumber \nPq  = Pq - BS*R_PC cdot Delta T nonumber \nchl = chl + S_chl cdot Delta T nonumber\nendalign","category":"page"},{"location":"phyto_equations/#Cell-division","page":"Phytoplankton Physiology","title":"Cell division","text":"","category":"section"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"Relative cell size, Sz, is used to indicate cell division. Cells will not divide if Sz20 and the probability of individual cell division (P_D) is then given by a sigmoidal function of Sz with different cell division strategies.","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"Sz = (Bm + Cq)  Cquota","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"P_D = rand(Bernoulli(P_dvid*S_dvid))","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"where S_dvid represents the sigmoidal function in different cell division strategies (listed below) and P_D is computed every 10 min (when model time step is smaller than 10 min) or every time step (when model time step is larger than 10 min).","category":"page"},{"location":"phyto_equations/#Sizer","page":"Phytoplankton Physiology","title":"Sizer","text":"","category":"section"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"The probability of cell division is a function of cell size and increases as the cell size gets larger.","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"S_dvid = tanh(stp_D * (Sz - reg_D)) + 10","category":"page"},{"location":"phyto_equations/#Adder","page":"Phytoplankton Physiology","title":"Adder","text":"","category":"section"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"The probability of cell division is a function of the difference between current cell size and initial cell size (iSz) and increases as the difference gets larger.","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"S_dvid = tanh(stp_D * (Sz - iSz - reg_D)) + 10","category":"page"},{"location":"phyto_equations/#Timer","page":"Phytoplankton Physiology","title":"Timer","text":"","category":"section"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"The probability of cell division is a function of clock time and increases in the dark.","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"S_dvid = tanh(stp_D * (t - reg_D)) + 10","category":"page"},{"location":"phyto_equations/#SizerTimer","page":"Phytoplankton Physiology","title":"Sizer+Timer","text":"","category":"section"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"The probability of cell division is a multiplication of a function of clock time and a function of cell size.","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"S_dvid = (tanh(stp1_D * (Sz - reg1_D)) + 10) * (tanh(stp2_D * (t - reg2_D)) + 10)","category":"page"},{"location":"phyto_equations/#AdderTimer","page":"Phytoplankton Physiology","title":"Adder+Timer","text":"","category":"section"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"The probability of cell division is a multiplication of a function of clock time and a function of the difference of current cell size and initial cell size.","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"S_dvid = (tanh(stp1_D * (Sz - iSz - reg1_D)) + 10) * (tanh(stp2_D * (t - reg2_D)) + 10)","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"tip: Parameters of cell division\nstp1_D, reg1_D, stp2_D, and reg2_D may be different for different cell division strategies.","category":"page"},{"location":"phyto_equations/#Grazing","page":"Phytoplankton Physiology","title":"Grazing","text":"","category":"section"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"For now, the model does not have individuals of grazers. Instead, a quadratic grazing term is parameterized and implemented in the model to represent the grazing loss of cells. For each individual, the probability to be grazed (P_G) is calculated as below.","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"P_G =  P_graz * pop","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"where pop is the number of individuals in the grid cell where the individual stays.","category":"page"},{"location":"phyto_equations/#Parameters","page":"Phytoplankton Physiology","title":"Parameters","text":"","category":"section"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"Symbol Param Default Unit Description\nCquota Cquota 1.8e-11 mmolCcell^-1 carbon quota when Sz = 10\nPCmax PCmax 4.2e-5 s^-1 Maximum photosynthesis rate\nalpha alpha 2.0e-2 m^2mgChl^-1 Irradiance absorption coeff\nPhi Phi 4.0e-5 mmolC  mu molphotons Maximum quantum yield\nVNH4max VNH4max 6.9e-6 s^-1 Maximum ammonium uptake rate\nVNO3max VNO3max 6.9e-6 s^-1 Maximum nitrate uptake rate\nVPO4max VPO4max 1.2e-6 s^-1 Maximum phosphate uptake rate\nPC_b PC_b 0.6  Shape parameter for PC\nVN_b VN_b 0.6  Shape parameter for VNH4 and VNO3\nVP_b VP_b 0.6  Shape parameter for VPO4\nK^sat_NH4 ksatNH4 0.005 mmolNm^3 Half-saturation constant for NH4\nK^sat_NO3 ksatNO3 0.010 mmolNm^3 Half-saturation constant for NO3\nK^sat_PO4 ksatPO4 0.003 mmolPm^3 Half-saturation constant for PO4\nNqmax Nqmax 0.12 mmolNmmolC Maximum N quota in cell\nNqmin Nqmin 0.05 mmolNmmolC Minimum N quota in cell\nPqmax Pqmax 0.01 mmolPmmolC Maximum P quota in cell\nPqmin Pqmax 0.004 mmolPmmolC Minimum P quota in cell\nR_NC R_NC 16/106 mmolNmmolC N:C ratio in function biomass\nR_PC R_PC 1/106 mmolPmmolC P:C ratio in function biomass\nkmtb_max k_mtb 3.5e-5 s^-1 Maximum metabolic rate\nkmtb_b k_mtb_b 0.25  Shape parameter for k_mtb\nrespir_a respir_a 1.2e-6 s^-1 Maximum respiration rate\nrespir_b respir_b 0.6  Shape parameter for respir_a\nchltextN Chl2N 3.0 mgchlmmolN Maximum Chl:N in cell\nP_dvid P_dvid 5.0e-5 s^-1 Probability of division per second\nstp1_D dvid_stp 6.0  Steepness of division function\nreg1_D dvid_reg 1.9  Regulation of division function\nstp2_D dvid_stp2 2.0  Steepness of division function\nreg2_D dvid_reg2 12.0  Regulation of division function\nP_graz P_graz 0.0 s^-1 Probability of grazing per second","category":"page"},{"location":"examples/#examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Lab Experiment ➭ download / url\nOcean Transect ➭ download / url\nTwo-Dimensional Map ➭ download / url\nThree-Dimensional Domain ➭ download / url\nTwo-Dimensional Global Ocean Example ➭ download / url\nThree-Dimensional Global Ocean Example ➭ download / url","category":"page"},{"location":"examples/#examples-running","page":"Examples","title":"Running The Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Any example found in the online documentation is most easily run using Pluto.jl. Just copy the corresponding download / url link (see above) and paste into the Pluto.jl interface.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The notebooks can also be run the command line (e.g., julia -e 'include(\"defaults.jl\"). In that case, unlike with Pluto.jl, user needs to Pkg.add packages separately.","category":"page"},{"location":"model_description/#model-description","page":"Model Description","title":"Model Description","text":"","category":"section"},{"location":"model_description/","page":"Model Description","title":"Model Description","text":"Pages = [\n    \"phyto_equations.md\",\n    \"bgc_equations.md\",\n]\nDepth = 2","category":"page"},{"location":"bgc_equations/#Biogeochemistry","page":"Biogeochemistry","title":"Biogeochemistry","text":"","category":"section"},{"location":"bgc_equations/","page":"Biogeochemistry","title":"Biogeochemistry","text":"All Eulerian tracers are advected, diffused, and affected by sources and sinks:","category":"page"},{"location":"bgc_equations/","page":"Biogeochemistry","title":"Biogeochemistry","text":"fracpartial Xpartial t = - nabla cdot (boldsymboluX) + nabla cdot (boldsymbolKnabla X) + S_X","category":"page"},{"location":"bgc_equations/","page":"Biogeochemistry","title":"Biogeochemistry","text":"where boldsymbolu=(uvw) is the velocity field provided by a physical model (see Model Simulation), boldsymbolK is the mixing tensor also from the physical model, and S_X is the source and sink term for tracer X. ","category":"page"},{"location":"bgc_equations/","page":"Biogeochemistry","title":"Biogeochemistry","text":"The source and sinks term, S_X, can be different for each tracer and include biological transformations, chemical reactions, and external sources and sinks as detailed below.","category":"page"},{"location":"bgc_equations/","page":"Biogeochemistry","title":"Biogeochemistry","text":"The advection scheme used is Third Order Direct Space-Time with Flux Limiting.","category":"page"},{"location":"bgc_equations/#Carbon-Cycle","page":"Biogeochemistry","title":"Carbon Cycle","text":"","category":"section"},{"location":"bgc_equations/","page":"Biogeochemistry","title":"Biogeochemistry","text":"S_DIC = -sum_j PS_jcdot n_j + k_DOCcdot DOC + F_C","category":"page"},{"location":"bgc_equations/","page":"Biogeochemistry","title":"Biogeochemistry","text":"beginalign\nS_DOC  = k_POC cdot POC + f_Cm cdot sum_j ((Bm_j+Cq_j)cdot n_jm) nonumber\n         quad \n        + f_Cg cdot sum_j ((Bm_j+Cq_j)cdot n_jg) - k_DOC cdot DOC nonumber\nendalign","category":"page"},{"location":"bgc_equations/","page":"Biogeochemistry","title":"Biogeochemistry","text":"beginalign\nS_POC  = (1-f_Cm) cdot sum_j ((Bm_j+Cq_j)cdot n_jm) nonumber\n         quad\n        + (1-f_Cg) cdot sum_j ((Bm_j+Cq_j)cdot n_jg) - k_POC cdot POC nonumber\nendalign","category":"page"},{"location":"bgc_equations/","page":"Biogeochemistry","title":"Biogeochemistry","text":"where n_j is the cell number of species j, n_jm is the dead cell number of species j, n_jg is the grazed cell number of species j.","category":"page"},{"location":"bgc_equations/#Nitrogen-Cycle","page":"Biogeochemistry","title":"Nitrogen Cycle","text":"","category":"section"},{"location":"bgc_equations/","page":"Biogeochemistry","title":"Biogeochemistry","text":"beginalign\nS_HN4 = -sum_j VNH4_jcdot n_j + k_DONcdot DON - k_nitcdot NH4 nonumber\nS_NO3 = -sum_j VNO3_jcdot n_j + k_nitcdot NH4 nonumber\nendalign","category":"page"},{"location":"bgc_equations/","page":"Biogeochemistry","title":"Biogeochemistry","text":"beginalign\nS_DON  = k_PON cdot PON + f_Nm cdot sum_j ((Bm_j*R_NC+Nq_j)cdot n_jm) nonumber\n         quad\n        + f_Ng cdot sum_j ((Bm_j*R_NC+Nq_j)cdot n_jg) - k_DON cdot DON nonumber\nendalign","category":"page"},{"location":"bgc_equations/","page":"Biogeochemistry","title":"Biogeochemistry","text":"beginalign\nS_PON  = (1-f_Nm) cdot sum_j ((Bm_j*R_NC+Nq_j)cdot n_jm) nonumber\n         quad\n        + (1-f_Ng) cdot sum_j ((Bm_j*R_NC+Nq_j)cdot n_jg) - k_PON cdot PON nonumber\nendalign","category":"page"},{"location":"bgc_equations/#Phosphorus-Cycle","page":"Biogeochemistry","title":"Phosphorus Cycle","text":"","category":"section"},{"location":"bgc_equations/","page":"Biogeochemistry","title":"Biogeochemistry","text":"S_PO4 = -sum_j VPO4_jcdot n_j + k_DOPcdot DOP","category":"page"},{"location":"bgc_equations/","page":"Biogeochemistry","title":"Biogeochemistry","text":"beginalign\nS_DOP  = k_POP cdot POP + f_Pm cdot sum_j ((Bm_j*R_PC+Pq_j)cdot n_jm) nonumber \n         quad\n        + f_Pg cdot sum_j ((Bm_j*R_PC+Nq_j)cdot n_jg) - k_DOP cdot DOP nonumber\nendalign","category":"page"},{"location":"bgc_equations/","page":"Biogeochemistry","title":"Biogeochemistry","text":"beginalign\nS_POP  = (1-f_Pm) cdot sum_j ((Bm_j*R_PC+Pq_j)cdot n_jm) nonumber\n         quad\n        + (1-f_Pg) cdot sum_j ((Bm_j*R_PC+Pq_j)cdot n_jg) - k_POP cdot POP nonumber\nendalign","category":"page"},{"location":"bgc_equations/#Parameters","page":"Biogeochemistry","title":"Parameters","text":"","category":"section"},{"location":"bgc_equations/","page":"Biogeochemistry","title":"Biogeochemistry","text":"Symbol Param Default Unit Description\nk_DOC kDOC 3.8e-7 s^-1 Remineralization rate of DOC\nk_DON kDON 3.8e-7 s^-1 Remineralization rate of DON\nk_DOP kDOP 3.8e-7 s^-1 Remineralization rate of DOP\nk_POC kPOC 3.8e-7 s^-1 Remineralization rate of POC\nk_PON kPON 3.8e-7 s^-1 Remineralization rate of PON\nk_POP kPOP 3.8e-7 s^-1 Remineralization rate of POP\nf_Cm mortFracC 0.5  Fraction of dead C goes to DOM\nf_Nm mortFracN 0.5  Fraction of dead N goes to DOM\nf_Pm mortFracP 0.5  Fraction of dead P goes to DOM\nf_Cg grazFracC 0.5  Fraction of grazed C goes to DOM\nf_Ng grazFracN 0.5  Fraction of grazed N goes to DOM\nf_Pg grazFracP 0.5  Fraction of grazed P goes to DOM","category":"page"},{"location":"#PlanktonIndividuals.jl","page":"Home","title":"PlanktonIndividuals.jl","text":"","category":"section"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PlanktonIndividuals.jl is a fast individual-based model written in Julia that runs on both CPU and GPU. It simulates the life cycle of ocean phytoplankton cells as Lagrangian particles while nutrients are represented as Eulerian tracers and advected over the gridded domain. The model is used to simulate and interpret the temporal and spatial variations in phytoplankton cell density, stoichiometry, as well as growth and division behaviors induced by diel cycle and physical motions ranging from sub-mesoscale to large scale processes.","category":"page"},{"location":"","page":"Home","title":"Home","text":"PlanktonIndividuals.jl can simulate multiple functional groups of phytoplankton with different growth and division strategies which will illustrate the interactions within and between functional groups. The individuals can be simulated not only in a zero-dimensional domain (like lab experiments) but also in one-, two- or three-dimensional domains where individuals will be advected by velocities provided by various models or observations.","category":"page"},{"location":"#Getting-Help","page":"Home","title":"Getting Help","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you are interested in using PlanktonIndividuals.jl or are trying to figure out how to use it, please feel free to ask us questions and get in touch!  ","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you're trying to set up a model then maybe you want to check out the examples. Please feel free to open an issue if you have any questions, comments, suggestions, etc!","category":"page"},{"location":"model_setup/#Model-Configuration","page":"Model Configuration","title":"Model Configuration","text":"","category":"section"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"The model configuration is specified within the PlanktonModel data structure. As documented below, the various parameters of a PlanktonModel can all be specified via keyword arguments. Options and features are documented in more detail afterwards and in the Examples section.","category":"page"},{"location":"model_setup/#PlanktonIndividuals.Model.PlanktonModel","page":"Model Configuration","title":"PlanktonIndividuals.Model.PlanktonModel","text":"PlanktonModel(arch::Architecture, grid::AbstractGrid;\n              FT = Float32,\n              mode = QuotaMode(),\n              max_individuals::Int = 8*1024,\n              bgc_params = nothing, \n              tracer_initial = default_tracer_init(),\n              phyto = nothing,\n              abiotic = nothing,\n              t::AbstractFloat = 0.0f0,\n              )\n\nGenerate a PlanktonModel data structure. \n\nKeyword Arguments (Required)\n\narch : CPU() or GPU(). Computer architecture being used to run the model.\ngrid : a AbstractGrid structure. Discrete grid for the model (resolution and geometry).\n\nKeyword Arguments (Optional)\n\nFT: Floating point data type. Default: Float32.\nmode : Phytoplankton physiology mode, choose among CarbonMode(), QuotaMode(), or MacroMolecularMode().\nmax_individuals : Maximum number of individuals for each species the model can hold,                   usually take the maximum of all the species and apply a factor to account for the growth                   of individuals during one simulation.\nbgc_params : Parameter set for biogeochemical processes modeled in the model, use default if nothing,                    use Dict to update parameters, the format and names of parameters can be found by running bgc_params_default().\ntracer_initial : The source of initial conditions of tracer fields, should be either a NamedTuple                    or a Dict containing the file paths pointing to the files of nutrient initial conditions.\nphyto : nothing or a phyto_setup. Whether to use default setup of phytoplankton in the model. If yes,                   it should be a NamedTuple like this phyto = phyto_setup(params = nothing, N = [2^10, 2^10], Nsp = 2).\nabiotic : nothing or a abiotic_setup. Whether to include abiotic particles in the model. If yes,                   it should be a NamedTuple like this abiotic = abiotic_setup(params = nothing, N = [2^10, 2^10], Nsa = 2, palat = [(:sp1, :sa1)]).\nt : Model time, start from 0 by default, in second.\n\n\n\n\n\n","category":"type"},{"location":"model_setup/#Architecture","page":"Model Configuration","title":"Architecture","text":"","category":"section"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"Passing arch = CPU() or arch = GPU() to the PlanktonModel constructor will determine whether the model is time stepped on a CPU or GPU.","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"Users do not need to modify the setup or simulation script to change the architecture to run on. The only thing that needs to be changed is arch = CPU() or arch = GPU().","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"tip: Running on GPUs\nPlease refer to GPU Support for more detail on running PlanktonIndividuals on GPUs and don't hesitate to open an issue if you have any difficulty.","category":"page"},{"location":"model_setup/#Grid","page":"Model Configuration","title":"Grid","text":"","category":"section"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"Two options are supported for the grid: RectilinearGrid and LatLonGrid with constant grid spacing in horizontal directions; grid spacing can differ between dimensions. Both Periodic and Bounded domain options are supported for the horizontal directions, whereas the domain is always Bounded in the vertical direction (top and bottom).","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"The RectilinearGrid is constructed by specifying its size (Tuple specifying the number of grid points in each dimension) and x, y, and z (Tuple specifying the start and end points).","category":"page"},{"location":"model_setup/#PlanktonIndividuals.Grids.RectilinearGrid","page":"Model Configuration","title":"PlanktonIndividuals.Grids.RectilinearGrid","text":"RectilinearGrid(;size, x, y, z,\n                 FT = Float32,\n                 topology = (Periodic, Periodic, Bounded),\n                 landmask = nothing,\n                 halo = (2, 2, 2))\n\nCreats a RectilinearGrid struct with size = (Nx, Ny, Nz) grid points.     x and y directions must be regular spaced,     z direction can be vertically stretched or regular spaced.\n\nKeyword Arguments (Required)\n\nsize : A tuple prescribing the number of grid points.                size is a 3-tuple no matter for 3D, 2D, or 1D model.\nx and y : A 2-tuple that specify the start and end points of the domain.\nz : is either a (1) 1D array that specifies the locations of cell faces in z direction,               or (2) 2-tuples that specify the start and end points of the domain.               Vertical indexing starts from surface and use negative numbers for depth.\n\nKeyword Arguments (Optional)\n\nFT: Floating point data type. Default: Float32.\ntopology : A 3-tuple specifying the topology of the domain.               The topology can be either Periodic or Bounded in each direction.\nlandmask : a 3-dimentional array to indicate where the land is.\nhalo : A tuple of integers that specifies the size of the halo region of cells               surrounding the physical interior for each direction.               halo is a 3-tuple no matter for 3D, 2D, or 1D model.               At least 2 halo points are needed for DST3FL advection scheme.\n\n\n\n\n\n","category":"type"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"For example, a rectilinear grid with 32 times 64 times 128 grid points and grid spacing of dx=1m, dy=2m, dz=4m is constructed like this:","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"grid = RectilinearGrid(size=(32, 64, 128), x = (0.0,32.0meters), y = (0.0,128.0meters), z = (0.0,-512.0meter))","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"The LatLonGrid is constructed by specifying its size (Tuple specifying the number of grid points in each dimension) and lat, lon, z (Tuple specifying the start and end points).","category":"page"},{"location":"model_setup/#PlanktonIndividuals.Grids.LatLonGrid","page":"Model Configuration","title":"PlanktonIndividuals.Grids.LatLonGrid","text":"LatLonGrid(;size, lat, lon, z,\n            FT = Float32,\n            radius = 6370.0e3,\n            landmask = nothing,\n            halo = (2, 2, 2))\n\nCreats a LatLonGrid struct with size = (Nx, Ny, Nz) grid points.\n\nKeyword Arguments (Required)\n\nsize : A tuple prescribing the number of grid points.                size is a 3-tuple no matter for 3D, 2D, or 1D model.\nlat : A 2-tuple specifying the startind and ending points in latitudinal direction.               Possible values are from -80 (80S) to 80 (80N).\nlon : A 2-tuple specifying the startind and ending points in longitudinal direction.               Possible values are from -180 (180W) to 180 (180E).\nz : is either a (1) 1D array that specifies the locations of cell faces in z direction,               or (2) 2-tuples that specify the start and end points of the domain.               Vertical indexing starts from surface and use negative numbers for depth.\n\nKeyword Arguments (Optional)\n\nFT: Floating point data type. Default: Float32.\nradius : Specify the radius of the Earth used in the model, 6370.0e3 meters by default.\nlandmask : a 3-dimentional array to indicate where the land is.\nhalo : A tuple of integers that specifies the size of the halo region of cells               surrounding the physical interior for each direction.               halo is a 3-tuple no matter for 3D, 2D, or 1D model.               At least 2 halo points are needed for DST3FL advection scheme.\n\n\n\n\n\n","category":"type"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"For example, a global domain from 80S to 80N, 180W to 180E and 200m depth with spacing of 1 degree horizontally and 10m vertically is constructed like this:","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"grid = LatLonGrid(size=(360,160,20), lat = (-80,80), lon = (-180,180), z = (0,-200)) ","category":"page"},{"location":"model_setup/#PlanktonIndividuals.Grids.LoadLatLonGrid","page":"Model Configuration","title":"PlanktonIndividuals.Grids.LoadLatLonGrid","text":"LoadLatLonGrid(;grid_info, size, lat, lon,\n                FT = Float32,\n                landmask = nothing,\n                halo=(2,2,2))\n\nCreats a LatLonGrid struct with size = (Nx, Ny, Nz) grid points.\n\nKeyword Arguments (Required)\n\ngrid_info : A NamedTuple contains external grid information (e.g. from MITgcm), please                   refer to documentation for the required format.\nsize : A tuple prescribing the number of grid points.                size is a 3-tuple no matter for 3D, 2D, or 1D model.\nlat : A 2-tuple specifying the startind and ending points in latitudinal direction.               Possible values are from -80 (80S) to 80 (80N).\nlon : A 2-tuple specifying the startind and ending points in longitudinal direction.               Possible values are from -180 (180W) to 180 (180E).\n\nKeyword Arguments (Optional)\n\nFT: Floating point data type. Default: Float32.\nlandmask : a 3-dimentional array to indicate where the land is.\nhalo : A tuple of integers that specifies the size of the halo region of cells               surrounding the physical interior for each direction.               halo is a 3-tuple no matter for 3D, 2D, or 1D model.               At least 2 halo points are needed for DST3FL advection scheme.\n\n\n\n\n\n","category":"function"},{"location":"model_setup/#Individuals","page":"Model Configuration","title":"Individuals","text":"","category":"section"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"The number of species can be specified via N_species. The number of individuals per species can be specified via N_individual. The maximum number of individuals per species that the model can hold is specified via max_individuals.","category":"page"},{"location":"model_setup/#parameters","page":"Model Configuration","title":"Parameters","text":"","category":"section"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"Default parameters are generated by two functions called bgc_params_default and phyt_params_default via dictionnaries (Dict). bgc_params contains the parameters for biogeochemical cycls. phyt_params contains the parameters for phytoplankton individuals. The default parameter values are listed here.","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"Values of the parameters can be changed using update_bgc_params and update_phyt_params.","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"In the example shown below, we change the value of kDOC, which is the remineralization rate for DOC:","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"new_params = Dict(\"kDOC\" => 0.01) # no need to include all parameters\nupdate_bgc_params(new_params)","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"phyt_params can be changed in the same way.","category":"page"},{"location":"model_setup/#Nutrient-fields","page":"Model Configuration","title":"Nutrient fields","text":"","category":"section"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"Nutrient fields included in the model are listed below. The initial conditions of the nutrient fields are generated by generate_nutrients either from a NamedTuple or a Dict. The NamedTuple contains two elements. First element is a 10-element NamedTuple, each element is a Float64 number filled uniformly across the domain as initial condition of a tracer. Second element is a 10-element NamedTuple, each element is a Float64 number indicating the random noise of each tracer. The Dict contains the file paths pointing to the files of existing nutrient initial conditions.","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"Name Unit Description\nDIC mmolCm^3 concentration of dissolved inorganic carbon\nNH4 mmolNm^3 concentration of ammonia\nNO3 mmolNm^3 concentration of nitrate\nPO4 mmolPm^3 concentration of phosphate\nDOC mmolCm^3 concentration of dissolved organic carbon\nDON mmolNm^3 concentration of dissolved organic nitrogen\nDOP mmolPm^3 concentration of dissolved organic phosphorus\nPOC mmolCm^3 concentration of particulate organic carbon\nPON mmolNm^3 concentration of particulate organic nitrogen\nPOP mmolPm^3 concentration of particulate organic phosphorus","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"tip: Noisy Initial Conditions\nA random noise can be included only if the initial conditions are generated by NamedTuple.","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"tip: Nutrient Fields\nThe initial conditions of all the nutrient fields should be non-negative.","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"An example of the NamedTuple is listed below:","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"initial_condition = (DIC=20.0, NH4=0.2, NO3=0.5, PO4=0.03, DOC=1.0, DON=0.1, DOP=0.05, POC=0.0, PON=0.0,POP=0.0);\nrand_noise = (DIC=0.0, NH4=0.0, NO3=0.0, PO4=0.0, DOC=0.0, DON=0.0, DOP=0.0, POC=0.0, PON=0.0,POP=0.0);\nnut_initial = (initial_condition = initial_condition, rand_noise = rand_noise)","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"And example of the Dict is listed below:","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"nut_init = Dict(\n    \"DIC\" => \"path/to/DIC.bin\",\n    \"NH4\" => \"path/to/NH4.bin\",\n    \"NO3\" => \"path/to/NO3.bin\",\n    \"PO4\" => \"path/to/PO4.bin\",\n    \"DOC\" => \"path/to/DOC.bin\",\n    \"DON\" => \"path/to/DON.bin\",\n    \"DOP\" => \"path/to/DOP.bin\",\n    \"POC\" => \"path/to/POC.bin\",\n    \"PON\" => \"path/to/PON.bin\",\n    \"POP\" => \"path/to/POP.bin\");","category":"page"}]
}
