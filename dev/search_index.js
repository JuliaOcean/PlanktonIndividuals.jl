var documenterSearchIndex = {"docs":
[{"location":"generated/horizontal_2D_example/","page":"Two-Dimensional Map","title":"Two-Dimensional Map","text":"EditURL = \"https://github.com/JuliaOcean/PlanktonIndividuals.jl/blob/master/examples/horizontal_2D_example.jl\"","category":"page"},{"location":"generated/horizontal_2D_example/#Horizontal-2-Dimensional-Example","page":"Two-Dimensional Map","title":"Horizontal 2-Dimensional Example","text":"","category":"section"},{"location":"generated/horizontal_2D_example/","page":"Two-Dimensional Map","title":"Two-Dimensional Map","text":"Here we simulate phytoplankton cells as Lagrangian particles in a horizontal, two-dimensional, flow field. The domain is periodic in both directions.","category":"page"},{"location":"generated/horizontal_2D_example/#.-Import-packages","page":"Two-Dimensional Map","title":"1. Import packages","text":"","category":"section"},{"location":"generated/horizontal_2D_example/","page":"Two-Dimensional Map","title":"Two-Dimensional Map","text":"using PlanktonIndividuals, Plots\n\np=dirname(pathof(PlanktonIndividuals))\ninclude(joinpath(p,\"../examples/helper_functions.jl\"))","category":"page"},{"location":"generated/horizontal_2D_example/#.-Generate-Flow-Fields","page":"Two-Dimensional Map","title":"2. Generate Flow Fields","text":"","category":"section"},{"location":"generated/horizontal_2D_example/","page":"Two-Dimensional Map","title":"Two-Dimensional Map","text":"First we'll generate grid information","category":"page"},{"location":"generated/horizontal_2D_example/","page":"Two-Dimensional Map","title":"Two-Dimensional Map","text":"grid = RegularRectilinearGrid(size=(128, 128, 1), spacing=(1, 1, 1))","category":"page"},{"location":"generated/horizontal_2D_example/","page":"Two-Dimensional Map","title":"Two-Dimensional Map","text":"Then we use a stream function to generate the flow field which is a double-gyre configuration as explained here","category":"page"},{"location":"generated/horizontal_2D_example/","page":"Two-Dimensional Map","title":"Two-Dimensional Map","text":"(uvels, vvels, wvels, ϕcenters) = streamfunction_xy();\nnothing #hide","category":"page"},{"location":"generated/horizontal_2D_example/#.-Set-Up-The-Model","page":"Two-Dimensional Map","title":"3. Set Up The Model","text":"","category":"section"},{"location":"generated/horizontal_2D_example/","page":"Two-Dimensional Map","title":"Two-Dimensional Map","text":"Next we setup the individual-based model by specifying the architecture, grid, number of individuals, parameters, and nutrient initial conditions.","category":"page"},{"location":"generated/horizontal_2D_example/","page":"Two-Dimensional Map","title":"Two-Dimensional Map","text":"model = PlanktonModel(CPU(), grid; N_species = 1, N_individual = 2^7, max_individuals = 2^7*8)","category":"page"},{"location":"generated/horizontal_2D_example/","page":"Two-Dimensional Map","title":"Two-Dimensional Map","text":"We also need to setup a runtime simulation to run the model. The simulation includes time step, number of time steps, flow fields that will be used etc.","category":"page"},{"location":"generated/horizontal_2D_example/","page":"Two-Dimensional Map","title":"Two-Dimensional Map","text":"sim = PlanktonSimulation(model, ΔT = 60, nΔT = 1, vels=(u=uvels, v=vvels, w=wvels), vel_reuse = true)","category":"page"},{"location":"generated/horizontal_2D_example/#.-Run-the-Model","page":"Two-Dimensional Map","title":"4. Run the Model","text":"","category":"section"},{"location":"generated/horizontal_2D_example/","page":"Two-Dimensional Map","title":"Two-Dimensional Map","text":"We run the model for 120 time steps (2 hour) and plot the individuals and DOC field afterwards.","category":"page"},{"location":"generated/horizontal_2D_example/","page":"Two-Dimensional Map","title":"Two-Dimensional Map","text":"for i in 1:120\n    update!(sim)\nend","category":"page"},{"location":"generated/horizontal_2D_example/","page":"Two-Dimensional Map","title":"Two-Dimensional Map","text":"To plot the distribution of individuals as well as nutrient fields we use Plots.jl and create a function that can easily be re-used e.g. to create an animation.","category":"page"},{"location":"generated/horizontal_2D_example/","page":"Two-Dimensional Map","title":"Two-Dimensional Map","text":"function plot(model::PlanktonModel)\n    # Coordinate arrays for plotting\n    xC, yC = collect(model.grid.xC)[3:130], collect(model.grid.yC)[3:130]\n\n    # heatmap of the flow field\n    fl_plot = Plots.contourf(xC, yC, ϕcenters', xlabel=\"x (m)\", ylabel=\"y (m)\", color=:balance, fmt=:png, colorbar=false)\n\n    # a scatter plot embeded in the flow fields\n    px = Array(model.individuals.phytos.sp1.data.x)\n    py = Array(model.individuals.phytos.sp1.data.y)\n    Plots.scatter!(fl_plot, px, py, ms=5, color = :red, legend=:none)\n\n    # DOC field\n    trac1 = Plots.contourf(xC, yC, Array(model.nutrients.DOC.data)[3:130,3:130,3]', xlabel=\"x (m)\", ylabel=\"y (m)\", clims=(0.5, 1.1), fmt=:png)\n\n    # Arrange the plots side-by-side.\n    plt = Plots.plot(fl_plot, trac1, size=(800, 400),\n        title=[lpad(model.t÷86400,2,\"0\")*\"day \"*lpad(model.t÷3600-24*(model.t÷86400),2,\"0\")*\"hour\" \"DOC (mmolC/L)\"])\n\n    return plt\nend\n\nplot(model)","category":"page"},{"location":"generated/horizontal_2D_example/","page":"Two-Dimensional Map","title":"Two-Dimensional Map","text":"Or you can use the following code to generate an animation like below","category":"page"},{"location":"generated/horizontal_2D_example/","page":"Two-Dimensional Map","title":"Two-Dimensional Map","text":"anim = @animate for i in 1:120\n   update!(sim)\n   plot(model)\nend\ngif(anim, \"anim_fps15.gif\", fps = 15)","category":"page"},{"location":"generated/horizontal_2D_example/","page":"Two-Dimensional Map","title":"Two-Dimensional Map","text":"(Image: animation)","category":"page"},{"location":"generated/horizontal_2D_example/","page":"Two-Dimensional Map","title":"Two-Dimensional Map","text":"","category":"page"},{"location":"generated/horizontal_2D_example/","page":"Two-Dimensional Map","title":"Two-Dimensional Map","text":"This page was generated using Literate.jl.","category":"page"},{"location":"function_index/#Function-Index","page":"Function index","title":"Function Index","text":"","category":"section"},{"location":"function_index/","page":"Function index","title":"Function index","text":"","category":"page"},{"location":"function_index/","page":"Function index","title":"Function index","text":"Modules = [PlanktonIndividuals]\nOrder   = [:type,:function]","category":"page"},{"location":"function_index/#PlanktonIndividuals.PlanktonDiagnostics-Tuple{Any}","page":"Function index","title":"PlanktonIndividuals.PlanktonDiagnostics","text":"PlanktonDiagnostics(model; tracer=(:PAR, :NH4, :NO3, :DOC),\n                    plankton=(:num, :graz, :mort, :dvid),\n                    frequency = 1)\n\nGenerate a PlanktonDiagnostics structure.\n\nKeyword Arguments (Optional)\n\ntracer : a Tuple containing the names of nutrient fields to be diagnosed.\nplankton : a Tuple containing the names of physiological processes of plankton individuals to be diagnosed.\nfrequency : frequency of diagnostics (in numbers of time steps), diagnose every time step by default.\n\n\n\n\n\n","category":"method"},{"location":"function_index/#PlanktonIndividuals.PlanktonModel-Tuple{Architecture, PlanktonIndividuals.AbstractGrid}","page":"Function index","title":"PlanktonIndividuals.PlanktonModel","text":"PlanktonModel(arch::Architecture, grid::AbstractGrid;\n              N_species = 1,\n              N_individual = 1024,\n              max_individuals = 8*1024,\n              bgc_params = bgc_params_default(), \n              phyt_params = phyt_params_default(),\n              nut_initial = default_nut_init(),\n              t = 0.0,\n              mask = nothing,\n              )\n\nGenerate a PlanktonModel data structure. \n\nKeyword Arguments (Required)\n\narch : CPU() or GPU(). Computer architecture being used to run the model.\ngrid : a AbstractGrid structure. Discrete grid for the model (resolution and geometry).\n\nKeyword Arguments (Optional)\n\nN_species : Number of species.\nN_individual : Number of individuals per species.\nmax_individuals : Maximum number of individuals per species the model can hold.\nbgc_params : Parameter set for biogeochemical processes modeled in the model.\nphyt_params : Parameter set for physiological processes of individuals modeled in the model.\nnut_initial : The source of initial conditions of nutrient fields, should be either a NamedTuple                           or a Dict containing the file paths pointing to the files of nutrient initial conditions.\nt : Model time, start from 0 by default, in second.\nmask : Mask out the individuals and tracers generated out of the domain, a 3D array with size (Nx, Ny, Nz).\n\n\n\n\n\n","category":"method"},{"location":"function_index/#PlanktonIndividuals.PlanktonSimulation-Tuple{PlanktonModel}","page":"Function index","title":"PlanktonIndividuals.PlanktonSimulation","text":"PlanktonSimulation(model; ΔT, nΔT,\n                   PARF_path = PlanktonIndividuals.default_PAR,\n                   temp_path = PlanktonIndividuals.default_temperature,\n                   diags = nothing,\n                   vels = (;),\n                   res_dir = nothing\n                   save_individuals = nothing,\n                   vel_reuse = false\n                   )\n\nGenerate a PlanktonSimulation data structure.\n\nKeyword Arguments (Required)\n\nΔT : time step in second.\nnΔT : number of time steps.\n\nKeyword Arguments (Optional)\n\nPARF_path and temp_path : External forcings of PAR and temperature. Hourly data of a single day is required (25 data points in total).\ndiags : Diagnostics of the simulation generated by PlanktonDiagnostics.\nres_dir : Create a directory to store results, nothing by default.\nvels : The velocity fields for nutrient fields and individuals. nothing means no velocities                    will be applied in the simulation. Otherwise, vels mush be a NamedTuple containing                    all u, v, and w. Each of u, v, and w must be an 4D-Array of                     (Nx, Ny, Nz, nΔT+1) elements, excluding halo points. N+1 is required for bounded direction.\nsave_individuals : save individuals every Int64 time steps, do not save individuals if Nothing.\nvel_reuse : reuse the provided velocity fields if true.\n\n\n\n\n\n","category":"method"},{"location":"function_index/#PlanktonIndividuals.RegularLatLonGrid-Tuple{}","page":"Function index","title":"PlanktonIndividuals.RegularLatLonGrid","text":"RegularLatLonGrid(;size, lat, lon,\n                   radius = 6370.0e3,\n                   halo = (2, 2, 2))\n\nCreats a RegularLatLonGrid struct with size = (Nx, Ny, Nz) grid points.\n\nKeyword Arguments (Required)\n\nsize : A tuple prescribing the number of grid points.                size is a 3-tuple no matter for 3D, 2D, or 1D model.\nlat : A 2-tuple specifying the startind and ending points in latitudinal direction.               Possible values are from -80 (80S) to 80 (80N).\nlon : A 2-tuple specifying the startind and ending points in longitudinal direction.               Possible values are from -180 (180W) to 180 (180E).\nz : A 2-tuple specifying the startind and ending points in vertical direction.               Vertical indexing starts from surface and use negative numbers for depth.\n\nKeyword Arguments (Optional)\n\nradius : Specify the radius of the Earth used in the model, 6370.0e3 meters by default.\nhalo : A tuple of integers that specifies the size of the halo region of cells               surrounding the physical interior for each direction.               halo is a 3-tuple no matter for 3D, 2D, or 1D model.               At least 2 halo points are needed for DST3FL advection scheme.\n\n\n\n\n\n","category":"method"},{"location":"function_index/#PlanktonIndividuals.RegularRectilinearGrid-Tuple{}","page":"Function index","title":"PlanktonIndividuals.RegularRectilinearGrid","text":"RegularRectilinearGrid(;size, spacing,\n                        topology = (Periodic, Periodic, Bounded),\n                        halo = (2, 2, 2))\n\nCreats a RegularRectilinearGrid struct with size = (Nx, Ny, Nz) grid points.\n\nKeyword Arguments (Required)\n\nsize : A tuple prescribing the number of grid points.                size is a 3-tuple no matter for 3D, 2D, or 1D model.\nspacing : A tuple prescribing the length of each grid point in x, y, and z directions.               spacing is a 3-tuple no matter for 3D, 2D, or 1D model.\n\nKeyword Arguments (Optional)\n\ntopology : A 3-tuple specifying the topology of the domain.               The topology can be either Periodic or Bounded in each direction.\nhalo : A tuple of integers that specifies the size of the halo region of cells               surrounding the physical interior for each direction.               halo is a 3-tuple no matter for 3D, 2D, or 1D model.               At least 2 halo points are needed for DST3FL advection scheme.\n\n\n\n\n\n","category":"method"},{"location":"function_index/#PlanktonIndividuals.PrepRunDir-Tuple{}","page":"Function index","title":"PlanktonIndividuals.PrepRunDir","text":"PrepRunDir(res::String=\"results/\")\n\nCreate res/ folder if needed. Remove old files from it if needed.\n\n\n\n\n\n","category":"method"},{"location":"function_index/#PlanktonIndividuals.TimeStep!-Tuple{PlanktonModel, Any, PlanktonDiagnostics, String}","page":"Function index","title":"PlanktonIndividuals.TimeStep!","text":"TimeStep!(model::PlanktonModel, ΔT::Int64, diags::PlanktonDiagnostics, resultpath::String)\n\nUpdate physiology processes and nutrient field of PlanktonModel one time step forward.\n\nKeyword Arguments\n\nmodel: PlanktonModel to be updated one time step forward.\nΔT: The length of a time step.\ndiags: PlanktonDiagnostics to be updated.\nresultpath (optional): The file path to store model output. \n\n\n\n\n\n","category":"method"},{"location":"function_index/#PlanktonIndividuals.generate_nutrients-Tuple{Any, Any, Union{Dict, NamedTuple}}","page":"Function index","title":"PlanktonIndividuals.generate_nutrients","text":"generate_nutrients(arch, grid, source; mask = nothing)\n\nSet up initial nutrient fields according to grid.\n\nKeyword Arguments\n\narch: CPU() or GPU(). The computer architecture used to time-step model.\ngrid: The resolution and discrete geometry on which nutrient fields are solved.\nsource: An 10-element NamedTuple with each element representing the initial condition of a kind of nutrient,            or a Dict containing the file paths pointing to the files of nutrient initial conditions.\nmask (optional): Mask out the tracers generated out of the domain, a 3D array with size (Nx, Ny, Nz).\n\n\n\n\n\n","category":"method"},{"location":"function_index/#PlanktonIndividuals.update!-Tuple{PlanktonSimulation}","page":"Function index","title":"PlanktonIndividuals.update!","text":"update!(sim::PlanktonSimulaiton)\n\nupdate the PlanktonSimulaiton for sim.nΔT time steps.\n\n\n\n\n\n","category":"method"},{"location":"function_index/#PlanktonIndividuals.update_bgc_params-Tuple{Dict}","page":"Function index","title":"PlanktonIndividuals.update_bgc_params","text":"update_bgc_params(tmp::Ditc)\n\nUpdate parameter values based on a Dict provided by user\n\nKeyword Arguments\n\ntmp is a Dict containing the parameters needed to be upadated\n\n\n\n\n\n","category":"method"},{"location":"function_index/#PlanktonIndividuals.update_phyt_params-Tuple{Dict}","page":"Function index","title":"PlanktonIndividuals.update_phyt_params","text":"update_phyt_params(tmp::Dict)\n\nUpdate parameter values based on a Dict provided by user\n\nKeyword Arguments\n\ntmp is a Dict containing the parameters needed to be upadated\n\n\n\n\n\n","category":"method"},{"location":"function_index/#PlanktonIndividuals.write_diags_to_jld2-NTuple{5, Any}","page":"Function index","title":"PlanktonIndividuals.write_diags_to_jld2","text":"write_diags_to_jld2(diags, filepath, t, ncounts, grid)\n\nwrite model output of individuals at each time step to a binary file\n\nKeyword Arguments\n\ndiags: NamedTuple of a list of diagnostics at current time step.\nfilepath: The file path to store JLD2 files.\nt: Current time of model in second, usually starting from 0.\nncounts: the number of time steps included in each diagnostic\ngrid: grid information used to exclude halo points.\n\n\n\n\n\n","category":"method"},{"location":"function_index/#PlanktonIndividuals.write_individuals_to_jld2-Tuple{NamedTuple, Any, Any}","page":"Function index","title":"PlanktonIndividuals.write_individuals_to_jld2","text":"write_individuals_to_bin(phytos, filepath, t)\n\nwrite model output of individuals at each time step to a binary file\n\nKeyword Arguments\n\nphytos: NamedTuple of a list of individual species.\nfilepath: The file path to store JLD2 files.\nt: Current time of model in second, usually starting from 0.\natts (optional): attributes of individuals to save, default (:x, :y, :z)\n\n\n\n\n\n","category":"method"},{"location":"function_index/#PlanktonIndividuals.write_nut_nc_each_step-Tuple{NamedTuple, Int64, String}","page":"Function index","title":"PlanktonIndividuals.write_nut_nc_each_step","text":"write_nut_nc_each_step(nut, t, filepath)\n\nWrite a NetCDF file of nutrient fields at each time step\n\nKeyword Arguments\n\nnut: NamedTuple of nutrient tracers.\nt: Current time of model in second, usually starting from 0.\nfilepath: The file path to store NetCDF files.\n\n\n\n\n\n","category":"method"},{"location":"benchmarks/#benchmarks","page":"Benchmarks","title":"Benchmarks","text":"","category":"section"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"Here we benchmark the model performance in two Architectures. The number of individuals used in the benchmark are (2, 2^5, 2^10, 2^15). And we also use different grid resolutions in 2-Dimensional and 3-Dimensional model setup.","category":"page"},{"location":"benchmarks/#Dimensional-model","page":"Benchmarks","title":"0-Dimensional model","text":"","category":"section"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"This is a benchmark of a simple 0-Dimensional model setup without advection of Eulerian tracers. However, the advection of individuals still take the same amount of time whether the velocity field is provided or not.","category":"page"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"PlanktonIndividuals v0.2.0\nJulia Version 1.6.0\nCommit f9720dc2eb (2021-03-24 12:55 UTC)\nPlatform Info:\n  OS: Linux (x86_64-pc-linux-gnu)\n  CPU: Intel(R) Xeon(R) CPU E5-2680 v4 @ 2.40GHz\n  WORD_SIZE: 64\n  LIBM: libopenlibm\n  LLVM: libLLVM-11.0.1 (ORCJIT, broadwell)\n  GPU: Tesla P100-PCIE-12GB","category":"page"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"Arch N min mean max memory allocs\nCPU 2 1.066 ms 1.231 ms 2.018 ms 610.95 KiB 4385\nCPU 32 1.238 ms 1.390 ms 1.977 ms 610.95 KiB 4385\nCPU 1024 8.462 ms 8.663 ms 9.398 ms 610.89 KiB 4381\nCPU 32768 226.577 ms 231.720 ms 264.892 ms 610.89 KiB 4381\nGPU 2 7.221 ms 8.179 ms 9.740 ms 1.57 MiB 21480\nGPU 32 7.274 ms 7.624 ms 8.229 ms 1.57 MiB 21471\nGPU 1024 7.305 ms 7.647 ms 8.606 ms 1.57 MiB 21471\nGPU 32768 7.871 ms 12.539 ms 24.820 ms 1.57 MiB 21547","category":"page"},{"location":"benchmarks/#Dimensional-model-2","page":"Benchmarks","title":"2-Dimensional model","text":"","category":"section"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"This is the benchmark of a 2-Dimensional model setup with (Ns, 1, Ns) grid cells. Here Ns = [32, 64, 128].","category":"page"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"PlanktonIndividuals v0.2.0\nJulia Version 1.6.0\nCommit f9720dc2eb (2021-03-24 12:55 UTC)\nPlatform Info:\n  OS: Linux (x86_64-pc-linux-gnu)\n  CPU: Intel(R) Xeon(R) CPU E5-2680 v4 @ 2.40GHz\n  WORD_SIZE: 64\n  LIBM: libopenlibm\n  LLVM: libLLVM-11.0.1 (ORCJIT, broadwell)\n  GPU: Tesla P100-PCIE-12GB","category":"page"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"Arch N Ns min mean max memory allocs\nCPU 2 32 4.996 ms 5.649 ms 5.808 ms 2.83 MiB 4438\nCPU 2 64 14.257 ms 16.509 ms 17.855 ms 8.82 MiB 4438\nCPU 2 128 52.537 ms 56.669 ms 72.511 ms 31.85 MiB 4438\nCPU 32 32 4.884 ms 5.741 ms 6.073 ms 2.83 MiB 4438\nCPU 32 64 14.430 ms 16.662 ms 17.849 ms 8.82 MiB 4438\nCPU 32 128 52.890 ms 53.086 ms 53.704 ms 31.85 MiB 4438\nCPU 1024 32 11.078 ms 12.091 ms 13.222 ms 2.83 MiB 4434\nCPU 1024 64 24.283 ms 24.721 ms 26.330 ms 8.82 MiB 4438\nCPU 1024 128 59.773 ms 60.021 ms 60.935 ms 31.85 MiB 4438\nCPU 32768 32 211.933 ms 216.529 ms 241.320 ms 2.83 MiB 4434\nCPU 32768 64 227.456 ms 238.156 ms 285.987 ms 8.82 MiB 4438\nCPU 32768 128 269.776 ms 292.217 ms 329.241 ms 31.85 MiB 4438\nGPU 2 32 7.423 ms 9.114 ms 14.216 ms 1.60 MiB 20939\nGPU 2 64 7.704 ms 8.495 ms 12.629 ms 1.69 MiB 20947\nGPU 2 128 8.074 ms 8.476 ms 9.231 ms 2.07 MiB 20947\nGPU 32 32 7.121 ms 7.546 ms 8.266 ms 1.60 MiB 20939\nGPU 32 64 7.822 ms 8.457 ms 11.789 ms 1.69 MiB 20947\nGPU 32 128 8.189 ms 8.508 ms 9.170 ms 2.07 MiB 20947\nGPU 1024 32 7.155 ms 7.678 ms 8.766 ms 1.60 MiB 20939\nGPU 1024 64 7.853 ms 8.174 ms 9.340 ms 1.69 MiB 20947\nGPU 1024 128 8.189 ms 8.525 ms 9.471 ms 2.07 MiB 20947\nGPU 32768 32 8.120 ms 10.474 ms 18.289 ms 1.60 MiB 21079\nGPU 32768 64 8.214 ms 11.399 ms 21.621 ms 1.69 MiB 21083\nGPU 32768 128 9.314 ms 12.102 ms 20.027 ms 2.07 MiB 21083","category":"page"},{"location":"benchmarks/#Dimensional-model-3","page":"Benchmarks","title":"3-Dimensional model","text":"","category":"section"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"This is the benchmark of a 3-Dimensional model setup with (Ns, Ns, Ns) grid cells. Here Ns = [32, 64].","category":"page"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"PlanktonIndividuals v0.2.0\nJulia Version 1.6.0\nCommit f9720dc2eb (2021-03-24 12:55 UTC)\nPlatform Info:\n  OS: Linux (x86_64-pc-linux-gnu)\n  CPU: Intel(R) Xeon(R) CPU E5-2680 v4 @ 2.40GHz\n  WORD_SIZE: 64\n  LIBM: libopenlibm\n  LLVM: libLLVM-11.0.1 (ORCJIT, broadwell)\n  GPU: Tesla P100-PCIE-12GB","category":"page"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"Arch N Ns min mean max memory allocs\nCPU 2 32 39.864 ms 40.277 ms 43.291 ms 1.51 MiB 4206\nCPU 2 64 351.139 ms 353.212 ms 361.829 ms 8.56 MiB 4207\nCPU 32 32 39.855 ms 40.296 ms 43.522 ms 1.51 MiB 4206\nCPU 32 64 376.590 ms 395.313 ms 417.473 ms 8.56 MiB 4207\nCPU 1024 32 49.468 ms 49.872 ms 51.700 ms 1.51 MiB 4206\nCPU 1024 64 366.752 ms 369.094 ms 380.962 ms 8.56 MiB 4207\nCPU 32768 32 260.691 ms 264.792 ms 294.048 ms 1.51 MiB 4206\nCPU 32768 64 583.412 ms 590.231 ms 623.753 ms 8.56 MiB 4207\nGPU 2 32 5.922 ms 8.108 ms 15.476 ms 2.56 MiB 20019\nGPU 2 64 10.199 ms 13.916 ms 24.250 ms 9.61 MiB 20016\nGPU 32 32 5.863 ms 8.657 ms 14.639 ms 2.56 MiB 20019\nGPU 32 64 10.313 ms 13.910 ms 24.215 ms 9.61 MiB 20016\nGPU 1024 32 5.856 ms 8.798 ms 13.367 ms 2.56 MiB 20019\nGPU 1024 64 9.996 ms 13.269 ms 20.624 ms 9.61 MiB 20016\nGPU 32768 32 7.491 ms 10.591 ms 18.827 ms 2.56 MiB 20155\nGPU 32768 64 12.336 ms 16.536 ms 20.237 ms 9.61 MiB 20156","category":"page"},{"location":"generated/vertical_2D_example/","page":"Ocean Transect","title":"Ocean Transect","text":"EditURL = \"https://github.com/JuliaOcean/PlanktonIndividuals.jl/blob/master/examples/vertical_2D_example.jl\"","category":"page"},{"location":"generated/vertical_2D_example/#Vertical-2-Dimensional-Example","page":"Ocean Transect","title":"Vertical 2-Dimensional Example","text":"","category":"section"},{"location":"generated/vertical_2D_example/","page":"Ocean Transect","title":"Ocean Transect","text":"Here we simulate phytoplankton cells as Lagrangian particles in a 2D flow field, with one horizontal direction (x) and one vertical one (z), like in an ocean transect.","category":"page"},{"location":"generated/vertical_2D_example/","page":"Ocean Transect","title":"Ocean Transect","text":"Here the domain is periodic in the x direction while it is bounded in the z direction.","category":"page"},{"location":"generated/vertical_2D_example/#.-Import-packages","page":"Ocean Transect","title":"1. Import packages","text":"","category":"section"},{"location":"generated/vertical_2D_example/","page":"Ocean Transect","title":"Ocean Transect","text":"using PlanktonIndividuals, Plots\n\np=dirname(pathof(PlanktonIndividuals))\ninclude(joinpath(p,\"../examples/helper_functions.jl\"))","category":"page"},{"location":"generated/vertical_2D_example/#.-Generate-Flow-Fields","page":"Ocean Transect","title":"2. Generate Flow Fields","text":"","category":"section"},{"location":"generated/vertical_2D_example/","page":"Ocean Transect","title":"Ocean Transect","text":"First we generate grid information (128 by 128 grid boxes, 1m thick, and 1m wide) and the computational architecture (CPU).","category":"page"},{"location":"generated/vertical_2D_example/","page":"Ocean Transect","title":"Ocean Transect","text":"arch = CPU()\n\ngrid = RegularRectilinearGrid(size=(128, 1, 128), spacing=(1, 1, 1))","category":"page"},{"location":"generated/vertical_2D_example/","page":"Ocean Transect","title":"Ocean Transect","text":"Then we use a stream function (see helper_functions.jl) to generate a simple flow field (displayed below) in a 2D vertical plane.","category":"page"},{"location":"generated/vertical_2D_example/","page":"Ocean Transect","title":"Ocean Transect","text":"(uvels, vvels, wvels, ϕcenters) = streamfunction_xz();\nnothing #hide","category":"page"},{"location":"generated/vertical_2D_example/#.-Model-Setup","page":"Ocean Transect","title":"3. Model Setup","text":"","category":"section"},{"location":"generated/vertical_2D_example/","page":"Ocean Transect","title":"Ocean Transect","text":"Next we setup the individual-based model by specifying the architecture, grid, and plankton community.","category":"page"},{"location":"generated/vertical_2D_example/","page":"Ocean Transect","title":"Ocean Transect","text":"model = PlanktonModel(arch, grid; N_species = 1, N_individual = 2^7, max_individuals = 2^7*8)","category":"page"},{"location":"generated/vertical_2D_example/","page":"Ocean Transect","title":"Ocean Transect","text":"Finally we setup the duration of the model simulation and the kind of output we want.","category":"page"},{"location":"generated/vertical_2D_example/","page":"Ocean Transect","title":"Ocean Transect","text":"sim = PlanktonSimulation(model, ΔT = 60, nΔT = 1, vels=(u=uvels, v=vvels, w=wvels), vel_reuse = true)","category":"page"},{"location":"generated/vertical_2D_example/#.-Model-Run","page":"Ocean Transect","title":"4. Model Run","text":"","category":"section"},{"location":"generated/vertical_2D_example/","page":"Ocean Transect","title":"Ocean Transect","text":"We run the model for 120 time steps (2 hours) and then plot individuals and nutrients in their final state (stored in model).","category":"page"},{"location":"generated/vertical_2D_example/","page":"Ocean Transect","title":"Ocean Transect","text":"for i in 1:120\n    update!(sim)\nend","category":"page"},{"location":"generated/vertical_2D_example/","page":"Ocean Transect","title":"Ocean Transect","text":"To plot the distribution of individuals as well as nutrient fields we use Plots.jl and create a function that can easily be re-used e.g. to create an animation.","category":"page"},{"location":"generated/vertical_2D_example/","page":"Ocean Transect","title":"Ocean Transect","text":"function plot(model::PlanktonModel)\n    # Coordinate arrays for plotting\n    xC, zC = collect(model.grid.xC)[3:130], collect(model.grid.zC)[3:130]\n\n    # contour of the flow field\n    fl_plot = Plots.contourf(xC, reverse(zC), rotl90(ϕcenters), xlabel=\"x (m)\", ylabel=\"z (m)\", color=:balance, fmt=:png, colorbar=false)\n\n    # a scatter plot embeded in the flow fields\n    px = Array(model.individuals.phytos.sp1.data.x)\n    pz = Array(model.individuals.phytos.sp1.data.z)\n    Plots.scatter!(fl_plot, px, pz, ms=5, color = :red, legend=:none)\n\n    # DOC field\n    trac1 = Plots.contourf(xC, reverse(zC), rotl90(Array(model.nutrients.DOC.data)[3:130,3,3:130]), xlabel=\"x (m)\", ylabel=\"z (m)\", clims=(0.5, 1.1), fmt=:png)\n\n    # Arrange the plots side-by-side.\n    plt = Plots.plot(fl_plot, trac1, size=(800, 400),\n        title=[lpad(model.t÷86400,2,\"0\")*\"day \"*lpad(model.t÷3600-24*(model.t÷86400),2,\"0\")*\"hour\" \"DOC (mmolC/L)\"])\n\n    return plt\nend\n\nplot(model)","category":"page"},{"location":"generated/vertical_2D_example/","page":"Ocean Transect","title":"Ocean Transect","text":"Or you can use the following code to generate an animation like below","category":"page"},{"location":"generated/vertical_2D_example/","page":"Ocean Transect","title":"Ocean Transect","text":"anim = @animate for i in 1:120\n   update!(sim)\n   plot(model)\nend\ngif(anim, \"anim_fps15.gif\", fps = 15)","category":"page"},{"location":"generated/vertical_2D_example/","page":"Ocean Transect","title":"Ocean Transect","text":"(Image: animation)","category":"page"},{"location":"generated/vertical_2D_example/","page":"Ocean Transect","title":"Ocean Transect","text":"","category":"page"},{"location":"generated/vertical_2D_example/","page":"Ocean Transect","title":"Ocean Transect","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/global_ocean_2D_example/","page":"Global Ocean Example","title":"Global Ocean Example","text":"EditURL = \"https://github.com/JuliaOcean/PlanktonIndividuals.jl/blob/master/examples/global_ocean_2D_example.jl\"","category":"page"},{"location":"generated/global_ocean_2D_example/#Global-Ocean-Example","page":"Global Ocean Example","title":"Global Ocean Example","text":"","category":"section"},{"location":"generated/global_ocean_2D_example/","page":"Global Ocean Example","title":"Global Ocean Example","text":"Here we simulate phytoplankton cells as Lagrangian particles in the global ocean.","category":"page"},{"location":"generated/global_ocean_2D_example/#.-Import-packages","page":"Global Ocean Example","title":"1. Import packages","text":"","category":"section"},{"location":"generated/global_ocean_2D_example/","page":"Global Ocean Example","title":"Global Ocean Example","text":"using PlanktonIndividuals, Plots, IndividualDisplacements, MeshArrays, OceanStateEstimation","category":"page"},{"location":"generated/global_ocean_2D_example/#.-Generate-Flow-Fields","page":"Global Ocean Example","title":"2. Generate Flow Fields","text":"","category":"section"},{"location":"generated/global_ocean_2D_example/","page":"Global Ocean Example","title":"Global Ocean Example","text":"First we'll generate grid information","category":"page"},{"location":"generated/global_ocean_2D_example/","page":"Global Ocean Example","title":"Global Ocean Example","text":"p=dirname(pathof(IndividualDisplacements))\ninclude(joinpath(p,\"../examples/helper_functions.jl\"))\nIndividualDisplacements.get_occa_velocity_if_needed()\n𝑃,𝐷,Γ=OCCA_FlowFields(backward_in_time=false)\n\ngrid = RegularLatLonGrid(size=(360, 160, 1), lat=(-80,80), lon=(-180,180), z=(0,-10))","category":"page"},{"location":"generated/global_ocean_2D_example/","page":"Global Ocean Example","title":"Global Ocean Example","text":"Next, we generate a mask from  the land shape information","category":"page"},{"location":"generated/global_ocean_2D_example/","page":"Global Ocean Example","title":"Global Ocean Example","text":"landshape = findall(x -> x == 0.0 ,Γ.Depth[1])\nmask = ones(360,160)\nmask[landshape] .= 0.0\nmask = reshape(mask,360,160,1)\nnothing","category":"page"},{"location":"generated/global_ocean_2D_example/","page":"Global Ocean Example","title":"Global Ocean Example","text":"Then we re-format velocity fields so they can be loaded in to PlanktonSimulation","category":"page"},{"location":"generated/global_ocean_2D_example/","page":"Global Ocean Example","title":"Global Ocean Example","text":"uu=reshape(𝑃.u0[1][2:end-1,2:end-1,1],(360,160,1)) .* grid.dxF[3:end-2, 3:end-2] .* mask\nvv=reshape(𝑃.v0[1][2:end-1,2:end-1,1],(360,160,1)) .* grid.dyF[3:end-2, 3:end-2] .* mask\nvv = hcat(vv,zeros(360)) # for bounded boundary condition\nww=zeros(360,160,2)\n\nuvels = fill(uu, 2)\nvvels = fill(vv, 2)\nwvels = fill(ww, 2)\nuvels = cat(uvels..., dims=4)\nvvels = cat(vvels..., dims=4)\nwvels = cat(wvels..., dims=4)\n\nnothing","category":"page"},{"location":"generated/global_ocean_2D_example/#.-Model-Setup","page":"Global Ocean Example","title":"3. Model Setup","text":"","category":"section"},{"location":"generated/global_ocean_2D_example/","page":"Global Ocean Example","title":"Global Ocean Example","text":"Next we setup the individual-based model by specifying the architecture, grid, number of individuals, parameters, and nutrient initial conditions.","category":"page"},{"location":"generated/global_ocean_2D_example/","page":"Global Ocean Example","title":"Global Ocean Example","text":"model = PlanktonModel(CPU(), grid; N_species = 1, N_individual = 360, max_individuals = 360*8, mask = mask)","category":"page"},{"location":"generated/global_ocean_2D_example/","page":"Global Ocean Example","title":"Global Ocean Example","text":"We also need to setup a runtime simulation to run the model. The simulation includes time step, number of time steps, flow fields that will be used etc.","category":"page"},{"location":"generated/global_ocean_2D_example/","page":"Global Ocean Example","title":"Global Ocean Example","text":"sim = PlanktonSimulation(model, ΔT = 3600, nΔT = 1, vels=(u=uvels, v=vvels, w=wvels), vel_reuse = true)","category":"page"},{"location":"generated/global_ocean_2D_example/#.-Run-the-Model","page":"Global Ocean Example","title":"4. Run the Model","text":"","category":"section"},{"location":"generated/global_ocean_2D_example/","page":"Global Ocean Example","title":"Global Ocean Example","text":"Finaly, we run the model and plot the distribution of individuals as well as nutrient fields We use Plots.jl to plot individuals and nutrient fields.","category":"page"},{"location":"generated/global_ocean_2D_example/","page":"Global Ocean Example","title":"Global Ocean Example","text":"function plot(model::PlanktonModel, uu)\n    # Coordinate arrays for plotting\n    xC, yC = collect(model.grid.xC)[3:end-2], collect(model.grid.yC)[3:end-2]\n\n    # heatmap of the flow field\n    fl_plot = Plots.contourf(xC, yC, uu', xlabel=\"x (m)\", ylabel=\"y (m)\", color=:balance, fmt=:png, colorbar=false)\n\n    # a scatter plot embeded in the flow fields\n    px = Array(model.individuals.phytos.sp1.data.x)\n    py = Array(model.individuals.phytos.sp1.data.y)\n    Plots.scatter!(fl_plot, px, py, ms=3, color = :red, legend=:none)\n\n    # DOC field\n    trac1 = Plots.heatmap(xC, yC, Array(model.nutrients.DOC.data)[3:end-2,3:end-2,3]', xlabel=\"x (m)\", ylabel=\"y (m)\", clims=(0.5, 1.1), fmt=:png)\n\n    # Arrange the plots side-by-side.\n    plt = Plots.plot(fl_plot, trac1, size=(1200, 400),\n        title=[lpad(model.t÷86400,2,\"0\")*\"day \"*lpad(model.t÷3600-24*(model.t÷86400),2,\"0\")*\"hour\" \"DOC (mmolC/L)\"])\n\n    return plt\nend","category":"page"},{"location":"generated/global_ocean_2D_example/","page":"Global Ocean Example","title":"Global Ocean Example","text":"We run the model for 24 time steps (1 hour per time step) and plot the individuals and DOC field.","category":"page"},{"location":"generated/global_ocean_2D_example/","page":"Global Ocean Example","title":"Global Ocean Example","text":"for i in 1:24\n    update!(sim)\nend","category":"page"},{"location":"generated/global_ocean_2D_example/","page":"Global Ocean Example","title":"Global Ocean Example","text":"We plot the current state of the model","category":"page"},{"location":"generated/global_ocean_2D_example/","page":"Global Ocean Example","title":"Global Ocean Example","text":"u_plot = uu[:,:,1]\nu_plot[landshape] .= NaN\nplot(model, u_plot)","category":"page"},{"location":"generated/global_ocean_2D_example/","page":"Global Ocean Example","title":"Global Ocean Example","text":"Or you can use the following code to generate an animation like below. Please note that the following simulation is run for a year.","category":"page"},{"location":"generated/global_ocean_2D_example/","page":"Global Ocean Example","title":"Global Ocean Example","text":"anim = @animate for i in 1:120\n  update!(sim)\n  plot(model)\nend\ngif(anim, \"anim_fps15.gif\", fps = 15)","category":"page"},{"location":"generated/global_ocean_2D_example/","page":"Global Ocean Example","title":"Global Ocean Example","text":"(Image: animation)","category":"page"},{"location":"generated/global_ocean_2D_example/","page":"Global Ocean Example","title":"Global Ocean Example","text":"","category":"page"},{"location":"generated/global_ocean_2D_example/","page":"Global Ocean Example","title":"Global Ocean Example","text":"This page was generated using Literate.jl.","category":"page"},{"location":"model_run/#Model-Simulation","page":"Model Simulation","title":"Model Simulation","text":"","category":"section"},{"location":"model_run/","page":"Model Simulation","title":"Model Simulation","text":"A PlanktonSimulation includes a PlanktonModel and its time steps nΔT, ΔT. It will time step the PlanktonModel by calling update!.","category":"page"},{"location":"model_run/","page":"Model Simulation","title":"Model Simulation","text":"PlanktonSimulation","category":"page"},{"location":"model_run/#PlanktonIndividuals.PlanktonSimulation","page":"Model Simulation","title":"PlanktonIndividuals.PlanktonSimulation","text":"PlanktonSimulation(model; ΔT, nΔT,\n                   PARF_path = PlanktonIndividuals.default_PAR,\n                   temp_path = PlanktonIndividuals.default_temperature,\n                   diags = nothing,\n                   vels = (;),\n                   res_dir = nothing\n                   save_individuals = nothing,\n                   vel_reuse = false\n                   )\n\nGenerate a PlanktonSimulation data structure.\n\nKeyword Arguments (Required)\n\nΔT : time step in second.\nnΔT : number of time steps.\n\nKeyword Arguments (Optional)\n\nPARF_path and temp_path : External forcings of PAR and temperature. Hourly data of a single day is required (25 data points in total).\ndiags : Diagnostics of the simulation generated by PlanktonDiagnostics.\nres_dir : Create a directory to store results, nothing by default.\nvels : The velocity fields for nutrient fields and individuals. nothing means no velocities                    will be applied in the simulation. Otherwise, vels mush be a NamedTuple containing                    all u, v, and w. Each of u, v, and w must be an 4D-Array of                     (Nx, Ny, Nz, nΔT+1) elements, excluding halo points. N+1 is required for bounded direction.\nsave_individuals : save individuals every Int64 time steps, do not save individuals if Nothing.\nvel_reuse : reuse the provided velocity fields if true.\n\n\n\n\n\n","category":"type"},{"location":"model_run/#Model-Diagnostics","page":"Model Simulation","title":"Model Diagnostics","text":"","category":"section"},{"location":"model_run/","page":"Model Simulation","title":"Model Simulation","text":"PlanktonDiagnostics","category":"page"},{"location":"model_run/#PlanktonIndividuals.PlanktonDiagnostics","page":"Model Simulation","title":"PlanktonIndividuals.PlanktonDiagnostics","text":"PlanktonDiagnostics(model; tracer=(:PAR, :NH4, :NO3, :DOC),\n                    plankton=(:num, :graz, :mort, :dvid),\n                    frequency = 1)\n\nGenerate a PlanktonDiagnostics structure.\n\nKeyword Arguments (Optional)\n\ntracer : a Tuple containing the names of nutrient fields to be diagnosed.\nplankton : a Tuple containing the names of physiological processes of plankton individuals to be diagnosed.\nfrequency : frequency of diagnostics (in numbers of time steps), diagnose every time step by default.\n\n\n\n\n\n","category":"type"},{"location":"model_run/","page":"Model Simulation","title":"Model Simulation","text":"Model diagnostics are specified by tracer (for tracers) and plankton (for individuals). Diagnostics for individuals are aggregated into tracer fields.","category":"page"},{"location":"model_run/","page":"Model Simulation","title":"Model Simulation","text":"A full list of available diagnostics are provided below:","category":"page"},{"location":"model_run/","page":"Model Simulation","title":"Model Simulation","text":"tracer = (:PAR, :DIC, :NH4, :NO3, :PO4, :DOC, :DON, :DOP, :POC, :PON, :POP)\n\nplankton = (:num,  # number of individuals\n            :graz, # number of grazed individuals\n            :mort, # number of died individuals\n            :dvid, # number of divided individuals\n            :PS,   # photosynthesis rate\n            :BS,   # biosynthesis rate\n            :VDOC, # DOC uptake rate\n            :VHN4, # NH4 uptake rate\n            :VNO3, # NO3 uptake rate\n            :VPO4, # PO4 uptake rate\n            :resp, # respiration rate\n            :exu,  # exudation rate\n            :Bm,   # functional biomass\n            :Cq,   # Carbon pool\n            :Nq,   # Nitrogen pool\n            :Pq,   # Phosphorus pool\n            :chl   # Chla\n            )","category":"page"},{"location":"model_run/#Output","page":"Model Simulation","title":"Output","text":"","category":"section"},{"location":"model_run/","page":"Model Simulation","title":"Model Simulation","text":"Currently, we only support two types of output which are both save in JLD2 files. The first type of output is for individuals. The current state of all the individuals at each time step of a PlanktonSimulation will be saved in a single file named individuals.jld2. An example structure of individuals.jld2 is shown below.","category":"page"},{"location":"model_run/","page":"Model Simulation","title":"Model Simulation","text":"julia> jldopen(\"results/individuals.jld2\") # only the location and cell size is saved for now\nJLDFile /home/zhenwu/PI_GPU/results/individuals.jld2 (read-only)\n ├─📂 0000000060\n │  └─📂 sp1\n │     ├─🔢 x\n │     ├─🔢 y\n │     ├─🔢 z\n │     └─🔢 Sz\n └─📂 0000000120\n    └─📂 sp1\n       ├─🔢 x\n       ├─🔢 y\n       ├─🔢 z\n       └─🔢 Sz","category":"page"},{"location":"model_run/","page":"Model Simulation","title":"Model Simulation","text":"The second type of output is for diagnostics. individuals at each time step will be aggregated into tracer fields. The frequency of diagnostics is specified by frequency in PlanktonDiagnostics. Only diagnostics specified by tracer and plankton in PlanktonDiagnostics will be saved. All the diagnostics of a PlanktonSimulation will be saved in a single file named diags.jld2. An example structure of diags.jld2 is shown below.","category":"page"},{"location":"model_run/","page":"Model Simulation","title":"Model Simulation","text":"julia> jldopen(\"results/diags.jld2\")\nJLDFile /home/zhenwu/PI_GPU/results/diags.jld2 (read-only)\n ├─📂 0000000060\n │  ├─📂 nut\n │  │  ├─🔢 PAR\n │  │  ├─🔢 DOC\n │  │  ├─🔢 NH4\n │  │  └─🔢 NO3\n │  └─📂 sp1\n │     ├─🔢 num\n │     ├─🔢 graz\n │     ├─🔢 mort\n │     └─🔢 dvid\n └─📂 0000000120\n    ├─📂 nut\n    │  ├─🔢 PAR\n    │  ├─🔢 DOC\n    │  ├─🔢 NH4\n    │  └─🔢 NO3\n    └─📂 sp1\n       ├─🔢 num\n       ├─🔢 graz\n       ├─🔢 mort\n       └─🔢 dvid","category":"page"},{"location":"gpu_support/#GPU-Support","page":"GPU Support","title":"GPU Support","text":"","category":"section"},{"location":"gpu_support/","page":"GPU Support","title":"GPU Support","text":"PlanktonIndividuals.jl has support from CUDA.jl and KernelAbstractions.jl to be able to run on graphical processing unit (GPU) for higher performance. Depending on the combination of CPU and GPU you have, a speedup of 35x is possible. Please see Benchmarks for more details.","category":"page"},{"location":"gpu_support/#How-to-use-a-GPU","page":"GPU Support","title":"How to use a GPU","text":"","category":"section"},{"location":"gpu_support/","page":"GPU Support","title":"GPU Support","text":"To use a GPU to run PlanktonIndividuals.jl is easy. Users do not need to rewrite the setup or simulation script to change the architecture to run on. See Architecture for detailed instructions on setting up a model on GPU.","category":"page"},{"location":"gpu_support/","page":"GPU Support","title":"GPU Support","text":"tip: Running on GPUs\nIf you are having issues with running PlanktonIndividuals on a GPU, please open an issue","category":"page"},{"location":"gpu_support/#When-to-use-a-GPU","page":"GPU Support","title":"When to use a GPU","text":"","category":"section"},{"location":"gpu_support/","page":"GPU Support","title":"GPU Support","text":"GPU is very useful when running large simulations (either large domain or huge number of individuals, or both). If you simulate over 10,000 individuals, you will probably benefit form GPU. Please note, GPU is usually memory-limited, that is to say, you will probably fill up the memory on GPU long before the model slows down.","category":"page"},{"location":"gpu_support/","page":"GPU Support","title":"GPU Support","text":"Individuals take up a large amount of GPU memory due to complicated physiological processes and diagnostic demand. For now, please do not try more than 50,000 individuals for a 12GB GPU.","category":"page"},{"location":"gpu_support/#GPU-resources","page":"GPU Support","title":"GPU resources","text":"","category":"section"},{"location":"gpu_support/","page":"GPU Support","title":"GPU Support","text":"There are a few resources you can try to acquire a GPU from.","category":"page"},{"location":"gpu_support/","page":"GPU Support","title":"GPU Support","text":"Google Colab provides GPUs but you need to install Julia manually. Please see this post on the Julia Discourse for detailed instructions.\nCode Ocean also has GPU support. You can use \"Ubuntu Linux with GPU support (18.04.3)\" but you still have to install Julia manually.","category":"page"},{"location":"generated/surface_mixing_3D_example/","page":"Three-Dimensional Domain","title":"Three-Dimensional Domain","text":"EditURL = \"https://github.com/JuliaOcean/PlanktonIndividuals.jl/blob/master/examples/surface_mixing_3D_example.jl\"","category":"page"},{"location":"generated/surface_mixing_3D_example/#A-3-Dimensional-Surface-Mixing-Example","page":"Three-Dimensional Domain","title":"A 3-Dimensional Surface Mixing Example","text":"","category":"section"},{"location":"generated/surface_mixing_3D_example/","page":"Three-Dimensional Domain","title":"Three-Dimensional Domain","text":"Here we simulate phytoplankton cells as Lagrangian particles in a 3D flow field generated by Oceananigans.jl. The domain is periodic in both directions horizontally and bounded in vertical direction.","category":"page"},{"location":"generated/surface_mixing_3D_example/#.-Import-packages","page":"Three-Dimensional Domain","title":"1. Import packages","text":"","category":"section"},{"location":"generated/surface_mixing_3D_example/","page":"Three-Dimensional Domain","title":"Three-Dimensional Domain","text":"using PlanktonIndividuals, Plots, JLD2","category":"page"},{"location":"generated/surface_mixing_3D_example/#.-Generate-Flow-Fields","page":"Three-Dimensional Domain","title":"2. Generate Flow Fields","text":"","category":"section"},{"location":"generated/surface_mixing_3D_example/","page":"Three-Dimensional Domain","title":"Three-Dimensional Domain","text":"First we'll generate grid information","category":"page"},{"location":"generated/surface_mixing_3D_example/","page":"Three-Dimensional Domain","title":"Three-Dimensional Domain","text":"grid = RegularRectilinearGrid(size=(32, 32, 32), spacing=(4, 4, 4))","category":"page"},{"location":"generated/surface_mixing_3D_example/","page":"Three-Dimensional Domain","title":"Three-Dimensional Domain","text":"We use Oceananigans.jl to generate flow fields. Script used here.","category":"page"},{"location":"generated/surface_mixing_3D_example/","page":"Three-Dimensional Domain","title":"Three-Dimensional Domain","text":"Then we read in the velocity fields","category":"page"},{"location":"generated/surface_mixing_3D_example/","page":"Three-Dimensional Domain","title":"Three-Dimensional Domain","text":"vels_file = jldopen(PlanktonIndividuals.surface_mixing_vels,\"r\")\niterations = parse.(Int, keys(vels_file[\"timeseries/t\"]))\ntimes = [vels_file[\"timeseries/t/$iter\"] for iter in iterations]\nu = zeros(32,32,32,length(iterations))\nv = zeros(32,32,32,length(iterations))\nw = zeros(32,32,33,length(iterations))\nfor (i, iter) in enumerate(iterations)\n    u[:,:,:,i] .= reverse(vels_file[\"timeseries/u/$iter\"], dims=3)\n    v[:,:,:,i] .= reverse(vels_file[\"timeseries/v/$iter\"], dims=3)\n    w[:,:,:,i] .= reverse(vels_file[\"timeseries/w/$iter\"], dims=3)\nend","category":"page"},{"location":"generated/surface_mixing_3D_example/#.-Model-Setup","page":"Three-Dimensional Domain","title":"3. Model Setup","text":"","category":"section"},{"location":"generated/surface_mixing_3D_example/","page":"Three-Dimensional Domain","title":"Three-Dimensional Domain","text":"Next we setup the individual-based model by specifying the architecture, grid, number of individuals, parameters, and nutrient initial conditions.","category":"page"},{"location":"generated/surface_mixing_3D_example/","page":"Three-Dimensional Domain","title":"Three-Dimensional Domain","text":"model = PlanktonModel(CPU(), grid; N_species = 1, N_individual = 2^8, max_individuals = 2^8*8)","category":"page"},{"location":"generated/surface_mixing_3D_example/","page":"Three-Dimensional Domain","title":"Three-Dimensional Domain","text":"We also need to setup a runtime simulation to run the model. The simulation includes time step, number of time steps, flow fields that will be used etc.","category":"page"},{"location":"generated/surface_mixing_3D_example/","page":"Three-Dimensional Domain","title":"Three-Dimensional Domain","text":"sim = PlanktonSimulation(model, ΔT = 60, nΔT = 1, vels=(u=u, v=v, w=w))","category":"page"},{"location":"generated/surface_mixing_3D_example/#.-Run-the-Model","page":"Three-Dimensional Domain","title":"4. Run the Model","text":"","category":"section"},{"location":"generated/surface_mixing_3D_example/","page":"Three-Dimensional Domain","title":"Three-Dimensional Domain","text":"Finaly, we run the model and plot the distribution of individuals as well as nutrient fields We use Plots.jl to plot individuals and a slice of nutrient fields.","category":"page"},{"location":"generated/surface_mixing_3D_example/","page":"Three-Dimensional Domain","title":"Three-Dimensional Domain","text":"function plot(model::PlanktonModel)\n    # Coordinate arrays for plotting\n    xC, zC = collect(model.grid.xC)[3:34], collect(model.grid.zC)[3:34]\n\n    # a scatter plot embeded in the flow fields\n    px = Array(model.individuals.phytos.sp1.data.x)\n    py = Array(model.individuals.phytos.sp1.data.y)\n    pz = Array(model.individuals.phytos.sp1.data.z)\n    p_plot = Plots.scatter(px, py, pz, xlims=(0,128), ylims=(0,128), zlims=(-128,1), ms=5, color = :red, legend=:none, fmt=:png)\n\n    # the middle slice of DOC field\n    trac1 = Plots.heatmap(xC, reverse(zC), rotl90(Array(model.nutrients.DOC.data)[3:34,18,3:34]), xlabel=\"x (m)\", ylabel=\"z (m)\", clims=(0.5, 1.1), fmt=:png)\n\n    # Arrange the plots side-by-side.\n    plt = Plots.plot(p_plot, trac1, size=(800, 400),\n        title=[lpad(model.t÷86400,2,\"0\")*\"day \"*lpad(model.t÷3600-24*(model.t÷86400),2,\"0\")*\"hour\" \"DOC (mmolC/L)\"])\n\n    return plt\nend","category":"page"},{"location":"generated/surface_mixing_3D_example/","page":"Three-Dimensional Domain","title":"Three-Dimensional Domain","text":"We run the model for 60 time steps (1 hour) and plot the individuals and DOC field.","category":"page"},{"location":"generated/surface_mixing_3D_example/","page":"Three-Dimensional Domain","title":"Three-Dimensional Domain","text":"for i in 1:60\n    update!(sim)\nend\n\nplot(model)","category":"page"},{"location":"generated/surface_mixing_3D_example/","page":"Three-Dimensional Domain","title":"Three-Dimensional Domain","text":"Or you can use the following code to generate an animation like below","category":"page"},{"location":"generated/surface_mixing_3D_example/","page":"Three-Dimensional Domain","title":"Three-Dimensional Domain","text":"anim = @animate for i in 1:60\n   update!(sim)\n   plot(model)\nend\ngif(anim, \"anim_fps15.gif\", fps = 15)","category":"page"},{"location":"generated/surface_mixing_3D_example/","page":"Three-Dimensional Domain","title":"Three-Dimensional Domain","text":"(Image: animation)","category":"page"},{"location":"generated/surface_mixing_3D_example/","page":"Three-Dimensional Domain","title":"Three-Dimensional Domain","text":"","category":"page"},{"location":"generated/surface_mixing_3D_example/","page":"Three-Dimensional Domain","title":"Three-Dimensional Domain","text":"This page was generated using Literate.jl.","category":"page"},{"location":"phyto_equations/#Phytoplankton-Physiology","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"","category":"section"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"The various resources and processes are summarized in the schematic below, and further detail is provided in the following sub-sections.","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"(Image: skematic)","category":"page"},{"location":"phyto_equations/#State-Variables","page":"Phytoplankton Physiology","title":"State Variables","text":"","category":"section"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"8 state variables are simulated in each phytoplankton individual (see table below)","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"Symbol Unit Description\nSz  cell size\nBm mmolCcell functional biomass pool in C\nCq mmolCcell C reserve\nNq mmolNcell N reserve\nPq mmolPcell P reserve\nchl mgChlcell Chla pool\ngen  generation\nage hour age of the individual","category":"page"},{"location":"phyto_equations/#Photosynthesis","page":"Phytoplankton Physiology","title":"Photosynthesis","text":"","category":"section"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"The parameterization for photosynthesis is shown below.","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"PC_max is scaled by a power-law relationship of cell size (Sz).","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"PC_max= PCmax cdot Sz^PC_b","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"PC=PC_maxcdot (1-e^frac-alpha cdot Icdot ChlPC_maxcdot Bm)","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"PS=PC cdot Bm","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"PS is cell-specific photosynthesis rate (mmol C/cell/s).","category":"page"},{"location":"phyto_equations/#Nutrient-Uptake","page":"Phytoplankton Physiology","title":"Nutrient Uptake","text":"","category":"section"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"The uptakes of various nutrients include intracellular nutrient limitation:","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"beginalign\nVNH4_max = VNH4max cdot Sz^VN_b nonumber \nVNO3_max = VNO3max cdot Sz^VN_b nonumber \nVPO4_max = VPO4max cdot Sz^VP_b nonumber\nendalign","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"beginalign\nQ_N = (Nq + Bm cdot R_NC)  (Cq + Bm) nonumber \nQ_P = (Pq + Bm cdot R_PC)  (Cq + Bm) nonumber\nendalign","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"beginalign\nregQ_N = biggfracNqmax-Q_NNqmax - Nqminbigg_0^1 nonumber \nregQ_P = biggfracPqmax-Q_PPqmax - Pqminbigg_0^1 nonumber\nendalign","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"beginalign\nVNH4 = VNH4_maxcdot regQ_NcdotfracNH4NH4+K_NH4^satcdot Bm nonumber \nVNO3 = VNO3_maxcdot regQ_NcdotfracNO3NO3+K_NO3^satcdot Bm nonumber \nVPO4 = VPO4_maxcdot regQ_PcdotfracPO4PO4+K_PO4^satcdot Bm nonumber\nendalign","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"VNH4, VNO3, and VPO4 are cell-specific uptake rates (mmol N/cell/s or mmol P/cell/s).","category":"page"},{"location":"phyto_equations/#Reserve-Update","page":"Phytoplankton Physiology","title":"Reserve Update","text":"","category":"section"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"Model first updates C, N, and P reserves based on photosynthesis rate (PS) and nutrient uptake rates (VNH4, VNO3, and VPO4). The result is used to calculate the biosynthesis and excretion rates.","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"beginalign\nCq = Cq+PS cdot Delta T nonumber \nNq = Nq+VNO3+VNH4 cdot Delta T nonumber \nPq = Pq+VPO4 cdot Delta T nonumber\nendalign","category":"page"},{"location":"phyto_equations/#Biosynthesis","page":"Phytoplankton Physiology","title":"Biosynthesis","text":"","category":"section"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"Potential biosynthesis rates based on C, N, P quotas are calculated below.","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"k_mtb= kmtb_max cdot Sz^kmtb_b","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"beginalign\nBS_C = Cq cdot k_mtb nonumber \nBS_N = NqR_NC cdot k_mtb nonumber \nBS_P = PqR_PC cdot k_mtb nonumber\nendalign","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"BS = min(BS_C BS_N BS_P)","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"ExuC = BS_C - BS","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"The minimum of these rates gives the actual biosynthesis rate, BS (mmol C/cell/s), and the difference between carbon-based biosynthesis rate and BS gives the excretion rate, ExuC (mmol C/cell/s).","category":"page"},{"location":"phyto_equations/#Chlorophyll-Synthesis","page":"Phytoplankton Physiology","title":"Chlorophyll Synthesis","text":"","category":"section"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"S_chl = rho_chl * BS * R_NC","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"beginequation\nrho_chl =\n    begincases\n        chlN * fracPC*Bmalpha I cdot chl  quad alpha I  0\n        0  quad else\n    endcases nonumber\nendequation","category":"page"},{"location":"phyto_equations/#Respiration","page":"Phytoplankton Physiology","title":"Respiration","text":"","category":"section"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"Respir = respir_a cdot Sz^respir_b cdot Bm","category":"page"},{"location":"phyto_equations/#Biomass-Update","page":"Phytoplankton Physiology","title":"Biomass Update","text":"","category":"section"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"Biosynthesis yields a biomass update and corresponding updates in nutrients. The carbon reserve is further modified by respiration.","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"beginalign\nBm  = Bm + BS cdot Delta T nonumber \nCq  = Cq - (BS - Respir) cdot Delta T nonumber \nNq  = Nq - BS*R_NC cdot Delta T nonumber \nPq  = Pq - BS*R_PC cdot Delta T nonumber \nchl = chl + S_chl cdot Delta T nonumber\nendalign","category":"page"},{"location":"phyto_equations/#Cell-division","page":"Phytoplankton Physiology","title":"Cell division","text":"","category":"section"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"Cell size, Sz, is used to indicate cell division. For the smallest cell, Sz=10 and Bm=Cquota. Cells start to divide at Sz=20 and the probability of individual cell division is given by a sigmoidal function of Sz.","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"Sz = (Bm + Cq)  Cquota","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"P_divide = rand(Bernoulli(P_dvid*(tanh(stp_dvid*(Sz-b))+1)))","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"P_divide is computed every hour no matter what time step the model is.","category":"page"},{"location":"phyto_equations/#Parameters","page":"Phytoplankton Physiology","title":"Parameters","text":"","category":"section"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"Symbol Param Default Unit Description\nPCmax PCmax 4.2e-5 s^-1 Maximum photosynthesis rate\nVNH4max VNH4max 6.9e-6 s^-1 Maximum ammonium uptake rate\nVNO3max VNO3max 6.9e-6 s^-1 Maximum nitrate uptake rate\nVPO4max VPO4max 1.2e-6 s^-1 Maximum phosphate uptake rate\nPC_b PC_b 0.6  Shape parameter for PC\nVN_b VN_b 0.6  Shape parameter for VNH4 and VNO3\nVP_b VP_b 0.6  Shape parameter for VPO4\nK^sat_NH4 ksatNH4 0.005 mmolNm^3 Half-saturation constant for NH4\nK^sat_NO3 ksatNO3 0.010 mmolNm^3 Half-saturation constant for NO3\nK^sat_PO4 ksatPO4 0.003 mmolPm^3 Half-saturation constant for PO4\nNqmax Nqmax 0.12 mmolNmmolC Maximum N quota in cell\nNqmin Nqmin 0.05 mmolNmmolC Minimum N quota in cell\nPqmax Pqmax 0.01 mmolPmmolC Maximum P quota in cell\nPqmin Pqmax 0.004 mmolPmmolC Minimum P quota in cell\nR_NC R_NC 16/106 mmolNmmolC N:C ratio in function biomass\nR_PC R_PC 1/106 mmolPmmolC P:C ratio in function biomass\nkmtb_max k_mtb 3.5e-5 s^-1 Maximum metabolic rate\nkmtb_b k_mtb_b 0.25  Shape parameter for k_mtb\nrespir_a respir_a 1.2e-6 s^-1 Maximum respiration rate\nrespir_b respir_b 0.6  Shape parameter for respir_a\nchltextN Chl2N 3.0 mgchlmmolN Maximum Chl:N in cell\nP_dvid P_dvid 5.0e-5 s^-1 Probability of division per second\nstp_dvid stp_dvid 6.0  Steepness of division function","category":"page"},{"location":"examples/#examples-list","page":"List Of Examples","title":"List Of Examples","text":"","category":"section"},{"location":"examples/","page":"List Of Examples","title":"List Of Examples","text":"Pages = [\n    \"generated/0D_experiment.md\",\n    \"generated/vertical_2D_example.md\",\n    \"generated/horizontal_2D_example.md\",\n    \"generated/surface_mixing_3D_example.md\",\n]\nDepth = 2","category":"page"},{"location":"model_description/#model-description","page":"Model Description","title":"Model Description","text":"","category":"section"},{"location":"model_description/","page":"Model Description","title":"Model Description","text":"Pages = [\n    \"phyto_equations.md\",\n    \"bgc_equations.md\",\n]\nDepth = 2","category":"page"},{"location":"generated/0D_experiment/","page":"Lab Experiment","title":"Lab Experiment","text":"EditURL = \"https://github.com/JuliaOcean/PlanktonIndividuals.jl/blob/master/examples/0D_experiment.jl\"","category":"page"},{"location":"generated/0D_experiment/#Simple-Lab-Example","page":"Lab Experiment","title":"Simple Lab Example","text":"","category":"section"},{"location":"generated/0D_experiment/","page":"Lab Experiment","title":"Lab Experiment","text":"Here we simulate phytoplankton cells as individuals in a well mixed reactor, like a lab experiment.","category":"page"},{"location":"generated/0D_experiment/#.-Import-packages","page":"Lab Experiment","title":"1. Import packages","text":"","category":"section"},{"location":"generated/0D_experiment/","page":"Lab Experiment","title":"Lab Experiment","text":"using PlanktonIndividuals, Plots, JLD2\nusing Plots.PlotMeasures","category":"page"},{"location":"generated/0D_experiment/#.-Grid-Setup","page":"Lab Experiment","title":"2. Grid Setup","text":"","category":"section"},{"location":"generated/0D_experiment/","page":"Lab Experiment","title":"Lab Experiment","text":"First we generate grid information (one grid box, 256m thick, and 128x128 in width) and the computational architecture (CPU).","category":"page"},{"location":"generated/0D_experiment/","page":"Lab Experiment","title":"Lab Experiment","text":"arch=CPU()\ngrid = RegularRectilinearGrid(size=(1,1,1), spacing=(128, 128, 256))","category":"page"},{"location":"generated/0D_experiment/#.-Model-Setup","page":"Lab Experiment","title":"3. Model Setup","text":"","category":"section"},{"location":"generated/0D_experiment/","page":"Lab Experiment","title":"Lab Experiment","text":"Next we setup the individual-based model by specifying the computational architecture, grid, plankton community, and diagnostics.","category":"page"},{"location":"generated/0D_experiment/","page":"Lab Experiment","title":"Lab Experiment","text":"model = PlanktonModel(arch, grid; N_species = 1, N_individual = 2^10, max_individuals = 2^10*16)","category":"page"},{"location":"generated/0D_experiment/","page":"Lab Experiment","title":"Lab Experiment","text":"Then we setup diagnostics","category":"page"},{"location":"generated/0D_experiment/","page":"Lab Experiment","title":"Lab Experiment","text":"diags = PlanktonDiagnostics(model; tracer=(:PAR, :NH4, :NO3, :DOC),\n                                   plankton = (:num, :graz, :mort, :dvid, :PS, :BS, :Cq, :chl, :Bm),\n                                   frequency = 1)","category":"page"},{"location":"generated/0D_experiment/","page":"Lab Experiment","title":"Lab Experiment","text":"Finally we setup the duration of the model simulation, a run directory location, and the kind of output we want.","category":"page"},{"location":"generated/0D_experiment/","page":"Lab Experiment","title":"Lab Experiment","text":"ntimesteps = 60 * 24 * 1 # 1 days with time step of 60s\nres_dir = PrepRunDir()\nsim = PlanktonSimulation(model, ΔT = 60, nΔT = ntimesteps,\n                         diags = diags,\n                         res_dir = res_dir,\n                         save_individuals = nothing)","category":"page"},{"location":"generated/0D_experiment/#.-Model-Run","page":"Lab Experiment","title":"4. Model Run","text":"","category":"section"},{"location":"generated/0D_experiment/","page":"Lab Experiment","title":"Lab Experiment","text":"update!(sim)","category":"page"},{"location":"generated/0D_experiment/#.-Results-Vizualization","page":"Lab Experiment","title":"5. Results Vizualization","text":"","category":"section"},{"location":"generated/0D_experiment/","page":"Lab Experiment","title":"Lab Experiment","text":"Empty arrays to store results:","category":"page"},{"location":"generated/0D_experiment/","page":"Lab Experiment","title":"Lab Experiment","text":"num  = zeros(1440)\ndvid = zeros(1440)\nmort = zeros(1440)\nPS   = zeros(1440)\nnothing","category":"page"},{"location":"generated/0D_experiment/","page":"Lab Experiment","title":"Lab Experiment","text":"Read results from output file:","category":"page"},{"location":"generated/0D_experiment/","page":"Lab Experiment","title":"Lab Experiment","text":"path = joinpath(res_dir,\"diags.jld2\")\nfile = jldopen(path, \"r\")\nfor i in 1:1440\n    num[i]  = file[joinpath(lpad(i*60,10,\"0\"),\"sp1\",\"num\")][1,1,1]\n    dvid[i] = file[joinpath(lpad(i*60,10,\"0\"),\"sp1\",\"dvid\")][1,1,1]\n    mort[i] = file[joinpath(lpad(i*60,10,\"0\"),\"sp1\",\"mort\")][1,1,1]\n    PS[i]   = file[joinpath(lpad(i*60,10,\"0\"),\"sp1\",\"PS\")][1,1,1]\nend\nclose(file)","category":"page"},{"location":"generated/0D_experiment/","page":"Lab Experiment","title":"Lab Experiment","text":"Plot results:","category":"page"},{"location":"generated/0D_experiment/","page":"Lab Experiment","title":"Lab Experiment","text":"p1 = plot(collect(1:60:60*1440) ./ 3600, num, title = \"population\", legend=:none, fmt=:png, bottom_margin = 5mm)\np2 = plot(collect(1:60:60*1440) ./ 3600, dvid ./ num .* 60, title = \"division rate (per hour)\", legend=:none, fmt=:png, bottom_margin = 5mm)\np3 = plot(collect(1:60:60*1440) ./ 3600, mort ./ num .* 60, title = \"mortarlity rate (per hour)\", legend=:none, fmt=:png, bottom_margin = 5mm)\np4 = plot(collect(1:60:60*1440) ./ 3600, PS ./ num .* 12 .* 1e12 .* 3600, title = \"photosynthesis rate (fg C/cell/hour)\", legend=:none, fmt=:png, bottom_margin = 5mm)\nplot(p1, p2, p3, p4, layout = (4,1), size=(600,600), titlefont = (12))","category":"page"},{"location":"generated/0D_experiment/","page":"Lab Experiment","title":"Lab Experiment","text":"","category":"page"},{"location":"generated/0D_experiment/","page":"Lab Experiment","title":"Lab Experiment","text":"This page was generated using Literate.jl.","category":"page"},{"location":"bgc_equations/#Biogeochemistry","page":"Biogeochemistry","title":"Biogeochemistry","text":"","category":"section"},{"location":"bgc_equations/","page":"Biogeochemistry","title":"Biogeochemistry","text":"All the Eulerian tracers are advected and diffused by velocity fields provided by PlanktonSimulation. The advection scheme used in the model is Third Order Direct Space-Time with Flux Limiting.","category":"page"},{"location":"bgc_equations/","page":"Biogeochemistry","title":"Biogeochemistry","text":"fracpartial Xpartial t = - nabla cdot (boldsymboluX) + nabla cdot (boldsymbolKnabla X) + S_X","category":"page"},{"location":"bgc_equations/","page":"Biogeochemistry","title":"Biogeochemistry","text":"where boldsymbolu=(uvw), velocity in physical model, boldsymbolK is the mixing coefficient in physical model, and S_X is the source and sink term of tracer X.","category":"page"},{"location":"bgc_equations/","page":"Biogeochemistry","title":"Biogeochemistry","text":"The source and sinks of each tracer,S_X, are different andincluding biological transformations, chemical reactions,and external sources and sinks.","category":"page"},{"location":"bgc_equations/#Carbon-Cycle","page":"Biogeochemistry","title":"Carbon Cycle","text":"","category":"section"},{"location":"bgc_equations/","page":"Biogeochemistry","title":"Biogeochemistry","text":"S_DIC = -sum_j PS_jcdot n_j + k_DOCcdot DOC + F_C","category":"page"},{"location":"bgc_equations/","page":"Biogeochemistry","title":"Biogeochemistry","text":"beginalign\nS_DOC  = k_POC cdot POC + f_Cm cdot sum_j ((Bm_j+Cq_j)cdot n_jm) nonumber\n         quad \n        + f_Cg cdot sum_j ((Bm_j+Cq_j)cdot n_jg) - k_DOC cdot DOC nonumber\nendalign","category":"page"},{"location":"bgc_equations/","page":"Biogeochemistry","title":"Biogeochemistry","text":"beginalign\nS_POC  = (1-f_Cm) cdot sum_j ((Bm_j+Cq_j)cdot n_jm) nonumber\n         quad\n        + (1-f_Cg) cdot sum_j ((Bm_j+Cq_j)cdot n_jg) - k_POC cdot POC nonumber\nendalign","category":"page"},{"location":"bgc_equations/","page":"Biogeochemistry","title":"Biogeochemistry","text":"where n_j is the cell number of species j, n_jm is the dead cell number of species j, n_jg is the grazed cell number of sepcies j.","category":"page"},{"location":"bgc_equations/#Nitrogen-Cycle","page":"Biogeochemistry","title":"Nitrogen Cycle","text":"","category":"section"},{"location":"bgc_equations/","page":"Biogeochemistry","title":"Biogeochemistry","text":"beginalign\nS_HN4 = -sum_j VNH4_jcdot n_j + k_DONcdot DON - k_nitcdot NH4 nonumber\nS_NO3 = -sum_j VNO3_jcdot n_j + k_nitcdot NH4 nonumber\nendalign","category":"page"},{"location":"bgc_equations/","page":"Biogeochemistry","title":"Biogeochemistry","text":"beginalign\nS_DON  = k_PON cdot PON + f_Nm cdot sum_j ((Bm_j*R_NC+Nq_j)cdot n_jm) nonumber\n         quad\n        + f_Ng cdot sum_j ((Bm_j*R_NC+Nq_j)cdot n_jg) - k_DON cdot DON nonumber\nendalign","category":"page"},{"location":"bgc_equations/","page":"Biogeochemistry","title":"Biogeochemistry","text":"beginalign\nS_PON  = (1-f_Nm) cdot sum_j ((Bm_j*R_NC+Nq_j)cdot n_jm) nonumber\n         quad\n        + (1-f_Ng) cdot sum_j ((Bm_j*R_NC+Nq_j)cdot n_jg) - k_PON cdot PON nonumber\nendalign","category":"page"},{"location":"bgc_equations/#Phosphorus-Cycle","page":"Biogeochemistry","title":"Phosphorus Cycle","text":"","category":"section"},{"location":"bgc_equations/","page":"Biogeochemistry","title":"Biogeochemistry","text":"S_PO4 = -sum_j VPO4_jcdot n_j + k_DOPcdot DOP","category":"page"},{"location":"bgc_equations/","page":"Biogeochemistry","title":"Biogeochemistry","text":"beginalign\nS_DOP  = k_POP cdot POP + f_Pm cdot sum_j ((Bm_j*R_PC+Pq_j)cdot n_jm) nonumber \n         quad\n        + f_Pg cdot sum_j ((Bm_j*R_PC+Nq_j)cdot n_jg) - k_DOP cdot DOP nonumber\nendalign","category":"page"},{"location":"bgc_equations/","page":"Biogeochemistry","title":"Biogeochemistry","text":"beginalign\nS_POP  = (1-f_Pm) cdot sum_j ((Bm_j*R_PC+Pq_j)cdot n_jm) nonumber\n         quad\n        + (1-f_Pg) cdot sum_j ((Bm_j*R_PC+Pq_j)cdot n_jg) - k_POP cdot POP nonumber\nendalign","category":"page"},{"location":"bgc_equations/#Parameters","page":"Biogeochemistry","title":"Parameters","text":"","category":"section"},{"location":"bgc_equations/","page":"Biogeochemistry","title":"Biogeochemistry","text":"Symbol Param Default Unit Description\nk_DOC kDOC 3.8e-7 s^-1 Remineralization rate of DOC\nk_DON kDON 3.8e-7 s^-1 Remineralization rate of DON\nk_DOP kDOP 3.8e-7 s^-1 Remineralization rate of DOP\nk_POC kPOC 3.8e-7 s^-1 Remineralization rate of POC\nk_PON kPON 3.8e-7 s^-1 Remineralization rate of PON\nk_POP kPOP 3.8e-7 s^-1 Remineralization rate of POP\nf_Cm mortFracC 0.5  Fraction of dead C goes to DOM\nf_Nm mortFracN 0.5  Fraction of dead N goes to DOM\nf_Pm mortFracP 0.5  Fraction of dead P goes to DOM\nf_Cg grazFracC 0.5  Fraction of grazed C goes to DOM\nf_Ng grazFracN 0.5  Fraction of grazed N goes to DOM\nf_Pg grazFracP 0.5  Fraction of grazed P goes to DOM","category":"page"},{"location":"#PlanktonIndividuals.jl","page":"Home","title":"PlanktonIndividuals.jl","text":"","category":"section"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PlanktonIndividuals.jl is a fast individual-based model written in Julia that can be run on both CPU and GPU. It simulates the life cycle of phytoplankton cells as Lagrangian particles in the ocean while nutrients are represented as Eulerian, density-based tracers using 3rd-order Direct Space-Time with flux limiting advection scheme. The model is used to simulate and interpret the temporal and spacial variations of phytoplankton cell densities and stoichiometry as well as growth and division behaviors induced by diel cycle and physical motions ranging from sub-mesoscale to large scale processes.","category":"page"},{"location":"","page":"Home","title":"Home","text":"PlanktonIndividuals.jl can simulate multiple functional groups of phytoplankton with different growth and division strategies which will illustrate the interactions within and between functional groups. The individuals can be simulated in 0-dimensional domain (like lab experiments) and 1-3 dimensional domains where individuals will be advected by velocities provided by various models or observations.","category":"page"},{"location":"#Getting-Help","page":"Home","title":"Getting Help","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you are interested in using PlanktonIndividuals.jl or are trying to figure out how to use it, please feel free to ask us questions and get in touch!  ","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you're trying to set up a model then maybe you want to check out the examples. Please feel free to open an issue if you have any questions, comments, suggestions, etc!","category":"page"},{"location":"model_setup/#Model-Configuration","page":"Model Configuration","title":"Model Configuration","text":"","category":"section"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"The model configuration is specified within the PlanktonModel data structure. As documented below, the various parameters of a PlanktonModel can all be specified via keyword arguments. Options and features are documented in more detail afterwards (sub-sections) and in the Examples section.","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"PlanktonModel","category":"page"},{"location":"model_setup/#PlanktonIndividuals.PlanktonModel","page":"Model Configuration","title":"PlanktonIndividuals.PlanktonModel","text":"PlanktonModel(arch::Architecture, grid::AbstractGrid;\n              N_species = 1,\n              N_individual = 1024,\n              max_individuals = 8*1024,\n              bgc_params = bgc_params_default(), \n              phyt_params = phyt_params_default(),\n              nut_initial = default_nut_init(),\n              t = 0.0,\n              mask = nothing,\n              )\n\nGenerate a PlanktonModel data structure. \n\nKeyword Arguments (Required)\n\narch : CPU() or GPU(). Computer architecture being used to run the model.\ngrid : a AbstractGrid structure. Discrete grid for the model (resolution and geometry).\n\nKeyword Arguments (Optional)\n\nN_species : Number of species.\nN_individual : Number of individuals per species.\nmax_individuals : Maximum number of individuals per species the model can hold.\nbgc_params : Parameter set for biogeochemical processes modeled in the model.\nphyt_params : Parameter set for physiological processes of individuals modeled in the model.\nnut_initial : The source of initial conditions of nutrient fields, should be either a NamedTuple                           or a Dict containing the file paths pointing to the files of nutrient initial conditions.\nt : Model time, start from 0 by default, in second.\nmask : Mask out the individuals and tracers generated out of the domain, a 3D array with size (Nx, Ny, Nz).\n\n\n\n\n\n","category":"type"},{"location":"model_setup/#Architecture","page":"Model Configuration","title":"Architecture","text":"","category":"section"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"Passing arch = CPU() or arch = GPU() to the PlanktonModel constructor will determine whether the model is time stepped on a CPU or GPU.","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"Users do not need to modify the setup or simulation script to change the architecture to run on. The only thing needs to be changed is arch = CPU() or arch = GPU().","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"tip: Running on GPUs\nIf you are having issues with running PlanktonIndividuals on a GPU, please open an issue","category":"page"},{"location":"model_setup/#Grid","page":"Model Configuration","title":"Grid","text":"","category":"section"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"For now, we only support RegularRectilinearGrid and RegularLatLonGrid with constant grid spacing in each direction (albeit grid spacing can differ between dimensions). Two types of topology is support in horizontal directions (Periodic and Bounded) but only Bounded topology is support in vertical direction.","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"The RegularRectilinearGrid is constructed by specifying its size (Tuple specifying the number of grid points in each dimension) and spacing (Tuple specifying the grid cell width for each dimension).","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"For example, a rectilinear grid with 32 times 64 times 128 grid points and grid spacing of dx=1m, dy=2m, dz=4m is constructed like this:","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"DocTestSetup = quote\n    using PlanktonIndividuals\nend","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"julia> grid = RegularRectilinearGrid(size=(32, 64, 128), spacing=(1.0, 2.0, 4.0))\ndomain: x ∈ [0.0, 32.0], y ∈ [0.0, 128.0], z ∈ [0.0, -512.0]\ntopology (Tx, Ty, Tz):     (Periodic, Periodic, Bounded)\nresolution (Nx, Ny, Nz):   (32, 64, 128)\nhalo size (Hx, Hy, Hz):    (2, 2, 2)\ngrid spacing (Δx, Δy, Δz): (1.0, 2.0, 4.0)","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"The RegularLatLonGrid is constructed by specifying its size (Tuple specifying the number of grid points in each dimension) and lat, lon, z (Tuple specifying the start and end points).","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"For example, a global domain from 80S to 80N, 180W to 180E and 200m depth with spacing of 1 degree horizontally and 10m vertically is constructed like this:","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"julia> grid = RegularLatLonGrid(size=(360,160,20), lat = (-80,80), lon = (-180,180), z = (0,-200)) \ndomain: x ∈ [-180.0, 180.0], y ∈ [-80.0, 80.0], z ∈ [0.0, -200.0]\ntopology (Tx, Ty, Tz):     (Periodic, Bounded, Bounded)\nresolution (Nx, Ny, Nz):   (360, 160, 20)\nhalo size (Hx, Hy, Hz):    (2, 2, 2)\ngrid spacing (Δx, Δy, Δz): (1.0, 1.0, 10.0)","category":"page"},{"location":"model_setup/#Individuals","page":"Model Configuration","title":"Individuals","text":"","category":"section"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"The number of species can be specified via N_species = 1. The number of individuals per species can be specified via N_individual = 1024. The maximum number of individuals per species that the model can hold is specified via max_individuals = 8*1024.","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"tip: The maximum number of species\nThe maximum number of species that can be modeled is 9.","category":"page"},{"location":"model_setup/#Parameters","page":"Model Configuration","title":"Parameters","text":"","category":"section"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"Default parameters are generated by two functions here as dictionaries (Dicts). bgc_params contains the parameters for biogeochemical cycls. phyt_params contains the parameters for phytoplankton individuals.","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"Values of the parameters can be changed using update_bgc_params and update_phyt_params.","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"In the example shown below, we change the value of kDOC, which is the remineralization rate for DOC:","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"julia> new_params = Dict(\"kDOC\" => 0.01) # no need to include all parameters\nDict{String, Float64} with 1 entry:\n  \"kDOC\" => 0.01\n\njulia> update_bgc_params(new_params)\nDict{String, Float64} with 13 entries:\n  \"kc\"   => 0.04\n  \"kDOC\" => 0.01\n  \"κhP\"  => 0.0\n  \"kPON\" => 3.85802e-7\n  \"kDON\" => 3.85802e-7\n  \"κh\"   => 0.0\n  \"κv\"   => 0.0\n  \"kDOP\" => 3.85802e-7\n  \"kPOP\" => 3.85802e-7\n  \"kw\"   => 0.046\n  \"Nit\"  => 3.85802e-7\n  \"kPOC\" => 3.85802e-7\n  \"κvP\"  => 0.0","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"phyt_params can be changed in the same way.","category":"page"},{"location":"model_setup/#Nutrient-fields","page":"Model Configuration","title":"Nutrient fields","text":"","category":"section"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"Nutrient fields included in the model are listed below. The initial conditions of the nutrient fields are generated by generate_nutrients either from a 10-element NamedTuple or a Dict containing the file paths pointing to the files of existing nutrient initial conditions.","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"Name Unit Description\nDIC mmolCm^3 concentration of dissolved inorganic carbon\nNH4 mmolNm^3 concentration of ammonia\nNO3 mmolNm^3 concentration of nitrate\nPO4 mmolPm^3 concentration of phosphate\nDOC mmolCm^3 concentration of dissolved organic carbon\nDON mmolNm^3 concentration of dissolved organic nitrogen\nDOP mmolPm^3 concentration of dissolved organic phosphorus\nPOC mmolCm^3 concentration of particulate organic carbon\nPON mmolNm^3 concentration of particulate organic nitrogen\nPOP mmolPm^3 concentration of particulate organic phosphorus","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"tip: Noisy Initial Conditions\nA 20% random noise is included but only if the initial conditions are generated by NamedTuple.","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"tip: Nutrient Fields\nThe initial conditions of all the nutrient fields should be non-negative.","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"An example of the NamedTuple is listed below:","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"nut_init = (DIC=20.0, NH4=0.2, NO3=0.5, PO4=0.03, DOC=1.0, DON=0.1, DOP=0.05, POC=0.0, PON=0.0,POP=0.0)","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"And example of the Dict is listed below:","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"nut_init = Dict(\n    DIC => \"path/to/DIC.bin\",\n    NH4 => \"path/to/NH4.bin\",\n    NO3 => \"path/to/NO3.bin\",\n    PO4 => \"path/to/PO4.bin\",\n    DOC => \"path/to/DOC.bin\",\n    DON => \"path/to/DON.bin\",\n    DOP => \"path/to/DOP.bin\",\n    POC => \"path/to/POC.bin\",\n    PON => \"path/to/PON.bin\",\n    POP => \"path/to/POP.bin\")","category":"page"}]
}
