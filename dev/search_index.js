var documenterSearchIndex = {"docs":
[{"location":"benchmarks/#Performace-benchmarks","page":"Benchmarks","title":"Performace benchmarks","text":"","category":"section"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"Here we benchmark the model performance in two Architectures. The number of individuals used in the benchmark are (2, 2^5, 2^10, 2^15). And we also use different grid resolutions in 2-Dimensional and 3-Dimensional model setup.","category":"page"},{"location":"benchmarks/#Dimensional-model","page":"Benchmarks","title":"0-Dimensional model","text":"","category":"section"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"This is a benchmark of a simple 0-Dimensional model setup without advection of Eulerian tracers. However, the advection of individuals still take the same amount of time whether the velocity field is provided or not.","category":"page"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"PlanktonIndividuals v0.2.0\nJulia Version 1.6.0\nCommit f9720dc2eb (2021-03-24 12:55 UTC)\nPlatform Info:\n  OS: Linux (x86_64-pc-linux-gnu)\n  CPU: Intel(R) Xeon(R) CPU E5-2680 v4 @ 2.40GHz\n  WORD_SIZE: 64\n  LIBM: libopenlibm\n  LLVM: libLLVM-11.0.1 (ORCJIT, broadwell)\n  GPU: Tesla P100-PCIE-12GB","category":"page"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"Arch N min mean max memory allocs\nCPU 2 1.066 ms 1.231 ms 2.018 ms 610.95 KiB 4385\nCPU 32 1.238 ms 1.390 ms 1.977 ms 610.95 KiB 4385\nCPU 1024 8.462 ms 8.663 ms 9.398 ms 610.89 KiB 4381\nCPU 32768 226.577 ms 231.720 ms 264.892 ms 610.89 KiB 4381\nGPU 2 7.221 ms 8.179 ms 9.740 ms 1.57 MiB 21480\nGPU 32 7.274 ms 7.624 ms 8.229 ms 1.57 MiB 21471\nGPU 1024 7.305 ms 7.647 ms 8.606 ms 1.57 MiB 21471\nGPU 32768 7.871 ms 12.539 ms 24.820 ms 1.57 MiB 21547","category":"page"},{"location":"benchmarks/#Dimensional-model-2","page":"Benchmarks","title":"2-Dimensional model","text":"","category":"section"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"This is the benchmark of a 2-Dimensional model setup with (Ns, 1, Ns) grid cells. Here Ns = [32, 64, 128].","category":"page"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"PlanktonIndividuals v0.2.0\nJulia Version 1.6.0\nCommit f9720dc2eb (2021-03-24 12:55 UTC)\nPlatform Info:\n  OS: Linux (x86_64-pc-linux-gnu)\n  CPU: Intel(R) Xeon(R) CPU E5-2680 v4 @ 2.40GHz\n  WORD_SIZE: 64\n  LIBM: libopenlibm\n  LLVM: libLLVM-11.0.1 (ORCJIT, broadwell)\n  GPU: Tesla P100-PCIE-12GB","category":"page"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"Arch N Ns min mean max memory allocs\nCPU 2 32 4.996 ms 5.649 ms 5.808 ms 2.83 MiB 4438\nCPU 2 64 14.257 ms 16.509 ms 17.855 ms 8.82 MiB 4438\nCPU 2 128 52.537 ms 56.669 ms 72.511 ms 31.85 MiB 4438\nCPU 32 32 4.884 ms 5.741 ms 6.073 ms 2.83 MiB 4438\nCPU 32 64 14.430 ms 16.662 ms 17.849 ms 8.82 MiB 4438\nCPU 32 128 52.890 ms 53.086 ms 53.704 ms 31.85 MiB 4438\nCPU 1024 32 11.078 ms 12.091 ms 13.222 ms 2.83 MiB 4434\nCPU 1024 64 24.283 ms 24.721 ms 26.330 ms 8.82 MiB 4438\nCPU 1024 128 59.773 ms 60.021 ms 60.935 ms 31.85 MiB 4438\nCPU 32768 32 211.933 ms 216.529 ms 241.320 ms 2.83 MiB 4434\nCPU 32768 64 227.456 ms 238.156 ms 285.987 ms 8.82 MiB 4438\nCPU 32768 128 269.776 ms 292.217 ms 329.241 ms 31.85 MiB 4438\nGPU 2 32 7.423 ms 9.114 ms 14.216 ms 1.60 MiB 20939\nGPU 2 64 7.704 ms 8.495 ms 12.629 ms 1.69 MiB 20947\nGPU 2 128 8.074 ms 8.476 ms 9.231 ms 2.07 MiB 20947\nGPU 32 32 7.121 ms 7.546 ms 8.266 ms 1.60 MiB 20939\nGPU 32 64 7.822 ms 8.457 ms 11.789 ms 1.69 MiB 20947\nGPU 32 128 8.189 ms 8.508 ms 9.170 ms 2.07 MiB 20947\nGPU 1024 32 7.155 ms 7.678 ms 8.766 ms 1.60 MiB 20939\nGPU 1024 64 7.853 ms 8.174 ms 9.340 ms 1.69 MiB 20947\nGPU 1024 128 8.189 ms 8.525 ms 9.471 ms 2.07 MiB 20947\nGPU 32768 32 8.120 ms 10.474 ms 18.289 ms 1.60 MiB 21079\nGPU 32768 64 8.214 ms 11.399 ms 21.621 ms 1.69 MiB 21083\nGPU 32768 128 9.314 ms 12.102 ms 20.027 ms 2.07 MiB 21083","category":"page"},{"location":"benchmarks/#Dimensional-model-3","page":"Benchmarks","title":"3-Dimensional model","text":"","category":"section"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"This is the benchmark of a 3-Dimensional model setup with (Ns, Ns, Ns) grid cells. Here Ns = [32, 64].","category":"page"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"PlanktonIndividuals v0.2.0\nJulia Version 1.6.0\nCommit f9720dc2eb (2021-03-24 12:55 UTC)\nPlatform Info:\n  OS: Linux (x86_64-pc-linux-gnu)\n  CPU: Intel(R) Xeon(R) CPU E5-2680 v4 @ 2.40GHz\n  WORD_SIZE: 64\n  LIBM: libopenlibm\n  LLVM: libLLVM-11.0.1 (ORCJIT, broadwell)\n  GPU: Tesla P100-PCIE-12GB","category":"page"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"Arch N Ns min mean max memory allocs\nCPU 2 32 39.864 ms 40.277 ms 43.291 ms 1.51 MiB 4206\nCPU 2 64 351.139 ms 353.212 ms 361.829 ms 8.56 MiB 4207\nCPU 32 32 39.855 ms 40.296 ms 43.522 ms 1.51 MiB 4206\nCPU 32 64 376.590 ms 395.313 ms 417.473 ms 8.56 MiB 4207\nCPU 1024 32 49.468 ms 49.872 ms 51.700 ms 1.51 MiB 4206\nCPU 1024 64 366.752 ms 369.094 ms 380.962 ms 8.56 MiB 4207\nCPU 32768 32 260.691 ms 264.792 ms 294.048 ms 1.51 MiB 4206\nCPU 32768 64 583.412 ms 590.231 ms 623.753 ms 8.56 MiB 4207\nGPU 2 32 5.922 ms 8.108 ms 15.476 ms 2.56 MiB 20019\nGPU 2 64 10.199 ms 13.916 ms 24.250 ms 9.61 MiB 20016\nGPU 32 32 5.863 ms 8.657 ms 14.639 ms 2.56 MiB 20019\nGPU 32 64 10.313 ms 13.910 ms 24.215 ms 9.61 MiB 20016\nGPU 1024 32 5.856 ms 8.798 ms 13.367 ms 2.56 MiB 20019\nGPU 1024 64 9.996 ms 13.269 ms 20.624 ms 9.61 MiB 20016\nGPU 32768 32 7.491 ms 10.591 ms 18.827 ms 2.56 MiB 20155\nGPU 32768 64 12.336 ms 16.536 ms 20.237 ms 9.61 MiB 20156","category":"page"},{"location":"equations/#parameterization-of-phytoplankton-physiology","page":"Equations","title":"parameterization of phytoplankton physiology","text":"","category":"section"},{"location":"equations/","page":"Equations","title":"Equations","text":"(Image: skematic)","category":"page"},{"location":"equations/#Photosynthesis","page":"Equations","title":"Photosynthesis","text":"","category":"section"},{"location":"equations/","page":"Equations","title":"Equations","text":"Basically, we follow Geider et al. 1998 for the parameterization of photosynthesis, but without nutrient limitation. Unit: mmolC/cell/s  ","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"PP_max= PP_max^a cdot Sz^PP^b","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"PP_max is scaled by a power-law relationship of cell size (Sz).","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"PP=PP_maxcdot (1-e^frac-alpha cdot Icdot ChlPP_maxcdot C)\nPS=PPcdot Bm","category":"page"},{"location":"equations/#Nutrient-Uptake","page":"Equations","title":"Nutrient Uptake","text":"","category":"section"},{"location":"equations/","page":"Equations","title":"Equations","text":"Include intracellular nutrient limitation:","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"V_i^max= V_i^a cdot Sz^V_i^b","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"RegQ_i=biggfracR_iC^max-Q_iR_iC^max-R_iC^minbigg_0^1\nV_i=V_i^maxcdot regQ_icdotfracii+K_i^satcdot Bm","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"Unit: mmolN/cell/s, i denotes NH_4, NO_3, PO_4. Q_i is the quota of i. R_iC^max is the maximum iquota, R_iC^min is the minimum iquota. K_i^sat is the half-saturation concentration. Bm is the cellular functional biomass.","category":"page"},{"location":"equations/#Biosynthesis,-Respiration,-and-Excretion","page":"Equations","title":"Biosynthesis, Respiration, and Excretion","text":"","category":"section"},{"location":"equations/#Update-reserves","page":"Equations","title":"Update reserves","text":"","category":"section"},{"location":"equations/","page":"Equations","title":"Equations","text":"Model will first update C, N, and P quotas used to calculate biosynthesis rate and excretion rate.","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"Q_C^R = Q_C^R+PP\nQ_N^R=Q_N^R+V_NO_3+V_NH_4\nQ_P^R=Q_P^R+V_PO_4","category":"page"},{"location":"equations/#Biosynthesis","page":"Equations","title":"Biosynthesis","text":"","category":"section"},{"location":"equations/","page":"Equations","title":"Equations","text":"Potential biosynthesis rates based on C, N, P quotas are calculated below.","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"k_mtb= k_mtb^a cdot Sz^k_mtb^b","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"BioSynC = k_mtbcdot Q_C^R\nBioSynN = k_mtbcdot Q_N^RR_NC\nBioSynP = k_mtbcdot Q_P^RR_PC","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"Then the minimum of these rates are selected as the actual biosynthesis rate. The difference between carbon quota based biosynthesis rate and actual biosynthesis rate is excretion rate.","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"BioSyn=min(BioSynCBioSynNBioSynP)\nExcretC=BioSynC - BioSyn","category":"page"},{"location":"equations/#Respiration","page":"Equations","title":"Respiration","text":"","category":"section"},{"location":"equations/","page":"Equations","title":"Equations","text":"Respir = k_respir^a cdot Sz^k_respir^b cdot Bm","category":"page"},{"location":"equations/#Update-reserves-and-biomass","page":"Equations","title":"Update reserves and biomass","text":"","category":"section"},{"location":"equations/","page":"Equations","title":"Equations","text":"Q_C^B = Q_C^B + BioSyn\nQ_C^R = Q_C^R - BioSyn - Respir\nQ_N^R = Q_N^R - BioSyn*R_NC\nQ_P^R = Q_N^R - BioSyn*R_PC","category":"page"},{"location":"equations/#Cell-division","page":"Equations","title":"Cell division","text":"","category":"section"},{"location":"equations/","page":"Equations","title":"Equations","text":"We use relative cell size RCS to indicate cell division. RCS of the smallest cell is 1.0. Q_C^B of the smallest cell is Cquota. Cells start to divide at RCS=20. The probability of individual cell division is a sigmoidal function of RCS.","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"RCS = Q_C^B  Cquota\nP_divide = rand(Bernoulli(02*(tanh(a*(RCS-b))+1)))","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"P_divide is computed every hour no matter what time step the model is.","category":"page"},{"location":"generated/horizontal_2D_example/","page":"Horizontal Two-Dimensional Example","title":"Horizontal Two-Dimensional Example","text":"EditURL = \"https://github.com/JuliaOcean/PlanktonIndividuals.jl/blob/master/examples/horizontal_2D_example.jl\"","category":"page"},{"location":"generated/horizontal_2D_example/#Horizontal-2-Dimensional-Example","page":"Horizontal Two-Dimensional Example","title":"Horizontal 2-Dimensional Example","text":"","category":"section"},{"location":"generated/horizontal_2D_example/","page":"Horizontal Two-Dimensional Example","title":"Horizontal Two-Dimensional Example","text":"Here we simulate phytoplankton cells as Lagrangian particles in a 2D flow field. The domain is periodic in both directions horizontally.","category":"page"},{"location":"generated/horizontal_2D_example/#.-Import-packages","page":"Horizontal Two-Dimensional Example","title":"1. Import packages","text":"","category":"section"},{"location":"generated/horizontal_2D_example/","page":"Horizontal Two-Dimensional Example","title":"Horizontal Two-Dimensional Example","text":"using PlanktonIndividuals, Plots","category":"page"},{"location":"generated/horizontal_2D_example/#.-Generate-Flow-Fields","page":"Horizontal Two-Dimensional Example","title":"2. Generate Flow Fields","text":"","category":"section"},{"location":"generated/horizontal_2D_example/","page":"Horizontal Two-Dimensional Example","title":"Horizontal Two-Dimensional Example","text":"First we'll generate grid information","category":"page"},{"location":"generated/horizontal_2D_example/","page":"Horizontal Two-Dimensional Example","title":"Horizontal Two-Dimensional Example","text":"grid = RegularRectilinearGrid(size=(128, 128, 1), spacing=(1, 1, 1))","category":"page"},{"location":"generated/horizontal_2D_example/","page":"Horizontal Two-Dimensional Example","title":"Horizontal Two-Dimensional Example","text":"Then we use a stream function to generate the flow field which is a double-gyre configuration","category":"page"},{"location":"generated/horizontal_2D_example/","page":"Horizontal Two-Dimensional Example","title":"Horizontal Two-Dimensional Example","text":"scal = 3e-1\nf(x, y, z) = scal*(0.3*sin(x*1π/128)*sin(y*2π/128)+0.7*sin(x*2π/128)*sin(y*1π/128)) #stream function\n\nϕcorners=[f(x,y,0.) for x in 0:128, y in 0:128]\nϕcenters=[f(x,y,0.) for x in 0.5:128, y in 0.5:128]\n\nuu=-diff(ϕcorners,dims=2)[1:end-1,:]\nvv=diff(ϕcorners,dims=1)[:,1:end-1]\nuu=reshape(uu,(128,128,1))\nvv=reshape(vv,(128,128,1))\nww=zeros(128,128,2)\n\nuvels = fill(uu, 2)\nvvels = fill(vv, 2)\nwvels = fill(ww, 2)\nuvels = cat(uvels..., dims=4)\nvvels = cat(vvels..., dims=4)\nwvels = cat(wvels..., dims=4)\n\nnothing","category":"page"},{"location":"generated/horizontal_2D_example/#.-Model-Setup","page":"Horizontal Two-Dimensional Example","title":"3. Model Setup","text":"","category":"section"},{"location":"generated/horizontal_2D_example/","page":"Horizontal Two-Dimensional Example","title":"Horizontal Two-Dimensional Example","text":"Next we setup the individual-based model by specifying the architecture, grid, number of individuals, parameters, and nutrient initial conditions.","category":"page"},{"location":"generated/horizontal_2D_example/","page":"Horizontal Two-Dimensional Example","title":"Horizontal Two-Dimensional Example","text":"model = PI_Model(CPU(), grid; individual_size = (Nsp = 1, N = 2^7, cap = 8))","category":"page"},{"location":"generated/horizontal_2D_example/","page":"Horizontal Two-Dimensional Example","title":"Horizontal Two-Dimensional Example","text":"We also need to setup a runtime simulation to run the model. The simulation includes time step, number of time steps, flow fields that will be used etc.","category":"page"},{"location":"generated/horizontal_2D_example/","page":"Horizontal Two-Dimensional Example","title":"Horizontal Two-Dimensional Example","text":"sim = PI_simulation(model, ΔT = 60, nΔT = 1, diag_freq = 3600,\n                    vels=(u=uvels, v=vvels, w=wvels),\n                    vel_reuse = true)","category":"page"},{"location":"generated/horizontal_2D_example/#.-Run-the-Model","page":"Horizontal Two-Dimensional Example","title":"4. Run the Model","text":"","category":"section"},{"location":"generated/horizontal_2D_example/","page":"Horizontal Two-Dimensional Example","title":"Horizontal Two-Dimensional Example","text":"Finaly, we run the model and plot the distribution of individuals as well as nutrient fields We use Plots.jl to plot individuals and nutrient fields.","category":"page"},{"location":"generated/horizontal_2D_example/","page":"Horizontal Two-Dimensional Example","title":"Horizontal Two-Dimensional Example","text":"function plot(model::PI_Model)\n    # Coordinate arrays for plotting\n    xC, yC = collect(model.grid.xC)[3:130], collect(model.grid.yC)[3:130]\n\n    # heatmap of the flow field\n    fl_plot = Plots.contourf(xC, yC, ϕcenters', xlabel=\"x (m)\", ylabel=\"y (m)\", color=:balance, fmt=:png, colorbar=false)\n\n    # a scatter plot embeded in the flow fields\n    px = Array(model.individuals.phytos.sp1.data.x)\n    py = Array(model.individuals.phytos.sp1.data.y)\n    Plots.scatter!(fl_plot, px, py, ms=5, color = :red, legend=:none)\n\n    # DOC field\n    trac1 = Plots.contourf(xC, yC, Array(model.nutrients.DOC.data)[3:130,3:130,3]', xlabel=\"x (m)\", ylabel=\"y (m)\", clims=(0.5, 1.1), fmt=:png)\n\n    # Arrange the plots side-by-side.\n    plt = Plots.plot(fl_plot, trac1, size=(800, 400),\n        title=[lpad(model.t÷86400,2,\"0\")*\"day \"*lpad(model.t÷3600-24*(model.t÷86400),2,\"0\")*\"hour\" \"DOC (mmolC/L)\"])\n\n    return plt\nend","category":"page"},{"location":"generated/horizontal_2D_example/","page":"Horizontal Two-Dimensional Example","title":"Horizontal Two-Dimensional Example","text":"We run the model for 120 time steps (2 hour) and plot the individuals and DOC field.","category":"page"},{"location":"generated/horizontal_2D_example/","page":"Horizontal Two-Dimensional Example","title":"Horizontal Two-Dimensional Example","text":"for i in 1:120\n    update!(sim)\nend\n\nplot(model)","category":"page"},{"location":"generated/horizontal_2D_example/","page":"Horizontal Two-Dimensional Example","title":"Horizontal Two-Dimensional Example","text":"Or you can use the following code to generate an animation like below","category":"page"},{"location":"generated/horizontal_2D_example/","page":"Horizontal Two-Dimensional Example","title":"Horizontal Two-Dimensional Example","text":"anim = @animate for i in 1:120\n   update!(sim)\n   plot(model)\nend\ngif(anim, \"anim_fps15.gif\", fps = 15)","category":"page"},{"location":"generated/horizontal_2D_example/","page":"Horizontal Two-Dimensional Example","title":"Horizontal Two-Dimensional Example","text":"(Image: animation)","category":"page"},{"location":"generated/horizontal_2D_example/","page":"Horizontal Two-Dimensional Example","title":"Horizontal Two-Dimensional Example","text":"","category":"page"},{"location":"generated/horizontal_2D_example/","page":"Horizontal Two-Dimensional Example","title":"Horizontal Two-Dimensional Example","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/vertical_2D_example/","page":"Vertical Two-Dimensional Example","title":"Vertical Two-Dimensional Example","text":"EditURL = \"https://github.com/JuliaOcean/PlanktonIndividuals.jl/blob/master/examples/vertical_2D_example.jl\"","category":"page"},{"location":"generated/vertical_2D_example/#Vertical-2-Dimensional-Example","page":"Vertical Two-Dimensional Example","title":"Vertical 2-Dimensional Example","text":"","category":"section"},{"location":"generated/vertical_2D_example/","page":"Vertical Two-Dimensional Example","title":"Vertical Two-Dimensional Example","text":"Here we simulate phytoplankton cells as Lagrangian particles in a 2D flow field. The domain is periodic in x direction but bounded in z direction","category":"page"},{"location":"generated/vertical_2D_example/#.-Import-packages","page":"Vertical Two-Dimensional Example","title":"1. Import packages","text":"","category":"section"},{"location":"generated/vertical_2D_example/","page":"Vertical Two-Dimensional Example","title":"Vertical Two-Dimensional Example","text":"using PlanktonIndividuals, Plots","category":"page"},{"location":"generated/vertical_2D_example/#.-Generate-Flow-Fields","page":"Vertical Two-Dimensional Example","title":"2. Generate Flow Fields","text":"","category":"section"},{"location":"generated/vertical_2D_example/","page":"Vertical Two-Dimensional Example","title":"Vertical Two-Dimensional Example","text":"First we'll generate grid information","category":"page"},{"location":"generated/vertical_2D_example/","page":"Vertical Two-Dimensional Example","title":"Vertical Two-Dimensional Example","text":"grid = RegularRectilinearGrid(size=(128, 1, 128), spacing=(1, 1, 1))","category":"page"},{"location":"generated/vertical_2D_example/","page":"Vertical Two-Dimensional Example","title":"Vertical Two-Dimensional Example","text":"Then we use a stream function to generate the flow fields","category":"page"},{"location":"generated/vertical_2D_example/","page":"Vertical Two-Dimensional Example","title":"Vertical Two-Dimensional Example","text":"scal = 2e-1\nf(x, y, z) = scal*sin(x*2π/128)*sin(z*π/128) #stream function\n\nϕcorners=[f(x,0.,z) for x in 0:128, z in -128:0]\nϕcenters=[f(x,0.,z) for x in 0.5:128, z in -128:-0.5]\n\nuu=-diff(ϕcorners,dims=2)[1:end-1,:]\nww=diff(ϕcorners,dims=1)\nuu=reshape(uu,(128,1,128))\nww=reshape(ww,(128,1,129))\nuu = reverse(uu, dims=3)\nww = reverse(ww, dims=3)\n\nuvels = fill(uu, 2)\nvvels = fill(0*uu, 2)\nwvels = fill(ww, 2)\nuvels = cat(uvels..., dims=4)\nvvels = cat(vvels..., dims=4)\nwvels = cat(wvels..., dims=4)\n\nnothing","category":"page"},{"location":"generated/vertical_2D_example/#.-Model-Setup","page":"Vertical Two-Dimensional Example","title":"3. Model Setup","text":"","category":"section"},{"location":"generated/vertical_2D_example/","page":"Vertical Two-Dimensional Example","title":"Vertical Two-Dimensional Example","text":"Next we setup the individual-based model by specifying the architecture, grid, number of individuals, parameters, and nutrient initial conditions.","category":"page"},{"location":"generated/vertical_2D_example/","page":"Vertical Two-Dimensional Example","title":"Vertical Two-Dimensional Example","text":"model = PI_Model(CPU(), grid; individual_size = (Nsp = 1, N = 2^7, cap = 8))","category":"page"},{"location":"generated/vertical_2D_example/","page":"Vertical Two-Dimensional Example","title":"Vertical Two-Dimensional Example","text":"We also need to setup a runtime simulation to run the model. The simulation includes time step, number of time steps, flow fields that will be used etc.","category":"page"},{"location":"generated/vertical_2D_example/","page":"Vertical Two-Dimensional Example","title":"Vertical Two-Dimensional Example","text":"sim = PI_simulation(model, ΔT = 60, nΔT = 1, diag_freq = 3600,\n                    vels=(u=uvels, v=vvels, w=wvels),\n                    vel_reuse = true)","category":"page"},{"location":"generated/vertical_2D_example/#.-Run-the-Model","page":"Vertical Two-Dimensional Example","title":"4. Run the Model","text":"","category":"section"},{"location":"generated/vertical_2D_example/","page":"Vertical Two-Dimensional Example","title":"Vertical Two-Dimensional Example","text":"Finaly, we run the model and plot the distribution of individuals as well as nutrient fields We use Plots.jl to plot individuals and nutrient fields.","category":"page"},{"location":"generated/vertical_2D_example/","page":"Vertical Two-Dimensional Example","title":"Vertical Two-Dimensional Example","text":"function plot(model::PI_Model)\n    # Coordinate arrays for plotting\n    xC, zC = collect(model.grid.xC)[3:130], collect(model.grid.zC)[3:130]\n\n    # contour of the flow field\n    fl_plot = Plots.contourf(xC, reverse(zC), rotl90(ϕcenters), xlabel=\"x (m)\", ylabel=\"z (m)\", color=:balance, fmt=:png, colorbar=false)\n\n    # a scatter plot embeded in the flow fields\n    px = Array(model.individuals.phytos.sp1.data.x)\n    pz = Array(model.individuals.phytos.sp1.data.z)\n    Plots.scatter!(fl_plot, px, pz, ms=5, color = :red, legend=:none)\n\n    # DOC field\n    trac1 = Plots.contourf(xC, reverse(zC), rotl90(Array(model.nutrients.DOC.data)[3:130,3,3:130]), xlabel=\"x (m)\", ylabel=\"z (m)\", clims=(0.5, 1.1), fmt=:png)\n\n    # Arrange the plots side-by-side.\n    plt = Plots.plot(fl_plot, trac1, size=(800, 400),\n        title=[lpad(model.t÷86400,2,\"0\")*\"day \"*lpad(model.t÷3600-24*(model.t÷86400),2,\"0\")*\"hour\" \"DOC (mmolC/L)\"])\n\n    return plt\nend","category":"page"},{"location":"generated/vertical_2D_example/","page":"Vertical Two-Dimensional Example","title":"Vertical Two-Dimensional Example","text":"We run the model for 120 time steps (2 hour) and plot the individuals and DOC field.","category":"page"},{"location":"generated/vertical_2D_example/","page":"Vertical Two-Dimensional Example","title":"Vertical Two-Dimensional Example","text":"for i in 1:120\n    update!(sim)\nend\n\nplot(model)","category":"page"},{"location":"generated/vertical_2D_example/","page":"Vertical Two-Dimensional Example","title":"Vertical Two-Dimensional Example","text":"Or you can use the following code to generate an animation like below","category":"page"},{"location":"generated/vertical_2D_example/","page":"Vertical Two-Dimensional Example","title":"Vertical Two-Dimensional Example","text":"anim = @animate for i in 1:120\n   update!(sim)\n   plot(model)\nend\ngif(anim, \"anim_fps15.gif\", fps = 15)","category":"page"},{"location":"generated/vertical_2D_example/","page":"Vertical Two-Dimensional Example","title":"Vertical Two-Dimensional Example","text":"(Image: animation)","category":"page"},{"location":"generated/vertical_2D_example/","page":"Vertical Two-Dimensional Example","title":"Vertical Two-Dimensional Example","text":"","category":"page"},{"location":"generated/vertical_2D_example/","page":"Vertical Two-Dimensional Example","title":"Vertical Two-Dimensional Example","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/0D_experiment/","page":"Zero-Dimensional Experiment","title":"Zero-Dimensional Experiment","text":"EditURL = \"https://github.com/JuliaOcean/PlanktonIndividuals.jl/blob/master/examples/0D_experiment.jl\"","category":"page"},{"location":"generated/0D_experiment/#Dimensional-Example","page":"Zero-Dimensional Experiment","title":"0-Dimensional Example","text":"","category":"section"},{"location":"generated/0D_experiment/","page":"Zero-Dimensional Experiment","title":"Zero-Dimensional Experiment","text":"Here we simulate phytoplankton cells as individuals in a 0D enviornment, like a lab experiment.","category":"page"},{"location":"generated/0D_experiment/#.-Import-packages","page":"Zero-Dimensional Experiment","title":"1. Import packages","text":"","category":"section"},{"location":"generated/0D_experiment/","page":"Zero-Dimensional Experiment","title":"Zero-Dimensional Experiment","text":"using PlanktonIndividuals, Plots, JLD2\nusing Plots.PlotMeasures","category":"page"},{"location":"generated/0D_experiment/#.-Setup-Grid","page":"Zero-Dimensional Experiment","title":"2. Setup Grid","text":"","category":"section"},{"location":"generated/0D_experiment/","page":"Zero-Dimensional Experiment","title":"Zero-Dimensional Experiment","text":"First we'll generate grid information","category":"page"},{"location":"generated/0D_experiment/","page":"Zero-Dimensional Experiment","title":"Zero-Dimensional Experiment","text":"grid = RegularRectilinearGrid(size=(1,1,1), spacing=(128, 128, 256))","category":"page"},{"location":"generated/0D_experiment/#.-Model-Setup","page":"Zero-Dimensional Experiment","title":"3. Model Setup","text":"","category":"section"},{"location":"generated/0D_experiment/","page":"Zero-Dimensional Experiment","title":"Zero-Dimensional Experiment","text":"Next we setup the individual-based model by specifying the architecture, grid, number of individuals, parameters, and nutrient initial conditions.","category":"page"},{"location":"generated/0D_experiment/","page":"Zero-Dimensional Experiment","title":"Zero-Dimensional Experiment","text":"model = PI_Model(CPU(), grid;\n                 individual_size = (Nsp = 1, N = 2^10, cap = 16),\n                 diag_nprocs = (:num, :graz, :mort, :dvid, :PS, :BS, :Cq, :chl, :Bm))","category":"page"},{"location":"generated/0D_experiment/","page":"Zero-Dimensional Experiment","title":"Zero-Dimensional Experiment","text":"We also need to setup a runtime simulation to run the model. The simulation includes time step, number of time steps, flow fields that will be used etc.","category":"page"},{"location":"generated/0D_experiment/","page":"Zero-Dimensional Experiment","title":"Zero-Dimensional Experiment","text":"ntimesteps = 60 * 24 * 1 # 1 days with time step of 60s\nres_dir = PrepRunDir()\nsim = PI_simulation(model, ΔT = 60, nΔT = ntimesteps, diag_freq = 1,\n                    res_dir = res_dir,\n                    save_diags = true,\n                    save_individuals = false)","category":"page"},{"location":"generated/0D_experiment/#.-Run-the-Model","page":"Zero-Dimensional Experiment","title":"4. Run the Model","text":"","category":"section"},{"location":"generated/0D_experiment/","page":"Zero-Dimensional Experiment","title":"Zero-Dimensional Experiment","text":"update!(sim)","category":"page"},{"location":"generated/0D_experiment/#.-Process-the-results","page":"Zero-Dimensional Experiment","title":"5. Process the results","text":"","category":"section"},{"location":"generated/0D_experiment/","page":"Zero-Dimensional Experiment","title":"Zero-Dimensional Experiment","text":"First, we allocate empty arrays to store results","category":"page"},{"location":"generated/0D_experiment/","page":"Zero-Dimensional Experiment","title":"Zero-Dimensional Experiment","text":"num  = zeros(1440)\ndvid = zeros(1440)\nmort = zeros(1440)\nPS   = zeros(1440)\nnothing","category":"page"},{"location":"generated/0D_experiment/","page":"Zero-Dimensional Experiment","title":"Zero-Dimensional Experiment","text":"Then we read results from file","category":"page"},{"location":"generated/0D_experiment/","page":"Zero-Dimensional Experiment","title":"Zero-Dimensional Experiment","text":"path = joinpath(res_dir,\"diags.jld2\")\nfile = jldopen(path, \"r\")\nfor i in 1:1440\n    num[i]  = file[joinpath(lpad(i*60,10,\"0\"),\"sp1\",\"num\")][3,3,3]\n    dvid[i] = file[joinpath(lpad(i*60,10,\"0\"),\"sp1\",\"dvid\")][3,3,3]\n    mort[i] = file[joinpath(lpad(i*60,10,\"0\"),\"sp1\",\"mort\")][3,3,3]\n    PS[i]   = file[joinpath(lpad(i*60,10,\"0\"),\"sp1\",\"PS\")][3,3,3]\nend\nclose(file)","category":"page"},{"location":"generated/0D_experiment/","page":"Zero-Dimensional Experiment","title":"Zero-Dimensional Experiment","text":"Finally we plot the results","category":"page"},{"location":"generated/0D_experiment/","page":"Zero-Dimensional Experiment","title":"Zero-Dimensional Experiment","text":"p1 = plot(collect(1:60:60*1440) ./ 3600, num, title = \"population\", legend=:none, fmt=:png, bottom_margin = 5mm)\np2 = plot(collect(1:60:60*1440) ./ 3600, dvid ./ num .* 60, title = \"division rate (per hour)\", legend=:none, fmt=:png, bottom_margin = 5mm)\np3 = plot(collect(1:60:60*1440) ./ 3600, mort ./ num .* 60, title = \"mortarlity rate (per hour)\", legend=:none, fmt=:png, bottom_margin = 5mm)\np4 = plot(collect(1:60:60*1440) ./ 3600, PS ./ num .* 12 .* 1e12 .* 3600, title = \"photosynthesis rate (fg C/cell/hour)\", legend=:none, fmt=:png, bottom_margin = 5mm)\nplot(p1, p2, p3, p4, layout = (4,1), size=(600,600), left_margin = 20mm)","category":"page"},{"location":"generated/0D_experiment/","page":"Zero-Dimensional Experiment","title":"Zero-Dimensional Experiment","text":"","category":"page"},{"location":"generated/0D_experiment/","page":"Zero-Dimensional Experiment","title":"Zero-Dimensional Experiment","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/surface_mixing_3D_example/","page":"Surface Mixing Three-Dimensional Example","title":"Surface Mixing Three-Dimensional Example","text":"EditURL = \"https://github.com/JuliaOcean/PlanktonIndividuals.jl/blob/master/examples/surface_mixing_3D_example.jl\"","category":"page"},{"location":"generated/surface_mixing_3D_example/#A-3-Dimensional-Surface-Mixing-Example","page":"Surface Mixing Three-Dimensional Example","title":"A 3-Dimensional Surface Mixing Example","text":"","category":"section"},{"location":"generated/surface_mixing_3D_example/","page":"Surface Mixing Three-Dimensional Example","title":"Surface Mixing Three-Dimensional Example","text":"Here we simulate phytoplankton cells as Lagrangian particles in a 3D flow field generated by Oceananigans.jl. The domain is periodic in both directions horizontally and bounded in vertical direction.","category":"page"},{"location":"generated/surface_mixing_3D_example/#.-Import-packages","page":"Surface Mixing Three-Dimensional Example","title":"1. Import packages","text":"","category":"section"},{"location":"generated/surface_mixing_3D_example/","page":"Surface Mixing Three-Dimensional Example","title":"Surface Mixing Three-Dimensional Example","text":"using PlanktonIndividuals, Plots, JLD2","category":"page"},{"location":"generated/surface_mixing_3D_example/#.-Generate-Flow-Fields","page":"Surface Mixing Three-Dimensional Example","title":"2. Generate Flow Fields","text":"","category":"section"},{"location":"generated/surface_mixing_3D_example/","page":"Surface Mixing Three-Dimensional Example","title":"Surface Mixing Three-Dimensional Example","text":"First we'll generate grid information","category":"page"},{"location":"generated/surface_mixing_3D_example/","page":"Surface Mixing Three-Dimensional Example","title":"Surface Mixing Three-Dimensional Example","text":"grid = RegularRectilinearGrid(size=(32, 32, 32), spacing=(4, 4, 4))","category":"page"},{"location":"generated/surface_mixing_3D_example/","page":"Surface Mixing Three-Dimensional Example","title":"Surface Mixing Three-Dimensional Example","text":"We use Oceananigans.jl to generate flow fields. Script used here.","category":"page"},{"location":"generated/surface_mixing_3D_example/","page":"Surface Mixing Three-Dimensional Example","title":"Surface Mixing Three-Dimensional Example","text":"Then we read in the velocity fields","category":"page"},{"location":"generated/surface_mixing_3D_example/","page":"Surface Mixing Three-Dimensional Example","title":"Surface Mixing Three-Dimensional Example","text":"vels_file = jldopen(PlanktonIndividuals.surface_mixing_vels,\"r\")\niterations = parse.(Int, keys(vels_file[\"timeseries/t\"]))\ntimes = [vels_file[\"timeseries/t/$iter\"] for iter in iterations]\nu = zeros(32,32,32,length(iterations))\nv = zeros(32,32,32,length(iterations))\nw = zeros(32,32,33,length(iterations))\nfor (i, iter) in enumerate(iterations)\n    u[:,:,:,i] .= reverse(vels_file[\"timeseries/u/$iter\"], dims=3)\n    v[:,:,:,i] .= reverse(vels_file[\"timeseries/v/$iter\"], dims=3)\n    w[:,:,:,i] .= reverse(vels_file[\"timeseries/w/$iter\"], dims=3)\nend","category":"page"},{"location":"generated/surface_mixing_3D_example/#.-Model-Setup","page":"Surface Mixing Three-Dimensional Example","title":"3. Model Setup","text":"","category":"section"},{"location":"generated/surface_mixing_3D_example/","page":"Surface Mixing Three-Dimensional Example","title":"Surface Mixing Three-Dimensional Example","text":"Next we setup the individual-based model by specifying the architecture, grid, number of individuals, parameters, and nutrient initial conditions.","category":"page"},{"location":"generated/surface_mixing_3D_example/","page":"Surface Mixing Three-Dimensional Example","title":"Surface Mixing Three-Dimensional Example","text":"model = PI_Model(CPU(), grid; individual_size = (Nsp = 1, N = 2^8, cap = 8))","category":"page"},{"location":"generated/surface_mixing_3D_example/","page":"Surface Mixing Three-Dimensional Example","title":"Surface Mixing Three-Dimensional Example","text":"We also need to setup a runtime simulation to run the model. The simulation includes time step, number of time steps, flow fields that will be used etc.","category":"page"},{"location":"generated/surface_mixing_3D_example/","page":"Surface Mixing Three-Dimensional Example","title":"Surface Mixing Three-Dimensional Example","text":"sim = PI_simulation(model, ΔT = 60, nΔT = 1, diag_freq = 3600,\n                    vels=(u=u, v=v, w=w))","category":"page"},{"location":"generated/surface_mixing_3D_example/#.-Run-the-Model","page":"Surface Mixing Three-Dimensional Example","title":"4. Run the Model","text":"","category":"section"},{"location":"generated/surface_mixing_3D_example/","page":"Surface Mixing Three-Dimensional Example","title":"Surface Mixing Three-Dimensional Example","text":"Finaly, we run the model and plot the distribution of individuals as well as nutrient fields We use Plots.jl to plot individuals and a slice of nutrient fields.","category":"page"},{"location":"generated/surface_mixing_3D_example/","page":"Surface Mixing Three-Dimensional Example","title":"Surface Mixing Three-Dimensional Example","text":"function plot(model::PI_Model)\n    # Coordinate arrays for plotting\n    xC, zC = collect(model.grid.xC)[3:34], collect(model.grid.zC)[3:34]\n\n    # a scatter plot embeded in the flow fields\n    px = Array(model.individuals.phytos.sp1.data.x)\n    py = Array(model.individuals.phytos.sp1.data.y)\n    pz = Array(model.individuals.phytos.sp1.data.z)\n    p_plot = Plots.scatter(px, py, pz, xlims=(0,128), ylims=(0,128), zlims=(-128,1), ms=5, color = :red, legend=:none, fmt=:png)\n\n    # the middle slice of DOC field\n    trac1 = Plots.heatmap(xC, reverse(zC), rotl90(Array(model.nutrients.DOC.data)[3:34,18,3:34]), xlabel=\"x (m)\", ylabel=\"z (m)\", clims=(0.5, 1.1), fmt=:png)\n\n    # Arrange the plots side-by-side.\n    plt = Plots.plot(p_plot, trac1, size=(800, 400),\n        title=[lpad(model.t÷86400,2,\"0\")*\"day \"*lpad(model.t÷3600-24*(model.t÷86400),2,\"0\")*\"hour\" \"DOC (mmolC/L)\"])\n\n    return plt\nend","category":"page"},{"location":"generated/surface_mixing_3D_example/","page":"Surface Mixing Three-Dimensional Example","title":"Surface Mixing Three-Dimensional Example","text":"We run the model for 60 time steps (1 hour) and plot the individuals and DOC field.","category":"page"},{"location":"generated/surface_mixing_3D_example/","page":"Surface Mixing Three-Dimensional Example","title":"Surface Mixing Three-Dimensional Example","text":"for i in 1:60\n    update!(sim)\nend\n\nplot(model)","category":"page"},{"location":"generated/surface_mixing_3D_example/","page":"Surface Mixing Three-Dimensional Example","title":"Surface Mixing Three-Dimensional Example","text":"Or you can use the following code to generate an animation like below","category":"page"},{"location":"generated/surface_mixing_3D_example/","page":"Surface Mixing Three-Dimensional Example","title":"Surface Mixing Three-Dimensional Example","text":"anim = @animate for i in 1:60\n   update!(sim)\n   plot(model)\nend\ngif(anim, \"anim_fps15.gif\", fps = 15)","category":"page"},{"location":"generated/surface_mixing_3D_example/","page":"Surface Mixing Three-Dimensional Example","title":"Surface Mixing Three-Dimensional Example","text":"(Image: animation)","category":"page"},{"location":"generated/surface_mixing_3D_example/","page":"Surface Mixing Three-Dimensional Example","title":"Surface Mixing Three-Dimensional Example","text":"","category":"page"},{"location":"generated/surface_mixing_3D_example/","page":"Surface Mixing Three-Dimensional Example","title":"Surface Mixing Three-Dimensional Example","text":"This page was generated using Literate.jl.","category":"page"},{"location":"function_index/#Index","page":"Function index","title":"Index","text":"","category":"section"},{"location":"function_index/","page":"Function index","title":"Function index","text":"","category":"page"},{"location":"function_index/","page":"Function index","title":"Function index","text":"Modules = [PlanktonIndividuals]\nOrder   = [:type,:function]","category":"page"},{"location":"function_index/#PlanktonIndividuals.PI_Model-Tuple{Architecture, RegularRectilinearGrid}","page":"Function index","title":"PlanktonIndividuals.PI_Model","text":"PI_Model(arch::Architecture, grid::RegularRectilinearGrid;\n        individual_size = (Nsp = 1, N = 1024, cap = 8),\n        bgc_params = bgc_params_default(), \n        phyt_params = phyt_params_default(),\n        nut_source = default_nut_init(),\n        diag_ntrs = (:PAR, :DOC, :NH4, :NO3),\n        diag_nprocs = (:num, :graz, :mort, :dvid),\n        t = 0.0,\n        mask = nothing,\n        )\n\nGenerate the PI_Model struct on grid. \n\nKeyword Arguments\n\narch (required): CPU() or GPU(). The computer architecture used to time-step model.\ngrid (required): The resolution and discrete geometry on which model is solved.\nindividual_size (optional): NamedTuple used to set number of species Nsp, number of individuals N,                               and max individual capacity cap.\nbgc_params (optional): Parameter set for biogeochemical processes modeled in the model.\nphyt_params (optional): Parameter set for physiological processes of individuals modeled in the model.\nnut_source (optional): The source of initial conditions of nutrient fields, should be either a NamedTuple                           or a Dict containing the file paths pointing to the files of nutrient initial conditions.\ndiag_ntrs (optional): a Tuple containing the names of nutrient fields to be diagnosed.\ndiag_nprocs (optional): a Tuple containing the names of physiological processes to be diagnosed.\nt (optional): Model time, start from 0 by default, in second.\nmask (optional): Mask out the individuals and tracers generated out of the domain, a 3D array with size (Nx, Ny, Nz).\n\n\n\n\n\n","category":"method"},{"location":"function_index/#PlanktonIndividuals.PI_simulation-Tuple{PI_Model}","page":"Function index","title":"PlanktonIndividuals.PI_simulation","text":"PI_simulation(model; ΔT, nΔT, diag_freq,\n              PARF_path = PlanktonIndividuals.default_PAR,\n              temp_path = PlanktonIndividuals.default_temperature,\n              vels = (;),\n              res_dir = nothing\n              save_diags = false,\n              save_individuals = false,\n              vel_reuse = false\n              )\n\nGenerate the PI_simulation struct for a model with time step ΔT. \n\nKeyword Arguments\n\nΔT (required): model time step in second.\nnΔT (required): The number of time steps to run in simulation.\ndiag_freq (required): The frequency of diagnostics (in number of time steps).\nPARF_path and temp_path (optional): External forcings of PAR and temperature. Hourly data of a single day is required (25 data points in total).\nres_dir (optional): Create a directory to store results, nothing by default.\nsave_diags and save_individuals (optional): whether to save diagnostics or individuals.\nvels (optional): The velocity fields for nutrient fields and individuals. nothing means no velocities                    will be applied in the simulation. Otherwise, vels mush be a NamedTuple containing                    all u, v, and w. Each of u, v, and w must be an 4D-Array of                     (Nx, Ny, Nz+1, nΔT+1) elements, excluding halo points, but bounded in z direction.\n\n\n\n\n\n","category":"method"},{"location":"function_index/#PlanktonIndividuals.RegularRectilinearGrid-Tuple{}","page":"Function index","title":"PlanktonIndividuals.RegularRectilinearGrid","text":"gen_Grid(size = (Nx, Ny, Nz), spacing = (Δx, Δy, Δz), halo = (2, 2, 2))\n\nCreats a Grids struct with size = (Nx, Ny, Nz) grid points. The topology is fixed as (Periodic, Periodic, Bounded)\n\nKeyword Arguments\n\nsize (required): A tuple prescribing the number of grid points.                        size is a 3-tuple no matter for 3D, 2D, or 1D model.\nspacing (required): A tuple prescribing the length of each grid point in x, y, and z directions.                       spacing is a 3-tuple no matter for 3D, 2D, or 1D model.\nhalo (optional): A tuple of integers that specifies the size of the halo region of cells                       surrounding the physical interior for each direction.                       halo is a 3-tuple no matter for 3D, 2D, or 1D model.                       At least 2 halo points are needed for DST3FL advection scheme.\n\n\n\n\n\n","category":"method"},{"location":"function_index/#PlanktonIndividuals.PI_TimeStep!-Tuple{PI_Model, Any, String}","page":"Function index","title":"PlanktonIndividuals.PI_TimeStep!","text":"PI_TimeStep!(model, ΔT, resultpath)\n\nUpdate physiology processes and nutrient field of PI_Model one time step forward.\n\nKeyword Arguments\n\nmodel: PI_Model to be updated one time step forward\nΔT: The length of a time step\nresultpath (optional): The file path to store model output. \n\n\n\n\n\n","category":"method"},{"location":"function_index/#PlanktonIndividuals.PrepRunDir-Tuple{}","page":"Function index","title":"PlanktonIndividuals.PrepRunDir","text":"PrepRunDir(res::String=\"results/\")\n\nCreate res/ folder if needed. Remove old files from it if needed.\n\n\n\n\n\n","category":"method"},{"location":"function_index/#PlanktonIndividuals.generate_nutrients-Tuple{Any, Any, NamedTuple}","page":"Function index","title":"PlanktonIndividuals.generate_nutrients","text":"generate_nutrients(arch, grid, source; mask = nothing)\n\nSet up initial nutrient fields according to grid.\n\nKeyword Arguments\n\narch: CPU() or GPU(). The computer architecture used to time-step model.\ngrid: The resolution and discrete geometry on which nutrient fields are solved.\nsource: An 10-element NamedTuple with each element representing the initial condition of a kind of nutrient,            or a Dict containing the file paths pointing to the files of nutrient initial conditions.\nmask (optional): Mask out the tracers generated out of the domain, a 3D array with size (Nx, Ny, Nz).\n\n\n\n\n\n","category":"method"},{"location":"function_index/#PlanktonIndividuals.update!-Tuple{PI_simulation}","page":"Function index","title":"PlanktonIndividuals.update!","text":"update!(sim::PI_simulaiton)\n\nupdate the PI_simulaiton for sim.nΔT time steps.\n\n\n\n\n\n","category":"method"},{"location":"function_index/#PlanktonIndividuals.update_bgc_params-Tuple{Dict}","page":"Function index","title":"PlanktonIndividuals.update_bgc_params","text":"update_bgc_params(tmp::Ditc)\n\nUpdate parameter values based on a Dict provided by user\n\nKeyword Arguments\n\ntmp is a Dict containing the parameters needed to be upadated\n\n\n\n\n\n","category":"method"},{"location":"function_index/#PlanktonIndividuals.update_phyt_params-Tuple{Dict}","page":"Function index","title":"PlanktonIndividuals.update_phyt_params","text":"update_phyt_params(tmp::Dict)\n\nUpdate parameter values based on a Dict provided by user\n\nKeyword Arguments\n\ntmp is a Dict containing the parameters needed to be upadated\n\n\n\n\n\n","category":"method"},{"location":"function_index/#PlanktonIndividuals.write_diags_to_jld2-NTuple{4, Any}","page":"Function index","title":"PlanktonIndividuals.write_diags_to_jld2","text":"write_diags_to_jld2(diags, filepath, t, ncounts)\n\nwrite model output of individuals at each time step to a binary file\n\nKeyword Arguments\n\ndiags: NamedTuple of a list of diagnostics at current time step.\nfilepath: The file path to store JLD2 files.\nt: Current time of model in second, usually starting from 0.\nncounts: the number of time steps included in each diagnostic\n\n\n\n\n\n","category":"method"},{"location":"function_index/#PlanktonIndividuals.write_individuals_to_jld2-Tuple{NamedTuple, Any, Any}","page":"Function index","title":"PlanktonIndividuals.write_individuals_to_jld2","text":"write_individuals_to_bin(phytos, filepath, t)\n\nwrite model output of individuals at each time step to a binary file\n\nKeyword Arguments\n\nphytos: NamedTuple of a list of individual species.\nfilepath: The file path to store JLD2 files.\nt: Current time of model in second, usually starting from 0.\natts (optional): attributes of individuals to save, default (:x, :y, :z)\n\n\n\n\n\n","category":"method"},{"location":"function_index/#PlanktonIndividuals.write_nut_nc_each_step-Tuple{NamedTuple, Int64, String}","page":"Function index","title":"PlanktonIndividuals.write_nut_nc_each_step","text":"write_nut_nc_each_step(nut, t, filepath)\n\nWrite a NetCDF file of nutrient fields at each time step\n\nKeyword Arguments\n\nnut: NamedTuple of nutrient tracers.\nt: Current time of model in second, usually starting from 0.\nfilepath: The file path to store NetCDF files.\n\n\n\n\n\n","category":"method"},{"location":"#PlanktonIndividuals.jl","page":"Home","title":"PlanktonIndividuals.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for PlanktonIndividuals.jl which simulates the behavior of an ensemble of phytoplankton individuals.","category":"page"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Here's the introduction of PlanktonIndividuals.jl","category":"page"},{"location":"#Geting-help","page":"Home","title":"Geting help","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you are interested in using PlanktonIndividuals.jl or are trying to figure out how to use it, please feel free to ask us questions and get in touch!   If you're trying to set up a model then check out the examples. Please feel free to open an issue if you have any questions, comments, suggestions, etc!","category":"page"},{"location":"model_setup/#Model-Setup","page":"Model Setup","title":"Model Setup","text":"","category":"section"},{"location":"model_setup/","page":"Model Setup","title":"Model Setup","text":"This section describes all the options and features that can be used to set up a PI_Model.","category":"page"},{"location":"model_setup/","page":"Model Setup","title":"Model Setup","text":"Below are all the options or keyword arguments that can be passed to PI_Model. Checkout different sections for more details and examples for each keyword argument.","category":"page"},{"location":"model_setup/","page":"Model Setup","title":"Model Setup","text":"PI_Model","category":"page"},{"location":"model_setup/#PlanktonIndividuals.PI_Model","page":"Model Setup","title":"PlanktonIndividuals.PI_Model","text":"PI_Model(arch::Architecture, grid::RegularRectilinearGrid;\n        individual_size = (Nsp = 1, N = 1024, cap = 8),\n        bgc_params = bgc_params_default(), \n        phyt_params = phyt_params_default(),\n        nut_source = default_nut_init(),\n        diag_ntrs = (:PAR, :DOC, :NH4, :NO3),\n        diag_nprocs = (:num, :graz, :mort, :dvid),\n        t = 0.0,\n        mask = nothing,\n        )\n\nGenerate the PI_Model struct on grid. \n\nKeyword Arguments\n\narch (required): CPU() or GPU(). The computer architecture used to time-step model.\ngrid (required): The resolution and discrete geometry on which model is solved.\nindividual_size (optional): NamedTuple used to set number of species Nsp, number of individuals N,                               and max individual capacity cap.\nbgc_params (optional): Parameter set for biogeochemical processes modeled in the model.\nphyt_params (optional): Parameter set for physiological processes of individuals modeled in the model.\nnut_source (optional): The source of initial conditions of nutrient fields, should be either a NamedTuple                           or a Dict containing the file paths pointing to the files of nutrient initial conditions.\ndiag_ntrs (optional): a Tuple containing the names of nutrient fields to be diagnosed.\ndiag_nprocs (optional): a Tuple containing the names of physiological processes to be diagnosed.\nt (optional): Model time, start from 0 by default, in second.\nmask (optional): Mask out the individuals and tracers generated out of the domain, a 3D array with size (Nx, Ny, Nz).\n\n\n\n\n\n","category":"type"},{"location":"model_setup/#Architecture","page":"Model Setup","title":"Architecture","text":"","category":"section"},{"location":"model_setup/","page":"Model Setup","title":"Model Setup","text":"Passing arch = CPU() or arch = GPU() to the PI_Model constructor will determine whether the model is time stepped on a CPU or GPU.","category":"page"},{"location":"model_setup/","page":"Model Setup","title":"Model Setup","text":"Users do not need to modify the setup or simulation script to change the architecture to run on. The only thing needs to be changed is arch = CPU() or arch = GPU().","category":"page"},{"location":"model_setup/","page":"Model Setup","title":"Model Setup","text":"tip: Running on GPUs\nIf you are having issues with running PlanktonIndividuals on a GPU, please open an issue and we'll do our best to help out.","category":"page"},{"location":"model_setup/#Grid","page":"Model Setup","title":"Grid","text":"","category":"section"},{"location":"model_setup/","page":"Model Setup","title":"Model Setup","text":"We now only support RegularRectilinearGrid with constant grid spacing. But the spacing can be different for each dimension.","category":"page"},{"location":"model_setup/","page":"Model Setup","title":"Model Setup","text":"The RegularRectilinearGrid is constructed by specifying size of the grid (which is a Tuple specifying the number of grid points in each dimension) and spacing (which is a Tuple specifying the length of each grid point in each dimension). The topology is fixed as (Periodic, Periodic, Bounded).","category":"page"},{"location":"model_setup/","page":"Model Setup","title":"Model Setup","text":"A regular rectilinear grid with 32 times 64 times 128 grid points and grid spacing of dx=1m. dy=2m, dz=4m is constructed below:","category":"page"},{"location":"model_setup/","page":"Model Setup","title":"Model Setup","text":"DocTestSetup = quote\n    using PlanktonIndividuals\nend","category":"page"},{"location":"model_setup/","page":"Model Setup","title":"Model Setup","text":"julia> grid = RegularRectilinearGrid(size=(32, 64, 128), spacing=(1, 2, 4))\ndomain: x ∈ [0.0, 32.0], y ∈ [0.0, 128.0], z ∈ [0.0, -512.0]\nresolution (Nx, Ny, Nz):   (32, 64, 128)\nhalo size (Hx, Hy, Hz):    (2, 2, 2)\ngrid spacing (Δx, Δy, Δz): (1, 2, 4)","category":"page"},{"location":"model_setup/#Individuals","page":"Model Setup","title":"Individuals","text":"","category":"section"},{"location":"model_setup/","page":"Model Setup","title":"Model Setup","text":"The number and species of individuals can be specified by passing individual_size = (Nsp = 1, N = 1024, cap = 8) where Nsp is the number of species will be modeled, N is the number of individuals in each species, cap is the maximum times of the number of individuals that can be held for each species.","category":"page"},{"location":"model_setup/","page":"Model Setup","title":"Model Setup","text":"tip: The maximum number of species\nThe maximum number of species that can be modeled is 9.","category":"page"},{"location":"model_setup/#Parameters","page":"Model Setup","title":"Parameters","text":"","category":"section"},{"location":"model_setup/","page":"Model Setup","title":"Model Setup","text":"Default parameters are generated by two functions here as Dicts. bgc_params contains the parameters for biogeochemical cycls. phyt_params contains the parameters for phytoplankton individuals.","category":"page"},{"location":"model_setup/","page":"Model Setup","title":"Model Setup","text":"Users can change the values of the parameters by update_bgc_params and update_phyt_params. And example is shown below (change the value of kDOC, remineralization rate of DOC):","category":"page"},{"location":"model_setup/","page":"Model Setup","title":"Model Setup","text":"julia> new_params = Dict(\"kDOC\" => 0.01) # no need to include all parameters\nDict{String, Float64} with 1 entry:\n  \"kDOC\" => 0.01\n\njulia> update_bgc_params(new_params)\nDict{String, Float64} with 13 entries:\n  \"kc\"   => 0.04\n  \"kDOC\" => 0.01\n  \"κhP\"  => 0.0\n  \"kPON\" => 3.85802e-7\n  \"kDON\" => 3.85802e-7\n  \"κh\"   => 1.0e-6\n  \"κv\"   => 1.0e-6\n  \"kDOP\" => 3.85802e-7\n  \"kPOP\" => 3.85802e-7\n  \"kw\"   => 0.046\n  \"Nit\"  => 3.85802e-7\n  \"kPOC\" => 3.85802e-7\n  \"κvP\"  => 0.0","category":"page"},{"location":"model_setup/","page":"Model Setup","title":"Model Setup","text":"phyt_params can be changed in the same way.","category":"page"},{"location":"model_setup/#Nutrient-fields","page":"Model Setup","title":"Nutrient fields","text":"","category":"section"},{"location":"model_setup/","page":"Model Setup","title":"Model Setup","text":"Nutrient fields included in the model are listed below. The initial conditions of the nutrient fields are generated by generate_nutrients either from a 10-element NamedTuple or a Dict containing the file paths pointing to the files of existing nutrient initial conditions. Please note: a 20% random noise is included if the initial conditions are generated by NamedTuple.","category":"page"},{"location":"model_setup/","page":"Model Setup","title":"Model Setup","text":"Name Unit Description\nDIC mmolCm^3 concentration of dissolved inorganic carbon\nNH4 mmolNm^3 concentration of ammonia\nNO3 mmolNm^3 concentration of nitrate\nPO4 mmolPm^3 concentration of phosphate\nDOC mmolCm^3 concentration of dissolved organic carbon\nDON mmolNm^3 concentration of dissolved organic nitrogen\nDOP mmolPm^3 concentration of dissolved organic phosphorus\nPOC mmolCm^3 concentration of particulate organic carbon\nPON mmolNm^3 concentration of particulate organic nitrogen\nPOP mmolPm^3 concentration of particulate organic phosphorus","category":"page"},{"location":"model_setup/","page":"Model Setup","title":"Model Setup","text":"tip: Nutrient Fields\nThe initial conditions of all the nutrient fields should be non-negative.","category":"page"},{"location":"model_setup/","page":"Model Setup","title":"Model Setup","text":"An example of the NamedTuple is listed below:","category":"page"},{"location":"model_setup/","page":"Model Setup","title":"Model Setup","text":"nut_init = (DIC=20.0, NH4=0.2, NO3=0.5, PO4=0.03, DOC=1.0, DON=0.1, DOP=0.05, POC=0.0, PON=0.0,POP=0.0)","category":"page"},{"location":"model_setup/","page":"Model Setup","title":"Model Setup","text":"And example of the Dict is listed below:","category":"page"},{"location":"model_setup/","page":"Model Setup","title":"Model Setup","text":"nut_init = Dict(\n    DIC => \"path/to/DIC.bin\",\n    NH4 => \"path/to/NH4.bin\",\n    NO3 => \"path/to/NO3.bin\",\n    PO4 => \"path/to/PO4.bin\",\n    DOC => \"path/to/DOC.bin\",\n    DON => \"path/to/DON.bin\",\n    DOP => \"path/to/DOP.bin\",\n    POC => \"path/to/POC.bin\",\n    PON => \"path/to/PON.bin\",\n    POP => \"path/to/POP.bin\")","category":"page"},{"location":"model_setup/#Time","page":"Model Setup","title":"Time","text":"","category":"section"},{"location":"model_setup/","page":"Model Setup","title":"Model Setup","text":"Model time t is presented in second, and start from 0 by default.","category":"page"},{"location":"model_setup/#Simulation","page":"Model Setup","title":"Simulation","text":"","category":"section"},{"location":"model_setup/","page":"Model Setup","title":"Model Setup","text":"A PI_simulation includes a PI_model and its time steps nΔT, ΔT. It will be time steped by `update!'.","category":"page"},{"location":"model_setup/","page":"Model Setup","title":"Model Setup","text":"PI_simulation","category":"page"},{"location":"model_setup/#PlanktonIndividuals.PI_simulation","page":"Model Setup","title":"PlanktonIndividuals.PI_simulation","text":"PI_simulation(model; ΔT, nΔT, diag_freq,\n              PARF_path = PlanktonIndividuals.default_PAR,\n              temp_path = PlanktonIndividuals.default_temperature,\n              vels = (;),\n              res_dir = nothing\n              save_diags = false,\n              save_individuals = false,\n              vel_reuse = false\n              )\n\nGenerate the PI_simulation struct for a model with time step ΔT. \n\nKeyword Arguments\n\nΔT (required): model time step in second.\nnΔT (required): The number of time steps to run in simulation.\ndiag_freq (required): The frequency of diagnostics (in number of time steps).\nPARF_path and temp_path (optional): External forcings of PAR and temperature. Hourly data of a single day is required (25 data points in total).\nres_dir (optional): Create a directory to store results, nothing by default.\nsave_diags and save_individuals (optional): whether to save diagnostics or individuals.\nvels (optional): The velocity fields for nutrient fields and individuals. nothing means no velocities                    will be applied in the simulation. Otherwise, vels mush be a NamedTuple containing                    all u, v, and w. Each of u, v, and w must be an 4D-Array of                     (Nx, Ny, Nz+1, nΔT+1) elements, excluding halo points, but bounded in z direction.\n\n\n\n\n\n","category":"type"},{"location":"model_setup/#Diagnostics","page":"Model Setup","title":"Diagnostics","text":"","category":"section"},{"location":"model_setup/","page":"Model Setup","title":"Model Setup","text":"Model diagnostics are specified by diag_ntrs (for tracers) and diag_nprocs (for individuals). Diagnostics for individuals are aggregated into tracer fields.","category":"page"},{"location":"model_setup/","page":"Model Setup","title":"Model Setup","text":"A full list of available diagnostics are provided below:","category":"page"},{"location":"model_setup/","page":"Model Setup","title":"Model Setup","text":"diag_ntrs = (:PAR, :DIC, :NH4, :NO3, :PO4, :DOC, :DON, :DOP, :POC, :PON, :POP)\n\ndiag_nprocs = (:num,  # number of individuals\n               :graz, # number of grazed individuals\n               :mort, # number of died individuals\n               :dvid, # number of divided individuals\n               :PS,   # photosynthesis rate\n               :BS,   # biosynthesis rate\n               :VDOC, # DOC uptake rate\n               :VHN4, # NH4 uptake rate\n               :VNO3, # NO3 uptake rate\n               :VPO4, # PO4 uptake rate\n               :resp, # respiration rate\n               :exu,  # exudation rate\n               :Bm,   # functional biomass\n               :Cq,   # Carbon pool\n               :Nq,   # Nitrogen pool\n               :Pq,   # Phosphorus pool\n               :chl   # Chla\n               )","category":"page"},{"location":"model_setup/#Output","page":"Model Setup","title":"Output","text":"","category":"section"},{"location":"model_setup/","page":"Model Setup","title":"Model Setup","text":"Currently, we only support two types of output which are both save in JLD2 files. The first type of output is for individuals. The current state of all the individuals at each time step of a PI_simulation will be saved in a single file named individuals.jld2. An example structure of individuals.jld2 is shown below.","category":"page"},{"location":"model_setup/","page":"Model Setup","title":"Model Setup","text":"julia> jldopen(\"results/individuals.jld2\") # only the location and cell size is saved for now\nJLDFile /home/zhenwu/PI_GPU/results/individuals.jld2 (read-only)\n ├─📂 0000000060\n │  └─📂 sp1\n │     ├─🔢 x\n │     ├─🔢 y\n │     ├─🔢 z\n │     └─🔢 Sz\n └─📂 0000000120\n    └─📂 sp1\n       ├─🔢 x\n       ├─🔢 y\n       ├─🔢 z\n       └─🔢 Sz","category":"page"},{"location":"model_setup/","page":"Model Setup","title":"Model Setup","text":"The second type of output is for diagnostics. individuals at each time step will be aggregated into tracer fields. The frequency of diagnostics is specified by diag_freq in PI_simulation. Only diagnostics specified by diag_ntrs and diag_nprocs in PI_Model will be saved. All the diagnostics of a PI_simulation will be saved in a single file named diags.jld2. An example structure of diags.jld2 is shown below.","category":"page"},{"location":"model_setup/","page":"Model Setup","title":"Model Setup","text":"julia> jldopen(\"results/diags.jld2\")\nJLDFile /home/zhenwu/PI_GPU/results/diags.jld2 (read-only)\n ├─📂 0000000060\n │  ├─📂 nut\n │  │  ├─🔢 PAR\n │  │  ├─🔢 DOC\n │  │  ├─🔢 NH4\n │  │  └─🔢 NO3\n │  └─📂 sp1\n │     ├─🔢 num\n │     ├─🔢 graz\n │     ├─🔢 mort\n │     └─🔢 dvid\n └─📂 0000000120\n    ├─📂 nut\n    │  ├─🔢 PAR\n    │  ├─🔢 DOC\n    │  ├─🔢 NH4\n    │  └─🔢 NO3\n    └─📂 sp1\n       ├─🔢 num\n       ├─🔢 graz\n       ├─🔢 mort\n       └─🔢 dvid","category":"page"}]
}
