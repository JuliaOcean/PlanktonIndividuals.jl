var documenterSearchIndex = {"docs":
[{"location":"equations/#parameterization-of-phytoplankton-physiology","page":"Equations","title":"parameterization of phytoplankton physiology","text":"","category":"section"},{"location":"equations/","page":"Equations","title":"Equations","text":"(Image: skematic)","category":"page"},{"location":"equations/#Photosynthesis","page":"Equations","title":"Photosynthesis","text":"","category":"section"},{"location":"equations/","page":"Equations","title":"Equations","text":"Basically, we follow Geider et al. 1998 for the parameterization of photosynthesis, but without nutrient limitation.","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"PP=PP_maxcdot (1-e^frac-alpha cdot Icdot ChlPP_maxcdot C)","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"Unit: mmolC/cell/s","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"PP_max is scaled by a power-law relationship of cell size","category":"page"},{"location":"equations/#Nutrient-Uptake","page":"Equations","title":"Nutrient Uptake","text":"","category":"section"},{"location":"equations/","page":"Equations","title":"Equations","text":"Include intracellular nutrient limitation:","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"RegQ_i=biggfracR_iC^max-Q_iR_iC^max-R_iC^minbigg_0^1\nV_i=V_i^maxcdot regQ_icdotfracii+K_i^sat","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"i denotes NH_4, NO_3, PO_4.","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"Unit: mmolN/cell/s","category":"page"},{"location":"equations/#Biosynthesis-and-Excretion","page":"Equations","title":"Biosynthesis & Excretion","text":"","category":"section"},{"location":"equations/#Update-reserves:","page":"Equations","title":"Update reserves:","text":"","category":"section"},{"location":"equations/","page":"Equations","title":"Equations","text":"Q_C^R = Q_C^R+PP\nQ_N^R=Q_N^R+V_NO_3+V_NH_4\nQ_P^R=Q_P^R+V_PO_4","category":"page"},{"location":"equations/#Metabolic-Partitioning","page":"Equations","title":"Metabolic Partitioning","text":"","category":"section"},{"location":"equations/","page":"Equations","title":"Equations","text":"beta=fracacdot Vol_cell^b1+acdot Vol_cell^b\nBioSynC = betacdot k_mtbcdot Q_C^R\nMaintenC=(1-beta)cdot k_mtbcdot Q_C^R","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"BioSynN = k_mtbcdot Q_N^RR_NC\nBioSynP = k_mtbcdot Q_P^RR_PC","category":"page"},{"location":"equations/#Compute-biosynthesis-rate-and-excretion-rate","page":"Equations","title":"Compute biosynthesis rate and excretion rate","text":"","category":"section"},{"location":"equations/","page":"Equations","title":"Equations","text":"BioSyn=min(BioSynCBioSynNBioSynP)\nExcretC=BioSynC - BioSyn","category":"page"},{"location":"equations/#Update-reserves-and-biomass","page":"Equations","title":"Update reserves and biomass","text":"","category":"section"},{"location":"equations/","page":"Equations","title":"Equations","text":"Q_C^B = Q_C^B + BioSyn\nQ_C^R = Q_C^R - BioSyn - MaintenC\nQ_N^R = Q_N^R - BioSyn*R_NC\nQ_P^R = Q_N^R - BioSyn*R_PC","category":"page"},{"location":"equations/#Cell-division","page":"Equations","title":"Cell division","text":"","category":"section"},{"location":"equations/","page":"Equations","title":"Equations","text":"We use relative cell size RCS to indicate cell division. RCS of the smallest cell is 1.0. Q_C^B of the smallest cell is Cquota. Cells start to divide at RCS=20. The probability of individual cell division is a sigmoidal function of RCS.","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"RCS = Q_C^B  Cquota\nP_divide = rand(Bernoulli(02*(tanh(a*(RCS-b))+1)))","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"P_divide is computed every hour no matter what time step the model is.","category":"page"},{"location":"generated/horizontal_2D_example/","page":"Horizontal Two-Dimensional Example","title":"Horizontal Two-Dimensional Example","text":"EditURL = \"https://github.com/JuliaOcean/PlanktonIndividuals.jl/blob/master/examples/horizontal_2D_example.jl\"","category":"page"},{"location":"generated/horizontal_2D_example/#Horizontal-2-Dimensional-Example","page":"Horizontal Two-Dimensional Example","title":"Horizontal 2-Dimensional Example","text":"","category":"section"},{"location":"generated/horizontal_2D_example/","page":"Horizontal Two-Dimensional Example","title":"Horizontal Two-Dimensional Example","text":"Here we simulate phytoplankton cells as Lagrangian particles in a 2D flow field. The domain is periodic in both directions horizontally.","category":"page"},{"location":"generated/horizontal_2D_example/#.-Import-packages","page":"Horizontal Two-Dimensional Example","title":"1. Import packages","text":"","category":"section"},{"location":"generated/horizontal_2D_example/","page":"Horizontal Two-Dimensional Example","title":"Horizontal Two-Dimensional Example","text":"using PlanktonIndividuals, Plots","category":"page"},{"location":"generated/horizontal_2D_example/#.-Generate-Flow-Fields","page":"Horizontal Two-Dimensional Example","title":"2. Generate Flow Fields","text":"","category":"section"},{"location":"generated/horizontal_2D_example/","page":"Horizontal Two-Dimensional Example","title":"Horizontal Two-Dimensional Example","text":"First we'll generate grid information","category":"page"},{"location":"generated/horizontal_2D_example/","page":"Horizontal Two-Dimensional Example","title":"Horizontal Two-Dimensional Example","text":"grid = gen_Grid(size=(128, 128, 1), spacing=(1, 1, 1))","category":"page"},{"location":"generated/horizontal_2D_example/","page":"Horizontal Two-Dimensional Example","title":"Horizontal Two-Dimensional Example","text":"Then we use a stream function to generate the flow field which is a double-gyre configuration","category":"page"},{"location":"generated/horizontal_2D_example/","page":"Horizontal Two-Dimensional Example","title":"Horizontal Two-Dimensional Example","text":"scal = 3e-1\nf(x, y, z) = scal*(0.3*sin(x*1π/128)*sin(y*2π/128)+0.7*sin(x*2π/128)*sin(y*1π/128)) #stream function\n\nϕcorners=[f(x,y,0.) for x in 0:128, y in 0:128]\nϕcenters=[f(x,y,0.) for x in 0.5:128, y in 0.5:128]\n\nuu=-diff(ϕcorners,dims=2)[1:end-1,:]\nvv=diff(ϕcorners,dims=1)[:,1:end-1]\nuu=reshape(uu,(128,128,1))\nvv=reshape(vv,(128,128,1))\nww=zeros(128,128,2)\n\nuvels = fill(uu, 2)\nvvels = fill(vv, 2)\nwvels = fill(ww, 2)\nuvels = cat(uvels..., dims=4)\nvvels = cat(vvels..., dims=4)\nwvels = cat(wvels..., dims=4)\n\nnothing","category":"page"},{"location":"generated/horizontal_2D_example/#.-Model-Setup","page":"Horizontal Two-Dimensional Example","title":"3. Model Setup","text":"","category":"section"},{"location":"generated/horizontal_2D_example/","page":"Horizontal Two-Dimensional Example","title":"Horizontal Two-Dimensional Example","text":"Next we setup the individual-based model by specifying the architecture, grid, number of individuals, parameters, and nutrient initial conditions.","category":"page"},{"location":"generated/horizontal_2D_example/","page":"Horizontal Two-Dimensional Example","title":"Horizontal Two-Dimensional Example","text":"model = PI_Model(CPUs(), grid; individual_size = (Nsp = 1, N = 2^7, cap = 8),\n                 nut_source = [1.0, 0.02, 0.05, 0.01, 1.0, 0.1, 0.02, 0.2, 0.02, 0.001])","category":"page"},{"location":"generated/horizontal_2D_example/","page":"Horizontal Two-Dimensional Example","title":"Horizontal Two-Dimensional Example","text":"We also need to setup a runtime simulation to run the model. The simulation includes time step, number of time steps, flow fields that will be used etc.","category":"page"},{"location":"generated/horizontal_2D_example/","page":"Horizontal Two-Dimensional Example","title":"Horizontal Two-Dimensional Example","text":"sim = PI_simulation(model, ΔT = 60, nΔT = 1, diag_freq = 3600,\n                    vels=(u=uvels, v=vvels, w=wvels),\n                    vel_reuse = true)","category":"page"},{"location":"generated/horizontal_2D_example/#.-Run-the-Model","page":"Horizontal Two-Dimensional Example","title":"4. Run the Model","text":"","category":"section"},{"location":"generated/horizontal_2D_example/","page":"Horizontal Two-Dimensional Example","title":"Horizontal Two-Dimensional Example","text":"Finaly, we run the model and plot the distribution of individuals as well as nutrient fields We use Plots.jl to plot individuals and nutrient fields.","category":"page"},{"location":"generated/horizontal_2D_example/","page":"Horizontal Two-Dimensional Example","title":"Horizontal Two-Dimensional Example","text":"function plot(model::PI_Model)\n    # Coordinate arrays for plotting\n    xC, yC = collect(model.grid.xC)[3:130], collect(model.grid.yC)[3:130]\n\n    # heatmap of the flow field\n    fl_plot = Plots.contourf(xC, yC, ϕcenters', xlabel=\"x (m)\", ylabel=\"y (m)\", color=:balance, fmt=:png, colorbar=false)\n\n    # a scatter plot embeded in the flow fields\n    px = Array(model.individuals.phytos.sp1.data.x)\n    py = Array(model.individuals.phytos.sp1.data.y)\n    Plots.scatter!(fl_plot, px, py, ms=5, color = :red, legend=:none)\n\n    # DOC field\n    trac1 = Plots.contourf(xC, yC, Array(model.nutrients.DOC.data)[3:130,3:130,3]', xlabel=\"x (m)\", ylabel=\"y (m)\", clims=(0.5, 1.1), fmt=:png)\n\n    # Arrange the plots side-by-side.\n    plt = Plots.plot(fl_plot, trac1, size=(800, 400),\n        title=[lpad(model.t÷86400,2,\"0\")*\"day \"*lpad(model.t÷3600-24*(model.t÷86400),2,\"0\")*\"hour\" \"DOC (mmolC/L)\"])\n\n    return plt\nend","category":"page"},{"location":"generated/horizontal_2D_example/","page":"Horizontal Two-Dimensional Example","title":"Horizontal Two-Dimensional Example","text":"We run the model for 120 time steps (2 hour) and plot the individuals and DOC field.","category":"page"},{"location":"generated/horizontal_2D_example/","page":"Horizontal Two-Dimensional Example","title":"Horizontal Two-Dimensional Example","text":"for i in 1:120\n    update!(sim)\nend\n\nplot(model)","category":"page"},{"location":"generated/horizontal_2D_example/","page":"Horizontal Two-Dimensional Example","title":"Horizontal Two-Dimensional Example","text":"Or you can use the following code to generate an animation like below","category":"page"},{"location":"generated/horizontal_2D_example/","page":"Horizontal Two-Dimensional Example","title":"Horizontal Two-Dimensional Example","text":"anim = @animate for i in 1:120\n   update!(sim)\n   plot(model)\nend\ngif(anim, \"anim_fps15.gif\", fps = 15)","category":"page"},{"location":"generated/horizontal_2D_example/","page":"Horizontal Two-Dimensional Example","title":"Horizontal Two-Dimensional Example","text":"(Image: animation)","category":"page"},{"location":"generated/horizontal_2D_example/","page":"Horizontal Two-Dimensional Example","title":"Horizontal Two-Dimensional Example","text":"","category":"page"},{"location":"generated/horizontal_2D_example/","page":"Horizontal Two-Dimensional Example","title":"Horizontal Two-Dimensional Example","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/vertical_2D_example/","page":"Vertical Two-Dimensional Example","title":"Vertical Two-Dimensional Example","text":"EditURL = \"https://github.com/JuliaOcean/PlanktonIndividuals.jl/blob/master/examples/vertical_2D_example.jl\"","category":"page"},{"location":"generated/vertical_2D_example/#Vertical-2-Dimensional-Example","page":"Vertical Two-Dimensional Example","title":"Vertical 2-Dimensional Example","text":"","category":"section"},{"location":"generated/vertical_2D_example/","page":"Vertical Two-Dimensional Example","title":"Vertical Two-Dimensional Example","text":"Here we simulate phytoplankton cells as Lagrangian particles in a 2D flow field. The domain is periodic in x direction but bounded in z direction","category":"page"},{"location":"generated/vertical_2D_example/#.-Import-packages","page":"Vertical Two-Dimensional Example","title":"1. Import packages","text":"","category":"section"},{"location":"generated/vertical_2D_example/","page":"Vertical Two-Dimensional Example","title":"Vertical Two-Dimensional Example","text":"using PlanktonIndividuals, Plots","category":"page"},{"location":"generated/vertical_2D_example/#.-Generate-Flow-Fields","page":"Vertical Two-Dimensional Example","title":"2. Generate Flow Fields","text":"","category":"section"},{"location":"generated/vertical_2D_example/","page":"Vertical Two-Dimensional Example","title":"Vertical Two-Dimensional Example","text":"First we'll generate grid information","category":"page"},{"location":"generated/vertical_2D_example/","page":"Vertical Two-Dimensional Example","title":"Vertical Two-Dimensional Example","text":"grid = gen_Grid(size=(128, 1, 128), spacing=(1, 1, 1))","category":"page"},{"location":"generated/vertical_2D_example/","page":"Vertical Two-Dimensional Example","title":"Vertical Two-Dimensional Example","text":"Then we use a stream function to generate the flow fields","category":"page"},{"location":"generated/vertical_2D_example/","page":"Vertical Two-Dimensional Example","title":"Vertical Two-Dimensional Example","text":"scal = 2e-1\nf(x, y, z) = scal*sin(x*2π/128)*sin(z*2π/128) #stream function\n\nϕcorners=[f(x,0.,z) for x in 0:128, z in -128:0]\nϕcenters=[f(x,0.,z) for x in 0.5:128, z in -128:-0.5]\n\nuu=-diff(ϕcorners,dims=2)[1:end-1,:]\nww=diff(ϕcorners,dims=1)\nuu=reshape(uu,(128,1,128))\nww=reshape(ww,(128,1,129))\n\nuvels = fill(uu, 2)\nvvels = fill(0*uu, 2)\nwvels = fill(ww, 2)\nuvels = cat(uvels..., dims=4)\nvvels = cat(vvels..., dims=4)\nwvels = cat(wvels..., dims=4)\n\nnothing","category":"page"},{"location":"generated/vertical_2D_example/#.-Model-Setup","page":"Vertical Two-Dimensional Example","title":"3. Model Setup","text":"","category":"section"},{"location":"generated/vertical_2D_example/","page":"Vertical Two-Dimensional Example","title":"Vertical Two-Dimensional Example","text":"Next we setup the individual-based model by specifying the architecture, grid, number of individuals, parameters, and nutrient initial conditions.","category":"page"},{"location":"generated/vertical_2D_example/","page":"Vertical Two-Dimensional Example","title":"Vertical Two-Dimensional Example","text":"model = PI_Model(CPUs(), grid; individual_size = (Nsp = 1, N = 2^7, cap = 8),\n                 nut_source = [1.0, 0.02, 0.05, 0.01, 1.0, 0.1, 0.02, 0.2, 0.02, 0.001])","category":"page"},{"location":"generated/vertical_2D_example/","page":"Vertical Two-Dimensional Example","title":"Vertical Two-Dimensional Example","text":"We also need to setup a runtime simulation to run the model. The simulation includes time step, number of time steps, flow fields that will be used etc.","category":"page"},{"location":"generated/vertical_2D_example/","page":"Vertical Two-Dimensional Example","title":"Vertical Two-Dimensional Example","text":"sim = PI_simulation(model, ΔT = 60, nΔT = 1, diag_freq = 3600,\n                    vels=(u=uvels, v=vvels, w=wvels),\n                    vel_reuse = true)","category":"page"},{"location":"generated/vertical_2D_example/#.-Run-the-Model","page":"Vertical Two-Dimensional Example","title":"4. Run the Model","text":"","category":"section"},{"location":"generated/vertical_2D_example/","page":"Vertical Two-Dimensional Example","title":"Vertical Two-Dimensional Example","text":"Finaly, we run the model and plot the distribution of individuals as well as nutrient fields We use Plots.jl to plot individuals and nutrient fields.","category":"page"},{"location":"generated/vertical_2D_example/","page":"Vertical Two-Dimensional Example","title":"Vertical Two-Dimensional Example","text":"function plot(model::PI_Model)\n    # Coordinate arrays for plotting\n    xC, zC = collect(model.grid.xC)[3:130], collect(model.grid.zC)[3:130]\n\n    # contour of the flow field\n    fl_plot = Plots.contourf(xC, zC, ϕcenters', xlabel=\"x (m)\", ylabel=\"z (m)\", color=:balance, fmt=:png, colorbar=false)\n\n    # a scatter plot embeded in the flow fields\n    px = Array(model.individuals.phytos.sp1.data.x)\n    pz = Array(model.individuals.phytos.sp1.data.z)\n    Plots.scatter!(fl_plot, px, pz, ms=5, color = :red, legend=:none)\n\n    # DOC field\n    trac1 = Plots.contourf(xC, zC, Array(model.nutrients.DOC.data)[3:130,3,3:130]', xlabel=\"x (m)\", ylabel=\"z (m)\", clims=(0.5, 1.1), fmt=:png)\n\n    # Arrange the plots side-by-side.\n    plt = Plots.plot(fl_plot, trac1, size=(800, 400),\n        title=[lpad(model.t÷86400,2,\"0\")*\"day \"*lpad(model.t÷3600-24*(model.t÷86400),2,\"0\")*\"hour\" \"DOC (mmolC/L)\"])\n\n    return plt\nend","category":"page"},{"location":"generated/vertical_2D_example/","page":"Vertical Two-Dimensional Example","title":"Vertical Two-Dimensional Example","text":"We run the model for 120 time steps (2 hour) and plot the individuals and DOC field.","category":"page"},{"location":"generated/vertical_2D_example/","page":"Vertical Two-Dimensional Example","title":"Vertical Two-Dimensional Example","text":"for i in 1:120\n    update!(sim)\nend\n\nplot(model)","category":"page"},{"location":"generated/vertical_2D_example/","page":"Vertical Two-Dimensional Example","title":"Vertical Two-Dimensional Example","text":"Or you can use the following code to generate an animation like below","category":"page"},{"location":"generated/vertical_2D_example/","page":"Vertical Two-Dimensional Example","title":"Vertical Two-Dimensional Example","text":"anim = @animate for i in 1:120\n   update!(sim)\n   plot(model)\nend\ngif(anim, \"anim_fps15.gif\", fps = 15)","category":"page"},{"location":"generated/vertical_2D_example/","page":"Vertical Two-Dimensional Example","title":"Vertical Two-Dimensional Example","text":"(Image: animation)","category":"page"},{"location":"generated/vertical_2D_example/","page":"Vertical Two-Dimensional Example","title":"Vertical Two-Dimensional Example","text":"","category":"page"},{"location":"generated/vertical_2D_example/","page":"Vertical Two-Dimensional Example","title":"Vertical Two-Dimensional Example","text":"This page was generated using Literate.jl.","category":"page"},{"location":"function_index/#Index","page":"Function index","title":"Index","text":"","category":"section"},{"location":"function_index/","page":"Function index","title":"Function index","text":"","category":"page"},{"location":"function_index/","page":"Function index","title":"Function index","text":"Modules = [PlanktonIndividuals]\nOrder   = [:type,:function]","category":"page"},{"location":"function_index/#PlanktonIndividuals.PI_Model-Tuple{Architecture,Grids}","page":"Function index","title":"PlanktonIndividuals.PI_Model","text":"PI_Model(arch::Architecture, grid::Grids;\n        individual_size = (Nsp = 1, N = 1024, cap = 8),\n        bgc_params = bgc_params_default(), \n        phyt_params = phyt_params_default(),\n        nut_source = [20.0, 0.20, 0.50, 0.03, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n        diag_ntrs = (:PAR, :DOC, :NH4, :NO3),\n        diag_nprocs = (:num, :graz, :mort, :dvid),\n        t = 0.0,\n        )\n\nGenerate the PI_Model struct on grid. \n\nKeyword Arguments\n\narch (required): CPUs() or GPUs(). The computer architecture used to time-step model.\ngrid (required): The resolution and discrete geometry on which model is solved.\nindividual_size (optional): NamedTuple used to set number of species Nsp, number of individuals N,                               and max individual capacity cap.\nbgc_params (optional): Parameter set for biogeochemical processes modeled in the model.\nphyt_params (optional): Parameter set for physiological processes of individuals modeled in the model.\nnut_source (optional): The source of initial conditions of nutrient fields, should be either a 10-element array                           or a Dict containing the file paths pointing to the files of nutrient initial conditions.\ndiag_ntrs (optional): NamedTuple containing the names of nutrient fields to be diagnosed.\ndiag_nprocs (optional): NamedTuple containing the names of physiological processes to be diagnosed.\nt (optional): Model time, start from 0 by default, in second.\n\n\n\n\n\n","category":"method"},{"location":"function_index/#PlanktonIndividuals.PI_simulation-Tuple{PI_Model}","page":"Function index","title":"PlanktonIndividuals.PI_simulation","text":"PI_simulation(model; ΔT, nΔT, diag_freq,\n              PARF_path = dirname(pathof(PlanktonIndividuals))*\"/../samples/PAR.bin\",\n              temp_path = dirname(pathof(PlanktonIndividuals))*\"/../samples/temp.bin\",\n              vels = (;),\n              res_dir = nothing\n              save_diags = false,\n              save_individuals = false,\n              vel_reuse = false\n              )\n\nGenerate the PI_simulation struct for a model with time step ΔT. \n\nKeyword Arguments\n\nΔT (required): model time step in second.\nnΔT (required): The number of time steps to run in simulation.\ndiag_freq (required): The frequency of diagnostics in second.\nPARF_path and temp_path (optional): External forcings of PAR and temperature.\nres_dir (optional): Create a directory to store results, nothing by default.\nsave_diags and save_individuals (optional): whether to save diagnostics or individuals.\nvels (optional): The velocity fields for nutrient fields and individuals. nothing means no velocities                    will be applied in the simulation. Otherwise, vels mush be a NamedTuple containing                    all u, v, and w. Each of u, v, and w must be an 4D-Array of                     (Nx+2Hx, Ny+2Hy, Nz+2Hz, nΔT+1) elements, including halo points and initial conditions.\n\n\n\n\n\n","category":"method"},{"location":"function_index/#PlanktonIndividuals.PI_TimeStep!-Tuple{PI_Model,Any,String}","page":"Function index","title":"PlanktonIndividuals.PI_TimeStep!","text":"PI_TimeStep!(model, ΔT, resultpath)\n\nUpdate physiology processes and nutrient field of PI_Model one time step forward.\n\nKeyword Arguments\n\nmodel: PI_Model to be updated one time step forward\nΔT: The length of a time step\nresultpath (optional): The file path to store model output. \n\n\n\n\n\n","category":"method"},{"location":"function_index/#PlanktonIndividuals.PrepRunDir-Tuple{}","page":"Function index","title":"PlanktonIndividuals.PrepRunDir","text":"PrepRunDir(res::String=\"results/\")\n\nCreate res/ folder if needed. Remove old files from it if needed.\n\n\n\n\n\n","category":"method"},{"location":"function_index/#PlanktonIndividuals.gen_Grid-Tuple{}","page":"Function index","title":"PlanktonIndividuals.gen_Grid","text":"gen_Grid(size = (Nx, Ny, Nz), spacing = (Δx, Δy, Δz), halo = (2, 2, 2))\n\nCreats a Grids struct with size = (Nx, Ny, Nz) grid points. The topology is fixes as (Periodic, Periodic, Bounded)\n\nKeyword Arguments\n\nsize (required): A tuple prescribing the number of grid points.                        size is a 3-tuple no matter for 3D, 2D, or 1D model.\nspacing (required): A tuple prescribing the length of each grid point in x, y, and z directions.                       spacing is a 3-tuple no matter for 3D, 2D, or 1D model.\nhalo (optional): A tuple of integers that specifies the size of the halo region of cells                       surrounding the physical interior for each direction.                       halo is a 3-tuple no matter for 3D, 2D, or 1D model.                       At least 2 halo points are needed for DST3FL advection scheme.\n\n\n\n\n\n","category":"method"},{"location":"function_index/#PlanktonIndividuals.generate_nutrients-Tuple{Any,Any,Array}","page":"Function index","title":"PlanktonIndividuals.generate_nutrients","text":"generate_nutrients(arch, grid, source)\n\nSet up initial nutrient fields according to grid.\n\nKeyword Arguments\n\narch: CPUs() or GPUs(). The computer architecture used to time-step model.\ngrid: The resolution and discrete geometry on which nutrient fields are solved.\nsource: An 10-element array with each element representing the initial condition of a kind of nutrient,            or a Dict containing the file paths pointing to the files of nutrient initial conditions.\n\n\n\n\n\n","category":"method"},{"location":"function_index/#PlanktonIndividuals.update!-Tuple{PI_simulation}","page":"Function index","title":"PlanktonIndividuals.update!","text":"update!(sim::PI_simulaiton)\n\nupdate the PI_simulaiton for sim.nΔT time steps.\n\n\n\n\n\n","category":"method"},{"location":"function_index/#PlanktonIndividuals.update_bgc_params-Tuple{Dict}","page":"Function index","title":"PlanktonIndividuals.update_bgc_params","text":"update_bgc_params(tmp)\n\nUpdate parameter values based on a .yaml file provided by user\n\nKeyword Arguments\n\ntmp is a Dict containing the parameters needed to be upadated\n\n\n\n\n\n","category":"method"},{"location":"function_index/#PlanktonIndividuals.update_phyt_params-Tuple{Dict}","page":"Function index","title":"PlanktonIndividuals.update_phyt_params","text":"update_phyt_params(tmp)\n\nUpdate parameter values based on a .yaml file provided by user\n\nKeyword Arguments\n\ntmp is a Dict containing the parameters needed to be upadated\n\n\n\n\n\n","category":"method"},{"location":"function_index/#PlanktonIndividuals.write_diags_to_jld2-NTuple{4,Any}","page":"Function index","title":"PlanktonIndividuals.write_diags_to_jld2","text":"write_diags_to_jld2(diags, filepath, t, ncounts)\n\nwrite model output of individuals at each time step to a binary file\n\nKeyword Arguments\n\ndiags: NamedTuple of a list of diagnostics at current time step.\nfilepath: The file path to store JLD2 files.\nt: Current time of model in second, usually starting from 0.\nncounts: the number of time steps included in each diagnostic\n\n\n\n\n\n","category":"method"},{"location":"function_index/#PlanktonIndividuals.write_individuals_to_jld2-Tuple{NamedTuple,Any,Any}","page":"Function index","title":"PlanktonIndividuals.write_individuals_to_jld2","text":"write_individuals_to_bin(phytos, filepath, t)\n\nwrite model output of individuals at each time step to a binary file\n\nKeyword Arguments\n\nphytos: NamedTuple of a list of individual species.\nfilepath: The file path to store JLD2 files.\nt: Current time of model in second, usually starting from 0.\natts (optional): attributes of individuals to save, default (:x, :y, :z)\n\n\n\n\n\n","category":"method"},{"location":"function_index/#PlanktonIndividuals.write_nut_nc_each_step-Tuple{NamedTuple,Int64,String}","page":"Function index","title":"PlanktonIndividuals.write_nut_nc_each_step","text":"write_nut_nc_each_step(nut, t, filepath)\n\nWrite a NetCDF file of nutrient fields at each time step\n\nKeyword Arguments\n\nnut: NamedTuple of nutrient tracers.\nt: Current time of model in second, usually starting from 0.\nfilepath: The file path to store NetCDF files.\n\n\n\n\n\n","category":"method"},{"location":"#PlanktonIndividuals.jl","page":"Home","title":"PlanktonIndividuals.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for PlanktonIndividuals.jl which simulates the behavior of an ensemble of phytoplankton individuals.","category":"page"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Here's the introduction of PlanktonIndividuals.jl","category":"page"},{"location":"#Geting-help","page":"Home","title":"Geting help","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you are interested in using PlanktonIndividuals.jl or are trying to figure out how to use it, please feel free to ask us questions and get in touch!   If you're trying to set up a model then check out the examples and model setup documentation. Please feel free to open an issue if you have any questions, comments, suggestions, etc!  ","category":"page"},{"location":"various/#Function-Inventory","page":"-","title":"Function Inventory","text":"","category":"section"},{"location":"various/","page":"-","title":"-","text":"Use cases:","category":"page"},{"location":"various/","page":"-","title":"-","text":"Oceananigans_PlanktonIndividuals.jl","category":"page"},{"location":"various/","page":"-","title":"-","text":"Infrastructure functions:","category":"page"},{"location":"various/","page":"-","title":"-","text":"model_struct.jl defines velocity, grids, nutrient_fields, and rem structs.\nmodel.jl deals with the model basic functionalities.\nmodel_setup.jl is setup_agents and setup_nutrients\noption_params.jl and param_defaults.jl deal with model parameter values\nutils.jl utility functions for IO and operations.","category":"page"},{"location":"various/","page":"-","title":"-","text":"process functions:","category":"page"},{"location":"various/","page":"-","title":"-","text":"phyt_process.jl = daynight, PAR_cal, PC, Nuptake, chl_sync, divide, phyt_update\nnutrient_processes.jl = compute_nut_biochem, compute_source_term, nut_update\ndst3fl.jl 3rd order DST Scheme with flux limiting\n2nd_adv_diffu.jl right hand side term functions (?)\nagent_div.jl = is mostly agent_move, agent_move_1D + double_grid, trilinear_itpl, simple_itpl","category":"page"},{"location":"various/#Model-Variables","page":"-","title":"Model Variables","text":"","category":"section"},{"location":"various/","page":"-","title":"-","text":"The lists and text below likely is out of date","category":"page"},{"location":"various/#)-state-variables","page":"-","title":"1) state variables","text":"","category":"section"},{"location":"various/","page":"-","title":"-","text":"phyts_a\nnutrients","category":"page"},{"location":"various/#)-input-variables","page":"-","title":"2) input variables","text":"","category":"section"},{"location":"various/","page":"-","title":"-","text":"g from grid_offline() (grid variables)\ntemp, IR from read_input() (before loop)\nremin from rem() (before loop)\nvelᵇ from read_offline_vels() (in loop)","category":"page"},{"location":"various/","page":"-","title":"-","text":"Notes:","category":"page"},{"location":"various/","page":"-","title":"-","text":"IR and temp get cycle through / interpolated inside phyt_update (via IR[trunc(Int,t*ΔT/3600)]). Not sure about daynight(t,IR) in phyt_update. \nread_offline_vels receives trunc(Int,t*ΔT/3600) as argument.\nremin is time-invariant; like g.","category":"page"},{"location":"various/#)-intermediate-variables","page":"-","title":"3) intermediate variables","text":"","category":"section"},{"location":"various/","page":"-","title":"-","text":"F = compute_nut_biochem(nutrients, remin)\ngtr = compute_source_term(nutrients, velᵇ, g, F)\nnutₜ = nut_update(nutrients, consume, g, gtr, ΔT)","category":"page"},{"location":"various/#)-diagnostic-variables","page":"-","title":"4) diagnostic variables","text":"","category":"section"},{"location":"various/","page":"-","title":"-","text":"dvid_ct, graz_ct, death_ct from phyt_update\ngtr, nutₜ, velᵇ, agent_num from ","category":"page"},{"location":"various/#Output-Files","page":"-","title":"Output Files","text":"","category":"section"},{"location":"various/","page":"-","title":"-","text":"The lists and text below likely is out of date","category":"page"},{"location":"various/#)-listing","page":"-","title":"1) listing","text":"","category":"section"},{"location":"various/","page":"-","title":"-","text":"B1.bin\t\tall agents at all time steps for species 1\nB2.bin\t\t... species 2\ncons_C.txt\ttotal carbon for each time step\ncons_DIN.txt\t... DIN ...\ncons_N.txt\t... N ...\ngrid.bin\tgrid (input)\nIR.bin\t\tirradiance (input)\nnutrients/nut.0001.nc (all nitrients for 1 time step)\t\nnutrients/nut.0002.nc (same...)\noutput1.bin\taverage for all agents for each time step for species 1\noutput2.bin\t... 2\noutput.bin\t... for the two species\nVD1.bin\t\tvertical profile of the agents opouplation for species 1\nVD2.bin\t\t... species 2","category":"page"},{"location":"various/#)-netcdf-output","page":"-","title":"2) netcdf output","text":"","category":"section"},{"location":"various/","page":"-","title":"-","text":"netcdf nut.0001 {\ndimensions:\n        yC = 1 ;\n        xC = 1 ;\n        zC = 40 ;\nvariables:\n        double DIC(zC, yC, xC) ;\n                DIC:units = \"mmolC/m^3\" ;\n        float yC(yC) ;\n                yC:units = \"m\" ;\n                yC:longname = \"Locations of the cell centers in the y-direction.\" ;\n        float xC(xC) ;\n                xC:units = \"m\" ;\n                xC:longname = \"Locations of the cell centers in the x-direction.\" ;\n        float zC(zC) ;\n                zC:units = \"m\" ;\n                zC:longname = \"Locations of the cell centers in the z-direction.\" ;\n        double DIN(zC, yC, xC) ;\n                DIN:units = \"mmolN/m^3\" ;\n        double DOC(zC, yC, xC) ;\n                DOC:units = \"mmolC/m^3\" ;\n        double DON(zC, yC, xC) ;\n                DON:units = \"mmolN/m^3\" ;\n        double POC(zC, yC, xC) ;\n                POC:units = \"mmolC/m^3\" ;\n        double PON(zC, yC, xC) ;\n                PON:units = \"mmolN/m^3\" ;","category":"page"},{"location":"various/#Data-Structures","page":"-","title":"Data Structures","text":"","category":"section"},{"location":"various/","page":"-","title":"-","text":"The lists and text below likely is out of date","category":"page"},{"location":"various/","page":"-","title":"-","text":" output = DataFrame(time=0, \n gen_ave=mean(B[1].gen), \n spec_ave = mean(B[1].sp),\n Cq1_ave=mean(B[1].Cq1), \n Cq2_ave=mean(B[1].Cq2), \n Nq_ave=mean(B[1].Nq),\n size_ave=mean(B[1].size),\n chl_ave=mean(B[1].chl),\n Population=size(B[1],1),\n dvid=0,\n graz=0,\n death = 0)","category":"page"},{"location":"various/#Plotting-Functions","page":"-","title":"Plotting Functions","text":"","category":"section"},{"location":"various/","page":"-","title":"-","text":"The lists and text below likely is out of date","category":"page"},{"location":"various/","page":"-","title":"-","text":"julia> using DataFrames, Serialization\njulia> output=open(deserialize,\"results/output.bin\");\njulia> plot(output.Population)","category":"page"}]
}
