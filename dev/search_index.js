var documenterSearchIndex = {"docs":
[{"location":"function_index/#Function-Index","page":"Function index","title":"Function Index","text":"","category":"section"},{"location":"function_index/","page":"Function index","title":"Function index","text":"","category":"page"},{"location":"benchmarks/#benchmarks","page":"Benchmarks","title":"Benchmarks","text":"","category":"section"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"Here we benchmark the model performance in two Architectures. The number of individuals used in the benchmark are (2, 2^5, 2^10, 2^15). And we also use different grid resolutions in 2-Dimensional and 3-Dimensional model setup.","category":"page"},{"location":"benchmarks/#Dimensional-model","page":"Benchmarks","title":"0-Dimensional model","text":"","category":"section"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"This is a benchmark of a simple 0-Dimensional model setup without advection of Eulerian tracers. However, the advection of individuals still take the same amount of time whether the velocity field is provided or not.","category":"page"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"PlanktonIndividuals v0.3.5\nJulia Version 1.6.2\nCommit 1b93d53fc4 (2021-07-14 15:36 UTC)\nPlatform Info:\n  OS: Linux (x86_64-pc-linux-gnu)\n  CPU: Intel(R) Xeon(R) CPU E5-2680 v4 @ 2.40GHz\n  WORD_SIZE: 64\n  LIBM: libopenlibm\n  LLVM: libLLVM-11.0.1 (ORCJIT, broadwell)\n  GPU: Tesla P100-PCIE-12GB","category":"page"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"Arch N min mean max memory allocs\nCPU 2 891.520 μs 993.516 μs 1.527 ms 630.64 KiB 3403\nCPU 32 966.725 μs 1.325 ms 3.304 ms 630.64 KiB 3403\nCPU 1024 3.187 ms 3.332 ms 3.999 ms 630.64 KiB 3403\nCPU 32768 73.771 ms 76.160 ms 81.231 ms 630.16 KiB 3372\nGPU 2 8.287 ms 8.512 ms 9.272 ms 2.51 MiB 26341\nGPU 32 8.386 ms 8.520 ms 8.888 ms 2.51 MiB 26321\nGPU 1024 8.335 ms 8.546 ms 9.378 ms 2.51 MiB 26332\nGPU 32768 8.484 ms 8.645 ms 9.274 ms 2.51 MiB 26332","category":"page"},{"location":"benchmarks/#Dimensional-model-2","page":"Benchmarks","title":"2-Dimensional model","text":"","category":"section"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"This is the benchmark of a 2-Dimensional model setup with (Ns, 1, Ns) grid cells. Here Ns = [32, 64, 128].","category":"page"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"PlanktonIndividuals v0.3.5\nJulia Version 1.6.2\nCommit 1b93d53fc4 (2021-07-14 15:36 UTC)\nPlatform Info:\n  OS: Linux (x86_64-pc-linux-gnu)\n  CPU: Intel(R) Xeon(R) CPU E5-2680 v4 @ 2.40GHz\n  WORD_SIZE: 64\n  LIBM: libopenlibm\n  LLVM: libLLVM-11.0.1 (ORCJIT, broadwell)\n  GPU: Tesla P100-PCIE-12GB","category":"page"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"Arch N Ns min mean max memory allocs\nCPU 2 32 4.333 ms 4.788 ms 5.391 ms 2.85 MiB 3439\nCPU 2 64 13.344 ms 17.459 ms 18.877 ms 8.83 MiB 3412\nCPU 2 128 52.593 ms 60.354 ms 67.061 ms 31.87 MiB 3412\nCPU 32 32 4.457 ms 5.318 ms 5.529 ms 2.85 MiB 3439\nCPU 32 64 13.408 ms 15.995 ms 17.091 ms 8.83 MiB 3412\nCPU 32 128 53.254 ms 55.793 ms 72.153 ms 31.87 MiB 3412\nCPU 1024 32 7.104 ms 7.796 ms 8.288 ms 2.85 MiB 3439\nCPU 1024 64 17.687 ms 20.254 ms 22.347 ms 8.83 MiB 3412\nCPU 1024 128 54.135 ms 55.020 ms 61.095 ms 31.87 MiB 3412\nCPU 32768 32 93.750 ms 93.982 ms 95.164 ms 2.85 MiB 3408\nCPU 32768 64 107.631 ms 109.786 ms 113.385 ms 8.83 MiB 3412\nCPU 32768 128 146.828 ms 147.768 ms 153.719 ms 31.87 MiB 3412\nGPU 2 32 8.190 ms 8.363 ms 9.151 ms 2.56 MiB 26026\nGPU 2 64 8.197 ms 8.370 ms 9.112 ms 2.65 MiB 26109\nGPU 2 128 8.286 ms 8.518 ms 9.901 ms 3.03 MiB 26254\nGPU 32 32 8.069 ms 8.230 ms 8.798 ms 2.56 MiB 25998\nGPU 32 64 8.240 ms 8.425 ms 9.406 ms 2.65 MiB 26101\nGPU 32 128 8.370 ms 8.603 ms 9.845 ms 3.03 MiB 26216\nGPU 1024 32 8.109 ms 8.231 ms 8.743 ms 2.56 MiB 26017\nGPU 1024 64 9.132 ms 9.514 ms 10.792 ms 2.65 MiB 26114\nGPU 1024 128 8.320 ms 8.527 ms 9.971 ms 3.03 MiB 26237\nGPU 32768 32 8.159 ms 8.320 ms 9.133 ms 2.56 MiB 26037\nGPU 32768 64 8.591 ms 8.814 ms 9.488 ms 2.65 MiB 26136\nGPU 32768 128 8.324 ms 8.554 ms 9.934 ms 3.03 MiB 26233","category":"page"},{"location":"benchmarks/#Dimensional-model-3","page":"Benchmarks","title":"3-Dimensional model","text":"","category":"section"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"This is the benchmark of a 3-Dimensional model setup with (Ns, Ns, Ns) grid cells. Here Ns = [32, 64].","category":"page"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"PlanktonIndividuals v0.3.5\nJulia Version 1.6.2\nCommit 1b93d53fc4 (2021-07-14 15:36 UTC)\nPlatform Info:\n  OS: Linux (x86_64-pc-linux-gnu)\n  CPU: Intel(R) Xeon(R) CPU E5-2680 v4 @ 2.40GHz\n  WORD_SIZE: 64\n  LIBM: libopenlibm\n  LLVM: libLLVM-11.0.1 (ORCJIT, broadwell)\n  GPU: Tesla P100-PCIE-12GB","category":"page"},{"location":"benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"Arch N Ns min mean max memory allocs\nCPU 2 32 38.397 ms 39.306 ms 45.373 ms 1.53 MiB 3180\nCPU 2 64 326.354 ms 330.216 ms 343.420 ms 8.58 MiB 3181\nCPU 32 32 38.239 ms 38.611 ms 41.134 ms 1.53 MiB 3180\nCPU 32 64 326.684 ms 328.294 ms 334.325 ms 8.58 MiB 3181\nCPU 1024 32 41.330 ms 42.156 ms 46.322 ms 1.53 MiB 3180\nCPU 1024 64 329.427 ms 329.809 ms 330.225 ms 8.58 MiB 3181\nCPU 32768 32 136.383 ms 136.740 ms 138.306 ms 1.53 MiB 3180\nCPU 32768 64 479.461 ms 483.093 ms 511.492 ms 8.58 MiB 3181\nGPU 2 32 7.783 ms 7.967 ms 9.286 ms 3.51 MiB 25128\nGPU 2 64 11.031 ms 11.614 ms 14.124 ms 10.57 MiB 25668\nGPU 32 32 8.651 ms 9.927 ms 17.521 ms 3.51 MiB 25108\nGPU 32 64 10.505 ms 10.758 ms 12.446 ms 10.57 MiB 25654\nGPU 1024 32 7.803 ms 8.307 ms 9.483 ms 3.51 MiB 25155\nGPU 1024 64 10.502 ms 10.755 ms 12.111 ms 10.57 MiB 25693\nGPU 32768 32 7.808 ms 8.043 ms 9.871 ms 3.51 MiB 25153\nGPU 32768 64 11.533 ms 12.037 ms 13.389 ms 10.57 MiB 25745","category":"page"},{"location":"library/#Library","page":"Library","title":"Library","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"The public user interface.","category":"page"},{"location":"library/#Architectures","page":"Library","title":"Architectures","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"Modules = [PlanktonIndividuals.Architectures]\nPrivate = false\nPages   = [ \"Architectures.jl\"]","category":"page"},{"location":"library/#PlanktonIndividuals.Architectures.Architecture","page":"Library","title":"PlanktonIndividuals.Architectures.Architecture","text":"Architecture\n\nAbstract type for architectures supported by PlanktonIndividuals.\n\n\n\n\n\n","category":"type"},{"location":"library/#PlanktonIndividuals.Architectures.CPU","page":"Library","title":"PlanktonIndividuals.Architectures.CPU","text":"CPU <: Architecture\n\nRun PlanktonIndividuals on one CPU node.\n\n\n\n\n\n","category":"type"},{"location":"library/#PlanktonIndividuals.Architectures.GPU","page":"Library","title":"PlanktonIndividuals.Architectures.GPU","text":"GPU <: Architecture\n\nRun PlanktonIndividuals on one GPU node.\n\n\n\n\n\n","category":"type"},{"location":"library/#Grids","page":"Library","title":"Grids","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"Modules = [PlanktonIndividuals.Grids]\nPrivate = false\nPages   = [\n    \"Grids/Grids.jl\",\n    \"Grids/regular_rectilinear_grid.jl\",\n    \"Grids/regular_lat_lon_grid.jl\",\n    \"Grids/vertically_stretched_lat_lon_grid.jl\"\n]","category":"page"},{"location":"library/#PlanktonIndividuals.Grids.AbstractGrid","page":"Library","title":"PlanktonIndividuals.Grids.AbstractGrid","text":"AbstractGrid{TX, TY, TZ}\n\nAbstract type for grids with elements of type Float64 and topology {TX, TY, TZ}.\n\n\n\n\n\n","category":"type"},{"location":"library/#PlanktonIndividuals.Grids.Bounded","page":"Library","title":"PlanktonIndividuals.Grids.Bounded","text":"Bounded\n\nGrid topology for bounded dimensions.\n\n\n\n\n\n","category":"type"},{"location":"library/#PlanktonIndividuals.Grids.Periodic","page":"Library","title":"PlanktonIndividuals.Grids.Periodic","text":"Periodic\n\nGrid topology for periodic dimensions.\n\n\n\n\n\n","category":"type"},{"location":"library/#PlanktonIndividuals.Grids.RegularRectilinearGrid-Tuple{}","page":"Library","title":"PlanktonIndividuals.Grids.RegularRectilinearGrid","text":"RegularRectilinearGrid(;size, spacing,\n                        topology = (Periodic, Periodic, Bounded),\n                        halo = (2, 2, 2))\n\nCreats a RegularRectilinearGrid struct with size = (Nx, Ny, Nz) grid points.\n\nKeyword Arguments (Required)\n\nsize : A tuple prescribing the number of grid points.                size is a 3-tuple no matter for 3D, 2D, or 1D model.\nspacing : A tuple prescribing the length of each grid point in x, y, and z directions.               spacing is a 3-tuple no matter for 3D, 2D, or 1D model.\n\nKeyword Arguments (Optional)\n\ntopology : A 3-tuple specifying the topology of the domain.               The topology can be either Periodic or Bounded in each direction.\nhalo : A tuple of integers that specifies the size of the halo region of cells               surrounding the physical interior for each direction.               halo is a 3-tuple no matter for 3D, 2D, or 1D model.               At least 2 halo points are needed for DST3FL advection scheme.\n\n\n\n\n\n","category":"method"},{"location":"library/#PlanktonIndividuals.Grids.RegularLatLonGrid-Tuple{}","page":"Library","title":"PlanktonIndividuals.Grids.RegularLatLonGrid","text":"RegularLatLonGrid(;size, lat, lon, z,\n                   radius = 6370.0e3,\n                   halo = (2, 2, 2))\n\nCreats a RegularLatLonGrid struct with size = (Nx, Ny, Nz) grid points.\n\nKeyword Arguments (Required)\n\nsize : A tuple prescribing the number of grid points.                size is a 3-tuple no matter for 3D, 2D, or 1D model.\nlat : A 2-tuple specifying the startind and ending points in latitudinal direction.               Possible values are from -80 (80S) to 80 (80N).\nlon : A 2-tuple specifying the startind and ending points in longitudinal direction.               Possible values are from -180 (180W) to 180 (180E).\nz : A 2-tuple specifying the startind and ending points in vertical direction.               Vertical indexing starts from surface and use negative numbers for depth.\n\nKeyword Arguments (Optional)\n\nradius : Specify the radius of the Earth used in the model, 6370.0e3 meters by default.\nhalo : A tuple of integers that specifies the size of the halo region of cells               surrounding the physical interior for each direction.               halo is a 3-tuple no matter for 3D, 2D, or 1D model.               At least 2 halo points are needed for DST3FL advection scheme.\n\n\n\n\n\n","category":"method"},{"location":"library/#PlanktonIndividuals.Grids.VerticallyStretchedLatLonGrid","page":"Library","title":"PlanktonIndividuals.Grids.VerticallyStretchedLatLonGrid","text":"VerticallyStretchedLatLonGrid{TX, TY, TZ} <: AbstractGrid{TX, TY, TZ}\n\nA horizontally curvilinear vertically strecthed grid with topology {TX, TY, TZ}\n\n\n\n\n\n","category":"type"},{"location":"library/#PlanktonIndividuals.Grids.LoadVerticallyStretchedLatLonGrid-Tuple{}","page":"Library","title":"PlanktonIndividuals.Grids.LoadVerticallyStretchedLatLonGrid","text":"LoadVerticallyStretchedLatLonGrid(; grid_info, size, lat, lon,\n                                    halo=(2,2,2))\n\nCreats a VerticallyStretchedLatLonGrid struct with size = (Nx, Ny, Nz) grid points.\n\nKeyword Arguments (Required)\n\ngrid_info : A NamedTuple contains external grid information (e.g. from MITgcm), please                   refer to documentation for the required format.\nsize : A tuple prescribing the number of grid points.                size is a 3-tuple no matter for 3D, 2D, or 1D model.\nlat : A 2-tuple specifying the startind and ending points in latitudinal direction.               Possible values are from -80 (80S) to 80 (80N).\nlon : A 2-tuple specifying the startind and ending points in longitudinal direction.               Possible values are from -180 (180W) to 180 (180E).\n\nKeyword Arguments (Optional)\n\nhalo : A tuple of integers that specifies the size of the halo region of cells               surrounding the physical interior for each direction.               halo is a 3-tuple no matter for 3D, 2D, or 1D model.               At least 2 halo points are needed for DST3FL advection scheme.\n\n\n\n\n\n","category":"method"},{"location":"library/#Fields","page":"Library","title":"Fields","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"Modules = [PlanktonIndividuals.Fields]\nPrivate = false\nPages   =[\n    \"Fields/Fields.jl\",\n    \"Fields/boundary_conditions.jl\"\n]","category":"page"},{"location":"library/#PlanktonIndividuals.Fields.Field-Tuple{Architecture, PlanktonIndividuals.Grids.AbstractGrid}","page":"Library","title":"PlanktonIndividuals.Fields.Field","text":"Field(arch::Architecture, grid::AbstractGrid; bcs = default_bcs())\n\nConstruct a Field on grid with data and boundary conditions on architecture arch\n\n\n\n\n\n","category":"method"},{"location":"library/#PlanktonIndividuals.Fields.set_bc!-Tuple{Any, Symbol, Symbol, Union{Number, AbstractArray}}","page":"Library","title":"PlanktonIndividuals.Fields.set_bc!","text":"set_bc!(model, tracer::Symbol, pos::Symbol, bc_value::Union{Number, AbstractArray})\n\nSet the boundary condition of tracer on pos with bc_value.\n\n\n\n\n\n","category":"method"},{"location":"library/#Biogeochmeistry","page":"Library","title":"Biogeochmeistry","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"Modules = [PlanktonIndividuals.Biogeochemistry]\nPrivate = false\nPages   = [\n    \"Biogeochemistry/Biogeochemistry.jl\",\n    \"Biogeochemistry/nutrient_fields.jl\"\n]","category":"page"},{"location":"library/#PlanktonIndividuals.Biogeochemistry.default_nut_init-Tuple{}","page":"Library","title":"PlanktonIndividuals.Biogeochemistry.default_nut_init","text":"default_nut_init()\n\nGenerate defalut nutrient initial conditions.\n\n\n\n\n\n","category":"method"},{"location":"library/#PlanktonIndividuals.Biogeochemistry.generate_nutrients-Tuple{Any, Any, Union{Dict, NamedTuple}}","page":"Library","title":"PlanktonIndividuals.Biogeochemistry.generate_nutrients","text":"generate_nutrients(arch, grid, source; mask = nothing)\n\nSet up initial nutrient fields according to grid.\n\nKeyword Arguments\n\narch: CPU() or GPU(). The computer architecture used to time-step model.\ngrid: The resolution and discrete geometry on which nutrient fields are solved.\nsource: A NamedTuple containing 10 numbers each of which is the uniform initial condition of one tracer,            or a Dict containing the file paths pointing to the files of nutrient initial conditions.\nmask (optional): Mask out the tracers generated out of the domain, a 3D array with size (Nx, Ny, Nz).\n\n\n\n\n\n","category":"method"},{"location":"library/#Parameters","page":"Library","title":"Parameters","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"Modules = [PlanktonIndividuals.Parameters]\nPrivate = false\nPages   = [\n    \"Parameters/Parameters.jl\",\n    \"Parameters/param_default.jl\",\n    \"Parameters/param_update.jl\"\n]","category":"page"},{"location":"library/#PlanktonIndividuals.Parameters.bgc_params_default-Tuple{}","page":"Library","title":"PlanktonIndividuals.Parameters.bgc_params_default","text":"bgc_params_default()\n\nGenerate default biogeochemical parameter values \n\n\n\n\n\n","category":"method"},{"location":"library/#PlanktonIndividuals.Parameters.default_PARF-Tuple{Any, Any, Any}","page":"Library","title":"PlanktonIndividuals.Parameters.default_PARF","text":"default_PARF(grid, ΔT, iterations)\n\nGenerate default hourly surface PAR.\n\n\n\n\n\n","category":"method"},{"location":"library/#PlanktonIndividuals.Parameters.default_temperature-Tuple{Any, Any, Any}","page":"Library","title":"PlanktonIndividuals.Parameters.default_temperature","text":"default_temperature(grid, ΔT, iterations)\n\nGenerate default hourly temperature.\n\n\n\n\n\n","category":"method"},{"location":"library/#PlanktonIndividuals.Parameters.phyt_params_default-Tuple{QuotaMode}","page":"Library","title":"PlanktonIndividuals.Parameters.phyt_params_default","text":"phyt_params_default(mode::AbstractMode)\n\nGenerate default phytoplankton parameter values based on AbstractMode\n\n\n\n\n\n","category":"method"},{"location":"library/#PlanktonIndividuals.Parameters.update_bgc_params-Tuple{Dict}","page":"Library","title":"PlanktonIndividuals.Parameters.update_bgc_params","text":"update_bgc_params(tmp::Ditc)\n\nUpdate parameter values based on a Dict provided by user\n\nKeyword Arguments\n\ntmp is a Dict containing the parameters needed to be upadated\n\n\n\n\n\n","category":"method"},{"location":"library/#PlanktonIndividuals.Parameters.update_phyt_params-Tuple{Dict, PlanktonIndividuals.AbstractMode}","page":"Library","title":"PlanktonIndividuals.Parameters.update_phyt_params","text":"update_phyt_params(tmp::Dict)\n\nUpdate parameter values based on a Dict provided by user\n\nKeyword Arguments\n\ntmp is a Dict containing the parameters needed to be upadated\n\n\n\n\n\n","category":"method"},{"location":"library/#Diagnostics","page":"Library","title":"Diagnostics","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"Modules = [PlanktonIndividuals.Diagnostics]\nPrivate = false\nPages   = [\n    \"Diagnostics/Diagnostics.jl\",\n    \"Diagnostics/diagnostics_struct.jl\"\n]","category":"page"},{"location":"library/#PlanktonIndividuals.Diagnostics.PlanktonDiagnostics-Tuple{Any}","page":"Library","title":"PlanktonIndividuals.Diagnostics.PlanktonDiagnostics","text":"PlanktonDiagnostics(model; tracer=(:PAR, :NH4, :NO3, :DOC),\n                    plankton=(:num, :graz, :mort, :dvid),\n                    time_interval = 3600)\n\nGenerate a PlanktonDiagnostics structure.\n\nKeyword Arguments (Optional)\n\ntracer : a Tuple containing the names of nutrient fields to be diagnosed.\nplankton : a Tuple containing the names of physiological processes of plankton individuals to be diagnosed.\ntime_interval : The time interval that diagnostics is averaged, an hour (3600 seconds) by default.\n\n\n\n\n\n","category":"method"},{"location":"library/#Model","page":"Library","title":"Model","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"Modules = [PlanktonIndividuals, PlanktonIndividuals.Model]\nPrivate = false\nPages   =[\n    \"PlanktonIndividuals.jl\",\n    \"Model/Model.jl\",\n    \"Model/models.jl\"\n]","category":"page"},{"location":"library/#PlanktonIndividuals.CarbonMode","page":"Library","title":"PlanktonIndividuals.CarbonMode","text":"CarbonMode <: AbstractMode\n\nType for the phytoplankton physiology mode which only resolves carbon quota.\n\n\n\n\n\n","category":"type"},{"location":"library/#PlanktonIndividuals.MacroMolecularMode","page":"Library","title":"PlanktonIndividuals.MacroMolecularMode","text":"MacroMolecularMode <: AbstractMode\n\nType for the phytoplankton physiology mode which resolves marco-molecules.\n\n\n\n\n\n","category":"type"},{"location":"library/#PlanktonIndividuals.QuotaMode","page":"Library","title":"PlanktonIndividuals.QuotaMode","text":"QuotaMode <: AbstractMode\n\nType for the phytoplankton physiology mode which resolves carbon, nitrogen, and phosphorus quotas.\n\n\n\n\n\n","category":"type"},{"location":"library/#PlanktonIndividuals.Model.PlanktonModel-Tuple{Architecture, PlanktonIndividuals.Grids.AbstractGrid}","page":"Library","title":"PlanktonIndividuals.Model.PlanktonModel","text":"PlanktonModel(arch::Architecture, grid::AbstractGrid;\n              N_species = 1,\n              N_individual = 1024,\n              max_individuals = 8*1024,\n              bgc_params = bgc_params_default(), \n              phyt_params = phyt_params_default(),\n              nut_initial = default_nut_init(),\n              t = 0.0,\n              mode = QuotaMode(),\n              mask = nothing,\n              )\n\nGenerate a PlanktonModel data structure. \n\nKeyword Arguments (Required)\n\narch : CPU() or GPU(). Computer architecture being used to run the model.\ngrid : a AbstractGrid structure. Discrete grid for the model (resolution and geometry).\nmode : Phytoplankton physiology mode, choose among CarbonMode(), QuotaMode(), or MacroMolecularMode().\n\nKeyword Arguments (Optional)\n\nN_species : Number of species.\nN_individual : Number of individuals per species.\nmax_individuals : Maximum number of individuals per species the model can hold.\nbgc_params : Parameter set for biogeochemical processes modeled in the model.\nphyt_params : Parameter set for physiological processes of individuals modeled in the model.\nnut_initial : The source of initial conditions of nutrient fields, should be either a NamedTuple                           or a Dict containing the file paths pointing to the files of nutrient initial conditions.\nt : Model time, start from 0 by default, in second.\nmask : Mask out the individuals and tracers generated out of the domain, a 3D array with size (Nx, Ny, Nz).\n\n\n\n\n\n","category":"method"},{"location":"library/#Simulation","page":"Library","title":"Simulation","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"Modules = [PlanktonIndividuals.Simulation]\nPrivate = false\nPages   =[\n    \"Simulation/Simulation.jl\",\n    \"Simulation/simulations.jl\",\n    \"Simulation/update.jl\",\n    \"Simulation/utils.jl\"\n]","category":"page"},{"location":"library/#PlanktonIndividuals.Simulation.PlanktonSimulation-Tuple{PlanktonModel}","page":"Library","title":"PlanktonIndividuals.Simulation.PlanktonSimulation","text":"PlanktonSimulation(model; ΔT, iterations,\n                   PARF = default_PARF(model.grid),\n                   temp = default_temperature(model.grid),\n                   diags = nothing,\n                   vels = (;),\n                   ΔT_vel = ΔT,\n                   ΔT_PAR::Int64 = 3600,\n                   ΔT_temp::Int64 = 3600,\n                   output_writer = nothing,\n                   )\n\nGenerate a PlanktonSimulation data structure.\n\nKeyword Arguments (Required)\n\nΔT : time step in second.\niterations : run the simulation for this number of iterations.\n\nKeyword Arguments (Optional)\n\nPARF : External forcings of surface PAR. Hourly PAR of a single day is provided by default.\ntemp : External forcings of temperature. Hourly data of a single day is provided by default.\ndiags : Diagnostics of the simulation generated by PlanktonDiagnostics.\nvels : The velocity fields for nutrient fields and individuals. nothing means no velocities                    will be applied in the simulation. Otherwise, vels mush be a NamedTuple containing                    all u, v, and w. Each of u, v, and w must be an 4D-Array of                     (Nx, Ny, Nz, nΔT) elements, excluding halo points. N+1 is required for bounded direction.\nΔT_vel : time step of velocities provided externally (in seconds).\nΔT_PAR : time step of surface PAR provided externally (in seconds).\nΔT_temp : time step of temperature provided externally (in seconds).\noutput_writer : Output writer of the simulation generated by PlanktonOutputWriter.\n\n\n\n\n\n","category":"method"},{"location":"library/#PlanktonIndividuals.Simulation.update!-Tuple{PlanktonSimulation}","page":"Library","title":"PlanktonIndividuals.Simulation.update!","text":"update!(sim::PlanktonSimulaiton) update the PlanktonSimulaiton for sim.iterations time steps.\n\n\n\n\n\n","category":"method"},{"location":"library/#PlanktonIndividuals.Simulation.vel_copy!-Union{Tuple{TZ}, Tuple{TY}, Tuple{TX}, Tuple{NamedTuple, Any, Any, Any, PlanktonIndividuals.Grids.AbstractGrid{TX, TY, TZ}}} where {TX, TY, TZ}","page":"Library","title":"PlanktonIndividuals.Simulation.vel_copy!","text":"vel_copy!(vel::NamedTuple, u, v, w, g::AbstractGrid{TX, TY, TZ}) where {TX, TY, TZ}\n\nCopy external velocities into PlanktonModel\n\n\n\n\n\n","category":"method"},{"location":"library/#Output","page":"Library","title":"Output","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"Modules = [PlanktonIndividuals.Output]\nPrivate = false\nPages   =[\n    \"Output/Output.jl\",\n    \"Output/output_writer.jl\"\n]","category":"page"},{"location":"model_run/#Model-Simulation","page":"Model Simulation","title":"Model Simulation","text":"","category":"section"},{"location":"model_run/","page":"Model Simulation","title":"Model Simulation","text":"A PlanktonSimulation includes a PlanktonModel and its time step ΔT and number of time steps nΔT. It will time step the PlanktonModel by calling update!.","category":"page"},{"location":"model_run/","page":"Model Simulation","title":"Model Simulation","text":"PlanktonSimulation","category":"page"},{"location":"model_run/#PlanktonIndividuals.Simulation.PlanktonSimulation","page":"Model Simulation","title":"PlanktonIndividuals.Simulation.PlanktonSimulation","text":"PlanktonSimulation(model; ΔT, iterations,\n                   PARF = default_PARF(model.grid),\n                   temp = default_temperature(model.grid),\n                   diags = nothing,\n                   vels = (;),\n                   ΔT_vel = ΔT,\n                   ΔT_PAR::Int64 = 3600,\n                   ΔT_temp::Int64 = 3600,\n                   output_writer = nothing,\n                   )\n\nGenerate a PlanktonSimulation data structure.\n\nKeyword Arguments (Required)\n\nΔT : time step in second.\niterations : run the simulation for this number of iterations.\n\nKeyword Arguments (Optional)\n\nPARF : External forcings of surface PAR. Hourly PAR of a single day is provided by default.\ntemp : External forcings of temperature. Hourly data of a single day is provided by default.\ndiags : Diagnostics of the simulation generated by PlanktonDiagnostics.\nvels : The velocity fields for nutrient fields and individuals. nothing means no velocities                    will be applied in the simulation. Otherwise, vels mush be a NamedTuple containing                    all u, v, and w. Each of u, v, and w must be an 4D-Array of                     (Nx, Ny, Nz, nΔT) elements, excluding halo points. N+1 is required for bounded direction.\nΔT_vel : time step of velocities provided externally (in seconds).\nΔT_PAR : time step of surface PAR provided externally (in seconds).\nΔT_temp : time step of temperature provided externally (in seconds).\noutput_writer : Output writer of the simulation generated by PlanktonOutputWriter.\n\n\n\n\n\n","category":"type"},{"location":"model_run/#Model-Diagnostics","page":"Model Simulation","title":"Model Diagnostics","text":"","category":"section"},{"location":"model_run/","page":"Model Simulation","title":"Model Simulation","text":"PlanktonDiagnostics","category":"page"},{"location":"model_run/#PlanktonIndividuals.Diagnostics.PlanktonDiagnostics","page":"Model Simulation","title":"PlanktonIndividuals.Diagnostics.PlanktonDiagnostics","text":"PlanktonDiagnostics(model; tracer=(:PAR, :NH4, :NO3, :DOC),\n                    plankton=(:num, :graz, :mort, :dvid),\n                    time_interval = 3600)\n\nGenerate a PlanktonDiagnostics structure.\n\nKeyword Arguments (Optional)\n\ntracer : a Tuple containing the names of nutrient fields to be diagnosed.\nplankton : a Tuple containing the names of physiological processes of plankton individuals to be diagnosed.\ntime_interval : The time interval that diagnostics is averaged, an hour (3600 seconds) by default.\n\n\n\n\n\n","category":"type"},{"location":"model_run/","page":"Model Simulation","title":"Model Simulation","text":"Model diagnostics are specified by tracer (for tracers) and plankton (for individuals). Diagnostics for individuals are aggregated into gridded fields.","category":"page"},{"location":"model_run/","page":"Model Simulation","title":"Model Simulation","text":"A full list of available diagnostics is provided below:","category":"page"},{"location":"model_run/","page":"Model Simulation","title":"Model Simulation","text":"tracer = (:PAR, # photosynthetically active radiation\n          :DIC, # dissolved inorganic carbon\n          :NH4, # ammonia\n          :NO3, # nitrate\n          :PO4, # phosphate\n          :DOC, # dissolved organic carbon\n          :DON, # dissolved organic nitrogen\n          :DOP, # dissolved organic phosphorus\n          :POC, # particulate organic carbon\n          :PON, # particulate organic nitrogen\n          :POP  # particulate organic phosphorus\n         )\n\nplankton = (:num,  # number of individuals\n            :graz, # number of grazed individuals\n            :mort, # number of died individuals\n            :dvid, # number of divided individuals\n            :PS,   # photosynthesis rate\n            :BS,   # biosynthesis rate\n            :VDOC, # DOC uptake rate\n            :VHN4, # NH4 uptake rate\n            :VNO3, # NO3 uptake rate\n            :VPO4, # PO4 uptake rate\n            :resp, # respiration rate\n            :exu,  # exudation rate\n            :Bm,   # functional biomass\n            :Cq,   # Carbon pool\n            :Nq,   # Nitrogen pool\n            :Pq,   # Phosphorus pool\n            :Chl   # Chla\n           )","category":"page"},{"location":"model_run/#Output-Writer","page":"Model Simulation","title":"Output Writer","text":"","category":"section"},{"location":"model_run/","page":"Model Simulation","title":"Model Simulation","text":"PlanktonOutputWriter","category":"page"},{"location":"model_run/#PlanktonIndividuals.Output.PlanktonOutputWriter","page":"Model Simulation","title":"PlanktonIndividuals.Output.PlanktonOutputWriter","text":"PlanktonOutputWriter(;dir = \"./results\",\n                           diags_prefix = \"diags\",\n                           plankton_prefix = \"plankton\",\n                           write_log = false,\n                           save_diags = false,\n                           save_plankton = false,\n                           plankton_include = (:x, :y, :z, :Sz),\n                           max_filesize = Inf,\n                           )\n\nGenerate a PlanktonOutputWriter structure which includes settings for model outputs\n\nKeyword Arguments (Optional)\n\ndir: The directory to store model outputs, \"./results\" by default\ndiags_prefix: Descriptive filename prefixed to diagnostic output files.\nplankton_prefix: Descriptive filename prefixed to plankton output files.\nwrite_log: write model logs which contain global averages of simulated plankton, default: false.\nsave_diags: write diagnostics to disk, default: false.\nsave_plankton: write plankton to disk, default: false.\nplankton_include: list of plankton properties to save, default: (:x, :y, :z, :Sz)\nmax_filesize: The writer will stop writing to the output file once the file size exceeds max_filesize,                   and write to a new one with a consistent naming scheme ending in part1, part2, etc.                   default: Inf.\n\n\n\n\n\n","category":"type"},{"location":"model_run/","page":"Model Simulation","title":"Model Simulation","text":"The model currently has two types of outputs which are both saved in JLD2 files.","category":"page"},{"location":"model_run/","page":"Model Simulation","title":"Model Simulation","text":"First, the state of all individuals at each time step of a PlanktonSimulation gets saved in a file named plankton_prefix*\".jld2\", default: plankton.jld2.","category":"page"},{"location":"model_run/","page":"Model Simulation","title":"Model Simulation","text":"Second, for diagnostics, individuals at each time step will be aggregated into tracer fields. The keyword argument time_interval in PlanktonDiagnostics specifies the time window that the diagnostics are averaged. Only diagnostics specified by tracer and plankton in PlanktonDiagnostics will be saved. All the diagnostics of a PlanktonSimulation will be saved in a file named diags_prefix*\".jld2\", default: diags.jld2.","category":"page"},{"location":"gpu_support/#GPU-Support","page":"GPU Support","title":"GPU Support","text":"","category":"section"},{"location":"gpu_support/","page":"GPU Support","title":"GPU Support","text":"PlanktonIndividuals.jl has support from CUDA.jl and KernelAbstractions.jl to be able to run on graphical processing unit (GPU) for higher performance. Depending on the combination of CPU and GPU you have, a speedup of 35x is possible. Please see Benchmarks for more details.","category":"page"},{"location":"gpu_support/#How-to-use-a-GPU","page":"GPU Support","title":"How to use a GPU","text":"","category":"section"},{"location":"gpu_support/","page":"GPU Support","title":"GPU Support","text":"To use a GPU to run PlanktonIndividuals.jl is easy. Users do not need to rewrite the setup or simulation script to change the architecture to run on. See Architecture for detailed instructions on setting up a model on GPU.","category":"page"},{"location":"gpu_support/","page":"GPU Support","title":"GPU Support","text":"tip: Running on GPUs\nIf you are having issues with running PlanktonIndividuals on a GPU, please open an issue","category":"page"},{"location":"gpu_support/#When-to-use-a-GPU","page":"GPU Support","title":"When to use a GPU","text":"","category":"section"},{"location":"gpu_support/","page":"GPU Support","title":"GPU Support","text":"GPU is very useful when running large simulations (either large domain or huge number of individuals, or both). If you simulate over 10,000 individuals, you will probably benefit form GPU. Please note, GPU is usually memory-limited, that is to say, you will probably fill up the memory on GPU long before the model slows down.","category":"page"},{"location":"gpu_support/","page":"GPU Support","title":"GPU Support","text":"Individuals take up a large amount of GPU memory due to complicated physiological processes and diagnostics. Typically, one should not try more than 50,000 individuals for a 12GB GPU.","category":"page"},{"location":"gpu_support/#GPU-resources","page":"GPU Support","title":"GPU resources","text":"","category":"section"},{"location":"gpu_support/","page":"GPU Support","title":"GPU Support","text":"There are a few resources you can try to acquire a GPU from.","category":"page"},{"location":"gpu_support/","page":"GPU Support","title":"GPU Support","text":"Google Colab provides GPUs but you need to install Julia manually. Please see this post on the Julia Discourse for detailed instructions.\nCode Ocean also has GPU support. You can use \"Ubuntu Linux with GPU support (18.04.3)\" but you still have to install Julia manually.","category":"page"},{"location":"phyto_equations/#Phytoplankton-Physiology","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"","category":"section"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"The various resources and processes are summarized in the schematic below, and further detail is provided in the following sub-sections.","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"(Image: skematic)","category":"page"},{"location":"phyto_equations/#State-Variables","page":"Phytoplankton Physiology","title":"State Variables","text":"","category":"section"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"Each phytoplankton individual is characterized using eight state variables (see table below).","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"Symbol Unit Description\nBm mmolCcell functional biomass pool in C\nCq mmolCcell C reserve\nNq mmolNcell N reserve\nPq mmolPcell P reserve\nchl mgChlcell Chla pool\nSz unitless relative cell size\ngen unitless generation\nage hour age of the individual","category":"page"},{"location":"phyto_equations/#Photosynthesis","page":"Phytoplankton Physiology","title":"Photosynthesis","text":"","category":"section"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"The parameterization for photosynthesis is formulated as","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"PS=PC cdot Bm","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"PC=PC_maxcdot (1-e^frac-alpha cdot Icdot ChlPC_maxcdot Bm)","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"PC_max= PCmax cdot Sz^PC_b","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"where PS is cell-specific photosynthesis rate (mmol C/cell/s) and PC_max is scaled by a power-law relationship of cell size (Sz).","category":"page"},{"location":"phyto_equations/#Nutrient-Uptake","page":"Phytoplankton Physiology","title":"Nutrient Uptake","text":"","category":"section"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"Nutrient uptake rates (VNH4, VNO3, and VPO4) are cell-specific (mmol N/cell/s or mmol P/cell/s) and include intracellular nutrient limitation:","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"beginalign\nVNH4 = VNH4_cellcdot regQ_NcdotfracNH4NH4+K_NH4^sat nonumber \nVNO3 = VNO3_cellcdot regQ_NcdotfracNO3NO3+K_NO3^sat nonumber \nVPO4 = VPO4_cellcdot regQ_PcdotfracPO4PO4+K_PO4^sat nonumber\nendalign","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"beginalign\nregQ_N = biggfracNqmax-Q_NNqmax - Nqminbigg_0^1 nonumber \nregQ_P = biggfracPqmax-Q_PPqmax - Pqminbigg_0^1 nonumber\nendalign","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"beginalign\nQ_N = (Nq + Bm cdot R_NC)  (Cq + Bm) nonumber \nQ_P = (Pq + Bm cdot R_PC)  (Cq + Bm) nonumber\nendalign","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"beginalign\nVNH4_cell = VNH4max cdot Sz^VN_b cdot Bm nonumber \nVNO3_cell = VNO3max cdot Sz^VN_b cdot Bm nonumber \nVPO4_cell = VPO4max cdot Sz^VP_b cdot Bm nonumber\nendalign","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"where VNH4max, VNO3max, and VPO4max are constant parameters (see Parameters) while VNH4_cell, VNO3_cell, and VPO4_cell are cell-specific maximum uptake rates (mmol N/cell/s or mmol P/cell/s) depending on cell size, Sz.","category":"page"},{"location":"phyto_equations/#Reserve-Update","page":"Phytoplankton Physiology","title":"Reserve Update","text":"","category":"section"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"The model first updates C, N, and P reserves based on photosynthesis rate (PS) and nutrient uptake rates (VNH4, VNO3, and VPO4) as formulated above. The result is then used to calculate the biosynthesis and excretion rates.","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"beginalign\nCq = Cq+PS cdot Delta T nonumber \nNq = Nq+VNO3+VNH4 cdot Delta T nonumber \nPq = Pq+VPO4 cdot Delta T nonumber\nendalign","category":"page"},{"location":"phyto_equations/#Biosynthesis-And-Excretion-Rates","page":"Phytoplankton Physiology","title":"Biosynthesis And Excretion Rates","text":"","category":"section"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"Potential biosynthesis rates are calculated based on C, N, P quotas as","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"beginalign\nBS_C = Cq cdot k_mtb nonumber \nBS_N = NqR_NC cdot k_mtb nonumber \nBS_P = PqR_PC cdot k_mtb nonumber\nendalign","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"k_mtb= kmtb_max cdot Sz^kmtb_b","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"The minimum of these rates gives the actual biosynthesis rate, BS (mmol C/cell/s), and the difference between carbon-based biosynthesis rate and BS gives the excretion rate, ExuC (mmol C/cell/s).","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"BS = min(BS_C BS_N BS_P)","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"ExuC = BS_C - BS","category":"page"},{"location":"phyto_equations/#Chlorophyll-Synthesis","page":"Phytoplankton Physiology","title":"Chlorophyll Synthesis","text":"","category":"section"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"S_chl = rho_chl * BS * R_NC","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"beginequation\nrho_chl =\n    begincases\n        chlN * fracPC*Bmalpha I cdot chl  quad alpha I  0\n        0  quad else\n    endcases nonumber\nendequation","category":"page"},{"location":"phyto_equations/#Respiration","page":"Phytoplankton Physiology","title":"Respiration","text":"","category":"section"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"Respir = respir_a cdot Sz^respir_b cdot Bm","category":"page"},{"location":"phyto_equations/#Biomass-Update","page":"Phytoplankton Physiology","title":"Biomass Update","text":"","category":"section"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"Biosynthesis yields a biomass increase, a commensurate reduction in nutrient reserves, and an increase in chlorophyll. The carbon reserve is further modified by respiration.","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"beginalign\nBm  = Bm + BS cdot Delta T nonumber \nCq  = Cq - (BS - Respir) cdot Delta T nonumber \nNq  = Nq - BS*R_NC cdot Delta T nonumber \nPq  = Pq - BS*R_PC cdot Delta T nonumber \nchl = chl + S_chl cdot Delta T nonumber\nendalign","category":"page"},{"location":"phyto_equations/#Cell-division","page":"Phytoplankton Physiology","title":"Cell division","text":"","category":"section"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"Cell size, Sz, is used to indicate cell division. For the smallest cell, Sz=10 and Bm=Cquota. Cells start to divide at Sz=20 and the probability of individual cell division is then given by a sigmoidal function of Sz.","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"Sz = (Bm + Cq)  Cquota","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"P_divide = rand(Bernoulli(P_dvid*(tanh(stp_dvid*(Sz-b))+1)))","category":"page"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"P_divide is computed every hour no matter what time step the model is.","category":"page"},{"location":"phyto_equations/#Parameters","page":"Phytoplankton Physiology","title":"Parameters","text":"","category":"section"},{"location":"phyto_equations/","page":"Phytoplankton Physiology","title":"Phytoplankton Physiology","text":"Symbol Param Default Unit Description\nPCmax PCmax 4.2e-5 s^-1 Maximum photosynthesis rate\nVNH4max VNH4max 6.9e-6 s^-1 Maximum ammonium uptake rate\nVNO3max VNO3max 6.9e-6 s^-1 Maximum nitrate uptake rate\nVPO4max VPO4max 1.2e-6 s^-1 Maximum phosphate uptake rate\nPC_b PC_b 0.6  Shape parameter for PC\nVN_b VN_b 0.6  Shape parameter for VNH4 and VNO3\nVP_b VP_b 0.6  Shape parameter for VPO4\nK^sat_NH4 ksatNH4 0.005 mmolNm^3 Half-saturation constant for NH4\nK^sat_NO3 ksatNO3 0.010 mmolNm^3 Half-saturation constant for NO3\nK^sat_PO4 ksatPO4 0.003 mmolPm^3 Half-saturation constant for PO4\nNqmax Nqmax 0.12 mmolNmmolC Maximum N quota in cell\nNqmin Nqmin 0.05 mmolNmmolC Minimum N quota in cell\nPqmax Pqmax 0.01 mmolPmmolC Maximum P quota in cell\nPqmin Pqmax 0.004 mmolPmmolC Minimum P quota in cell\nR_NC R_NC 16/106 mmolNmmolC N:C ratio in function biomass\nR_PC R_PC 1/106 mmolPmmolC P:C ratio in function biomass\nkmtb_max k_mtb 3.5e-5 s^-1 Maximum metabolic rate\nkmtb_b k_mtb_b 0.25  Shape parameter for k_mtb\nrespir_a respir_a 1.2e-6 s^-1 Maximum respiration rate\nrespir_b respir_b 0.6  Shape parameter for respir_a\nchltextN Chl2N 3.0 mgchlmmolN Maximum Chl:N in cell\nP_dvid P_dvid 5.0e-5 s^-1 Probability of division per second\nstp_dvid stp_dvid 6.0  Steepness of division function","category":"page"},{"location":"examples/#examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Lab Experiment ➭ download / url\nOcean Transect ➭ download / url\nTwo-Dimensional Map ➭ download / url\nThree-Dimensional Domain ➭ download / url\nGlobal Ocean Example ➭ download / url","category":"page"},{"location":"examples/#examples-running","page":"Examples","title":"Running The Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Any example found in the online documentation is most easily run using Pluto.jl. Just copy the corresponding download / url link (see above) and paste into the Pluto.jl interface.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The notebooks can also be run the command line (e.g., julia -e 'include(\"defaults.jl\"). In that case, unlike with Pluto.jl, user needs to Pkg.add packages separately.","category":"page"},{"location":"model_description/#model-description","page":"Model Description","title":"Model Description","text":"","category":"section"},{"location":"model_description/","page":"Model Description","title":"Model Description","text":"Pages = [\n    \"phyto_equations.md\",\n    \"bgc_equations.md\",\n]\nDepth = 2","category":"page"},{"location":"bgc_equations/#Biogeochemistry","page":"Biogeochemistry","title":"Biogeochemistry","text":"","category":"section"},{"location":"bgc_equations/","page":"Biogeochemistry","title":"Biogeochemistry","text":"All Eulerian tracers are advected, diffused, and affected by sources and sinks:","category":"page"},{"location":"bgc_equations/","page":"Biogeochemistry","title":"Biogeochemistry","text":"fracpartial Xpartial t = - nabla cdot (boldsymboluX) + nabla cdot (boldsymbolKnabla X) + S_X","category":"page"},{"location":"bgc_equations/","page":"Biogeochemistry","title":"Biogeochemistry","text":"where boldsymbolu=(uvw) is the velocity field provided by a physical model (see Model Simulation), boldsymbolK is the mixing tensor also from the physical model, and S_X is the source and sink term for tracer X. ","category":"page"},{"location":"bgc_equations/","page":"Biogeochemistry","title":"Biogeochemistry","text":"The source and sinks term, S_X, can be different for each tracer and include biological transformations, chemical reactions, and external sources and sinks as detailed below.","category":"page"},{"location":"bgc_equations/","page":"Biogeochemistry","title":"Biogeochemistry","text":"The advection scheme used is Third Order Direct Space-Time with Flux Limiting.","category":"page"},{"location":"bgc_equations/#Carbon-Cycle","page":"Biogeochemistry","title":"Carbon Cycle","text":"","category":"section"},{"location":"bgc_equations/","page":"Biogeochemistry","title":"Biogeochemistry","text":"S_DIC = -sum_j PS_jcdot n_j + k_DOCcdot DOC + F_C","category":"page"},{"location":"bgc_equations/","page":"Biogeochemistry","title":"Biogeochemistry","text":"beginalign\nS_DOC  = k_POC cdot POC + f_Cm cdot sum_j ((Bm_j+Cq_j)cdot n_jm) nonumber\n         quad \n        + f_Cg cdot sum_j ((Bm_j+Cq_j)cdot n_jg) - k_DOC cdot DOC nonumber\nendalign","category":"page"},{"location":"bgc_equations/","page":"Biogeochemistry","title":"Biogeochemistry","text":"beginalign\nS_POC  = (1-f_Cm) cdot sum_j ((Bm_j+Cq_j)cdot n_jm) nonumber\n         quad\n        + (1-f_Cg) cdot sum_j ((Bm_j+Cq_j)cdot n_jg) - k_POC cdot POC nonumber\nendalign","category":"page"},{"location":"bgc_equations/","page":"Biogeochemistry","title":"Biogeochemistry","text":"where n_j is the cell number of species j, n_jm is the dead cell number of species j, n_jg is the grazed cell number of species j.","category":"page"},{"location":"bgc_equations/#Nitrogen-Cycle","page":"Biogeochemistry","title":"Nitrogen Cycle","text":"","category":"section"},{"location":"bgc_equations/","page":"Biogeochemistry","title":"Biogeochemistry","text":"beginalign\nS_HN4 = -sum_j VNH4_jcdot n_j + k_DONcdot DON - k_nitcdot NH4 nonumber\nS_NO3 = -sum_j VNO3_jcdot n_j + k_nitcdot NH4 nonumber\nendalign","category":"page"},{"location":"bgc_equations/","page":"Biogeochemistry","title":"Biogeochemistry","text":"beginalign\nS_DON  = k_PON cdot PON + f_Nm cdot sum_j ((Bm_j*R_NC+Nq_j)cdot n_jm) nonumber\n         quad\n        + f_Ng cdot sum_j ((Bm_j*R_NC+Nq_j)cdot n_jg) - k_DON cdot DON nonumber\nendalign","category":"page"},{"location":"bgc_equations/","page":"Biogeochemistry","title":"Biogeochemistry","text":"beginalign\nS_PON  = (1-f_Nm) cdot sum_j ((Bm_j*R_NC+Nq_j)cdot n_jm) nonumber\n         quad\n        + (1-f_Ng) cdot sum_j ((Bm_j*R_NC+Nq_j)cdot n_jg) - k_PON cdot PON nonumber\nendalign","category":"page"},{"location":"bgc_equations/#Phosphorus-Cycle","page":"Biogeochemistry","title":"Phosphorus Cycle","text":"","category":"section"},{"location":"bgc_equations/","page":"Biogeochemistry","title":"Biogeochemistry","text":"S_PO4 = -sum_j VPO4_jcdot n_j + k_DOPcdot DOP","category":"page"},{"location":"bgc_equations/","page":"Biogeochemistry","title":"Biogeochemistry","text":"beginalign\nS_DOP  = k_POP cdot POP + f_Pm cdot sum_j ((Bm_j*R_PC+Pq_j)cdot n_jm) nonumber \n         quad\n        + f_Pg cdot sum_j ((Bm_j*R_PC+Nq_j)cdot n_jg) - k_DOP cdot DOP nonumber\nendalign","category":"page"},{"location":"bgc_equations/","page":"Biogeochemistry","title":"Biogeochemistry","text":"beginalign\nS_POP  = (1-f_Pm) cdot sum_j ((Bm_j*R_PC+Pq_j)cdot n_jm) nonumber\n         quad\n        + (1-f_Pg) cdot sum_j ((Bm_j*R_PC+Pq_j)cdot n_jg) - k_POP cdot POP nonumber\nendalign","category":"page"},{"location":"bgc_equations/#Parameters","page":"Biogeochemistry","title":"Parameters","text":"","category":"section"},{"location":"bgc_equations/","page":"Biogeochemistry","title":"Biogeochemistry","text":"Symbol Param Default Unit Description\nk_DOC kDOC 3.8e-7 s^-1 Remineralization rate of DOC\nk_DON kDON 3.8e-7 s^-1 Remineralization rate of DON\nk_DOP kDOP 3.8e-7 s^-1 Remineralization rate of DOP\nk_POC kPOC 3.8e-7 s^-1 Remineralization rate of POC\nk_PON kPON 3.8e-7 s^-1 Remineralization rate of PON\nk_POP kPOP 3.8e-7 s^-1 Remineralization rate of POP\nf_Cm mortFracC 0.5  Fraction of dead C goes to DOM\nf_Nm mortFracN 0.5  Fraction of dead N goes to DOM\nf_Pm mortFracP 0.5  Fraction of dead P goes to DOM\nf_Cg grazFracC 0.5  Fraction of grazed C goes to DOM\nf_Ng grazFracN 0.5  Fraction of grazed N goes to DOM\nf_Pg grazFracP 0.5  Fraction of grazed P goes to DOM","category":"page"},{"location":"#PlanktonIndividuals.jl","page":"Home","title":"PlanktonIndividuals.jl","text":"","category":"section"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PlanktonIndividuals.jl is a fast individual-based model written in Julia that runs on both CPU and GPU. It simulates the life cycle of ocean phytoplankton cells as Lagrangian particles while nutrients are represented as Eulerian tracers and advected over the gridded domain. The model is used to simulate and interpret the temporal and spatial variations in phytoplankton cell density, stoichiometry, as well as growth and division behaviors induced by diel cycle and physical motions ranging from sub-mesoscale to large scale processes.","category":"page"},{"location":"","page":"Home","title":"Home","text":"PlanktonIndividuals.jl can simulate multiple functional groups of phytoplankton with different growth and division strategies which will illustrate the interactions within and between functional groups. The individuals can be simulated not only in a zero-dimensional domain (like lab experiments) but also in one-, two- or three-dimensional domains where individuals will be advected by velocities provided by various models or observations.","category":"page"},{"location":"#Getting-Help","page":"Home","title":"Getting Help","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you are interested in using PlanktonIndividuals.jl or are trying to figure out how to use it, please feel free to ask us questions and get in touch!  ","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you're trying to set up a model then maybe you want to check out the examples. Please feel free to open an issue if you have any questions, comments, suggestions, etc!","category":"page"},{"location":"model_setup/#Model-Configuration","page":"Model Configuration","title":"Model Configuration","text":"","category":"section"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"The model configuration is specified within the PlanktonModel data structure. As documented below, the various parameters of a PlanktonModel can all be specified via keyword arguments. Options and features are documented in more detail afterwards and in the Examples section.","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"PlanktonModel","category":"page"},{"location":"model_setup/#PlanktonIndividuals.Model.PlanktonModel","page":"Model Configuration","title":"PlanktonIndividuals.Model.PlanktonModel","text":"PlanktonModel(arch::Architecture, grid::AbstractGrid;\n              N_species = 1,\n              N_individual = 1024,\n              max_individuals = 8*1024,\n              bgc_params = bgc_params_default(), \n              phyt_params = phyt_params_default(),\n              nut_initial = default_nut_init(),\n              t = 0.0,\n              mode = QuotaMode(),\n              mask = nothing,\n              )\n\nGenerate a PlanktonModel data structure. \n\nKeyword Arguments (Required)\n\narch : CPU() or GPU(). Computer architecture being used to run the model.\ngrid : a AbstractGrid structure. Discrete grid for the model (resolution and geometry).\nmode : Phytoplankton physiology mode, choose among CarbonMode(), QuotaMode(), or MacroMolecularMode().\n\nKeyword Arguments (Optional)\n\nN_species : Number of species.\nN_individual : Number of individuals per species.\nmax_individuals : Maximum number of individuals per species the model can hold.\nbgc_params : Parameter set for biogeochemical processes modeled in the model.\nphyt_params : Parameter set for physiological processes of individuals modeled in the model.\nnut_initial : The source of initial conditions of nutrient fields, should be either a NamedTuple                           or a Dict containing the file paths pointing to the files of nutrient initial conditions.\nt : Model time, start from 0 by default, in second.\nmask : Mask out the individuals and tracers generated out of the domain, a 3D array with size (Nx, Ny, Nz).\n\n\n\n\n\n","category":"type"},{"location":"model_setup/#Architecture","page":"Model Configuration","title":"Architecture","text":"","category":"section"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"Passing arch = CPU() or arch = GPU() to the PlanktonModel constructor will determine whether the model is time stepped on a CPU or GPU.","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"Users do not need to modify the setup or simulation script to change the architecture to run on. The only thing that needs to be changed is arch = CPU() or arch = GPU().","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"tip: Running on GPUs\nPlease refer to GPU Support for more detail on running PlanktonIndividuals on GPUs and don't hesitate to open an issue if you have any difficulty.","category":"page"},{"location":"model_setup/#Grid","page":"Model Configuration","title":"Grid","text":"","category":"section"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"Two options are supported for the grid: RegularRectilinearGrid and RegularLatLonGrid with constant grid spacing in each direction; grid spacing can differ between dimensions. Both Periodic and Bounded domain options are supported for the horizontal directions, whereas the domain is always Bounded in the vertical direction (top and bottom).","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"The RegularRectilinearGrid is constructed by specifying its size (Tuple specifying the number of grid points in each dimension) and spacing (Tuple specifying the grid cell width for each dimension).","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"For example, a rectilinear grid with 32 times 64 times 128 grid points and grid spacing of dx=1m, dy=2m, dz=4m is constructed like this:","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"DocTestSetup = quote\n    using PlanktonIndividuals\nend","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"julia> grid = RegularRectilinearGrid(size=(32, 64, 128), spacing=(1.0, 2.0, 4.0))\ndomain: x ∈ [0.0, 32.0], y ∈ [0.0, 128.0], z ∈ [0.0, -512.0]\ntopology (Tx, Ty, Tz):     (Periodic, Periodic, Bounded)\nresolution (Nx, Ny, Nz):   (32, 64, 128)\nhalo size (Hx, Hy, Hz):    (2, 2, 2)\ngrid spacing (Δx, Δy, Δz): (1.0, 2.0, 4.0)","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"The RegularLatLonGrid is constructed by specifying its size (Tuple specifying the number of grid points in each dimension) and lat, lon, z (Tuple specifying the start and end points).","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"For example, a global domain from 80S to 80N, 180W to 180E and 200m depth with spacing of 1 degree horizontally and 10m vertically is constructed like this:","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"julia> grid = RegularLatLonGrid(size=(360,160,20), lat = (-80,80), lon = (-180,180), z = (0,-200)) \ndomain: x ∈ [-180.0, 180.0], y ∈ [-80.0, 80.0], z ∈ [0.0, -200.0]\ntopology (Tx, Ty, Tz):     (Periodic, Bounded, Bounded)\nresolution (Nx, Ny, Nz):   (360, 160, 20)\nhalo size (Hx, Hy, Hz):    (2, 2, 2)\ngrid spacing (Δx, Δy, Δz): (1.0, 1.0, 10.0)","category":"page"},{"location":"model_setup/#Individuals","page":"Model Configuration","title":"Individuals","text":"","category":"section"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"The number of species can be specified via N_species. The number of individuals per species can be specified via N_individual. The maximum number of individuals per species that the model can hold is specified via max_individuals.","category":"page"},{"location":"model_setup/#parameters","page":"Model Configuration","title":"Parameters","text":"","category":"section"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"Default parameters are generated by two functions called bgc_params_default and phyt_params_default via dictionnaries (Dict). bgc_params contains the parameters for biogeochemical cycls. phyt_params contains the parameters for phytoplankton individuals. The default parameter values are listed here.","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"Values of the parameters can be changed using update_bgc_params and update_phyt_params.","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"In the example shown below, we change the value of kDOC, which is the remineralization rate for DOC:","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"julia> new_params = Dict(\"kDOC\" => 0.01) # no need to include all parameters\nDict{String, Float64} with 1 entry:\n  \"kDOC\" => 0.01\n\njulia> update_bgc_params(new_params)\nDict{String, Float64} with 13 entries:\n  \"kc\"   => 0.04\n  \"kDOC\" => 0.01\n  \"κhP\"  => 0.0\n  \"kPON\" => 3.85802e-7\n  \"kDON\" => 3.85802e-7\n  \"κh\"   => 0.0\n  \"κv\"   => 0.0\n  \"kDOP\" => 3.85802e-7\n  \"kPOP\" => 3.85802e-7\n  \"kw\"   => 0.046\n  \"Nit\"  => 3.85802e-7\n  \"kPOC\" => 3.85802e-7\n  \"κvP\"  => 0.0","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"phyt_params can be changed in the same way.","category":"page"},{"location":"model_setup/#Nutrient-fields","page":"Model Configuration","title":"Nutrient fields","text":"","category":"section"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"Nutrient fields included in the model are listed below. The initial conditions of the nutrient fields are generated by generate_nutrients either from a NamedTuple or a Dict. The NamedTuple contains two elements. First element is a 10-element NamedTuple, each element is a Float64 number filled uniformly across the domain as initial condition of a tracer. Second element is a 10-element NamedTuple, each element is a Float64 number indicating the random noise of each tracer. The Dict contains the file paths pointing to the files of existing nutrient initial conditions.","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"Name Unit Description\nDIC mmolCm^3 concentration of dissolved inorganic carbon\nNH4 mmolNm^3 concentration of ammonia\nNO3 mmolNm^3 concentration of nitrate\nPO4 mmolPm^3 concentration of phosphate\nDOC mmolCm^3 concentration of dissolved organic carbon\nDON mmolNm^3 concentration of dissolved organic nitrogen\nDOP mmolPm^3 concentration of dissolved organic phosphorus\nPOC mmolCm^3 concentration of particulate organic carbon\nPON mmolNm^3 concentration of particulate organic nitrogen\nPOP mmolPm^3 concentration of particulate organic phosphorus","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"tip: Noisy Initial Conditions\nA random noise can be included only if the initial conditions are generated by NamedTuple.","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"tip: Nutrient Fields\nThe initial conditions of all the nutrient fields should be non-negative.","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"An example of the NamedTuple is listed below:","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"initial_condition = (DIC=20.0, NH4=0.2, NO3=0.5, PO4=0.03, DOC=1.0, DON=0.1, DOP=0.05, POC=0.0, PON=0.0,POP=0.0)\nrand_noise = (DIC=0.0, NH4=0.0, NO3=0.0, PO4=0.0, DOC=0.0, DON=0.0, DOP=0.0, POC=0.0, PON=0.0,POP=0.0)\nnut_initial = (initial_condition = initial_condition, rand_noise = rand_noise)","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"And example of the Dict is listed below:","category":"page"},{"location":"model_setup/","page":"Model Configuration","title":"Model Configuration","text":"nut_init = Dict(\n    DIC => \"path/to/DIC.bin\",\n    NH4 => \"path/to/NH4.bin\",\n    NO3 => \"path/to/NO3.bin\",\n    PO4 => \"path/to/PO4.bin\",\n    DOC => \"path/to/DOC.bin\",\n    DON => \"path/to/DON.bin\",\n    DOP => \"path/to/DOP.bin\",\n    POC => \"path/to/POC.bin\",\n    PON => \"path/to/PON.bin\",\n    POP => \"path/to/POP.bin\")","category":"page"}]
}
